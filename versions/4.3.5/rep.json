{
  "swagger": "2.0",
  "info": {
    "description": "unused",
    "version": "6.0.30-SNAPSHOT",
    "title": "Replication"
  },
  "basePath": "/api/v1/data-services",
  "tags": [
    {
      "name": "StoreOnce Replication"
    },
    {
      "name": "Bandwidth Calculator"
    },
    {
      "name": "Bandwidth Limit"
    },
    {
      "name": "Bandwidth Windows"
    },
    {
      "name": "Blackout Now"
    },
    {
      "name": "Blackout Windows"
    },
    {
      "name": "Library Source Permissions"
    },
    {
      "name": "NAS share mapping files"
    },
    {
      "name": "Nas Share Mappings"
    },
    {
      "name": "Nas Share throughput parametrics"
    },
    {
      "name": "Service"
    },
    {
      "name": "Share Source Permissions"
    },
    {
      "name": "Source Appliance"
    },
    {
      "name": "Source Permissions"
    },
    {
      "name": "Target Appliance"
    },
    {
      "name": "Target Library"
    },
    {
      "name": "Target Shares"
    },
    {
      "name": "VTL Library Mapping Slots"
    },
    {
      "name": "VTL Library Mappings"
    },
    {
      "name": "Vtl Library throughput parametrics"
    },
    {
      "name": "events"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/rep/bandwidth-calculator": {
      "put": {
        "tags": [
          "Bandwidth Calculator"
        ],
        "summary": "Calculate bandwidth limit",
        "description": "Calculates the recommended bandwidth limit",
        "operationId": "getRecommendedLimit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model containing fields required to calculate bandwidth limit.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BandwidthCalculator"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/BandwidthCalculator"
            }
          },
          "400": {
            "description": "Invalid input specified in request"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/bandwidth-limit": {
      "get": {
        "tags": [
          "Bandwidth Limit"
        ],
        "summary": "Get bandwidth limit settings",
        "description": "Returns the status and magnitude of the bandwidth limit",
        "operationId": "getBandwidthLimitSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/BandwidthLimit"
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "Bandwidth Limit"
        ],
        "summary": "Update bandwidth limit settings",
        "description": "Updates the status and magnitude of the general bandwidth limit",
        "operationId": "updateBandwidthLimitSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of the Replication Bandwidth Window",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BandwidthLimitPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content. Successful Operation"
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      }
    },
    "/rep/bandwidth-windows": {
      "get": {
        "tags": [
          "Bandwidth Windows"
        ],
        "summary": "Get all bandwidth windows",
        "description": "Returns the bandwidth settings for all 7 days",
        "operationId": "getBandwidthWindows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/BandwidthWindowCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/bandwidth-windows/day/{day}": {
      "get": {
        "tags": [
          "Bandwidth Windows"
        ],
        "summary": "Get a single bandwidth window",
        "description": "Returns the specified day's bandwidth window settings",
        "operationId": "getBandwidthWindow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "day",
            "in": "path",
            "description": "Number representing the day of the week",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/BandwidthWindow"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "Bandwidth Windows"
        ],
        "summary": "Update a single bandwidth window",
        "description": "Updates the specified day's bandwidth window settings",
        "operationId": "updateBandwidthWindow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "day",
            "in": "path",
            "description": "Number representing the day of the week",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model of the Replication Bandwidth Window",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BandwidthWindowPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      }
    },
    "/rep/blackout-now": {
      "get": {
        "tags": [
          "Blackout Now"
        ],
        "summary": "Get Replication blackout override settings",
        "description": "Returns the status of the Replication blackout override",
        "operationId": "getBlackoutNow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/BlackoutNow"
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "Blackout Now"
        ],
        "summary": "Update Replication blackout override",
        "description": "Updates the the status of the Replication blackout override",
        "operationId": "updateBlackoutNow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of the Replication Blackout now",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlackoutNowPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content. Successful Operation"
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      }
    },
    "/rep/blackout-windows": {
      "get": {
        "tags": [
          "Blackout Windows"
        ],
        "summary": "Get all blackout windows",
        "description": "Returns the blackout settings for all 7 days",
        "operationId": "getBlackoutWindows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/BlackoutWindowsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/blackout-windows/day/{day}": {
      "get": {
        "tags": [
          "Blackout Windows"
        ],
        "summary": "Get a single blackout window",
        "description": "Returns the specified day's blackout window settings",
        "operationId": "getBlackoutWindow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "day",
            "in": "path",
            "description": "Number representing the day of the week",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/BlackoutWindow"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "Blackout Windows"
        ],
        "summary": "Update a single blackout window",
        "description": "Updates the specified day's blackout window settings",
        "operationId": "updateBlackoutWindow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "day",
            "in": "path",
            "description": "Number representing the day of the week",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model of the Replication Blackout Window",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlackoutWindowPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      }
    },
    "/rep/events": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get list of events",
        "description": "Returns collection of events",
        "operationId": "getRepEvents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/EventsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "delete": {
        "tags": [
          "events"
        ],
        "summary": "Delete the events",
        "description": "Delete the rep events",
        "operationId": "deleteRepEvents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/events/filter": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Get a filtered collection of events",
        "description": "Returns a filtered collection of events",
        "operationId": "getRepEventsFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventFilterModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/EventsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/library-mapping-slots/library/{libraryid}/mapping/{mappingid}": {
      "get": {
        "tags": [
          "VTL Library Mapping Slots"
        ],
        "summary": "Get a collection of slots",
        "description": "Returns a collection of slots (limited to a maximum of 1000 items per request)",
        "operationId": "getRepLibraryMappingSlots",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Unique id of the library",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Unique id of the mapping in the library",
            "required": true,
            "type": "string"
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count to return for request",
            "required": false,
            "type": "string",
            "default": "50"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/LibraryMappingSlotsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/library-mapping-slots/library/{libraryid}/mapping/{mappingid}/filter": {
      "post": {
        "tags": [
          "VTL Library Mapping Slots"
        ],
        "summary": "Get a filtered collection of slots",
        "description": "Returns a filtered collection of slots (limited to a maximum of 1000 items per request)",
        "operationId": "getRepLibraryMappingSlotsFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Unique id of the library",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Unique id of the mapping in the library",
            "required": true,
            "type": "string"
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LibraryMappingSlotFilterModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/LibraryMappingSlotsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/library-mapping-slots/library/{libraryid}/mapping/{mappingid}/slot/{slotid}": {
      "get": {
        "tags": [
          "VTL Library Mapping Slots"
        ],
        "summary": "Get a single mapped slot",
        "description": "Returns an individual mapped slot in the specified mapping",
        "operationId": "getRepLibraryMappingSlot",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Unique id of the library",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Unique id of the mapping in the library",
            "required": true,
            "type": "string"
          },
          {
            "name": "slotid",
            "in": "path",
            "description": "Unique id of the slot in the mapping",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/LibraryMappingSlotsModel"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "VTL Library Mapping Slots"
        ],
        "summary": "Updates the library slot details",
        "description": "Update the slot details with the given property",
        "operationId": "updateRepLibraryMappingSlot",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Unique id of the library",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Unique id of the mapping in the library",
            "required": true,
            "type": "string"
          },
          {
            "name": "slotid",
            "in": "path",
            "description": "Unique id of the slot in the mapping",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of library mapping slot to be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LibraryMappingSlotsPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      }
    },
    "/rep/library-mappings": {
      "get": {
        "tags": [
          "VTL Library Mappings"
        ],
        "summary": "Get all the vtl library mappings on the given library",
        "description": "",
        "operationId": "getVtlLibraryMappingsAllLibraries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/VtlLibraryMappingCollection"
            }
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/library-mappings/count": {
      "get": {
        "tags": [
          "VTL Library Mappings"
        ],
        "summary": "Get mapping sync status counts",
        "description": "Gets the count of sync status for vtl mappings",
        "operationId": "getVtlMappingSyncStateCounts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MappingSyncCountsModel"
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/library-mappings/library/{libraryid}": {
      "get": {
        "tags": [
          "VTL Library Mappings"
        ],
        "summary": "Get all the vtl library mappings on the given library",
        "description": "",
        "operationId": "getVtlLibraryMappings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Library ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/VtlLibraryMappingCollection"
            }
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "post": {
        "tags": [
          "VTL Library Mappings"
        ],
        "summary": "Creates a vtl mapping",
        "description": "Creates the vtl mapping with the given properties",
        "operationId": "createVtlLibraryMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Library ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of library mapping",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VtlLibraryMappingPostModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "Path to newly created mapping"
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:create"
        ]
      }
    },
    "/rep/library-mappings/library/{libraryid}/defaultMapping": {
      "post": {
        "tags": [
          "VTL Library Mappings"
        ],
        "summary": "Get default values for a new VTL replication mapping",
        "description": "Operation allows to get default VTL replication mapping on the specified source library",
        "operationId": "getDefaultVtlMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Library id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of the VTL replication mapping to create new library mapping",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VtlLibraryDefaultMappingModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/VtlMappingMappedSlotsCollection"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:create"
        ]
      }
    },
    "/rep/library-mappings/library/{libraryid}/mapping/{mappingid}": {
      "get": {
        "tags": [
          "VTL Library Mappings"
        ],
        "summary": "Get vtl library mapping for the provided mapping id of the library",
        "description": "",
        "operationId": "getVtlLibraryMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Library ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Mapping ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/VtlLibraryMappingModel"
            }
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "VTL Library Mappings"
        ],
        "summary": "Update a vtl library mapping",
        "description": "Updates the specified vtl library mapping",
        "operationId": "updateVtlLibraryMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Library ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Mapping ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of library mapping",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VtlLibraryMappingPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Mapping not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      },
      "delete": {
        "tags": [
          "VTL Library Mappings"
        ],
        "summary": "Delete Vtl Library mapping",
        "description": "Deletes the specified vtl library mapping",
        "operationId": "deleteVtlMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Library ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Mapping ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Mapping not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:delete"
        ]
      }
    },
    "/rep/parametrics-library-throughput": {
      "get": {
        "tags": [
          "Vtl Library throughput parametrics"
        ],
        "summary": "Get VTL replication throughput metrics",
        "description": "The report will provide summation, throughput and maximum session count metrics",
        "operationId": "getVtlReplicationThroughput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "samples",
            "in": "query",
            "description": "Number of samples to be returned.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/ParametricsCollection"
            }
          },
          "400": {
            "description": "End Date earlier than Start Date"
          },
          "500": {
            "description": "Replication service is not available"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/parametrics-library-throughput/library/{libraryid}": {
      "get": {
        "tags": [
          "Vtl Library throughput parametrics"
        ],
        "summary": "Get throughput metrics for the specified VTL Library ID",
        "description": "The report provides throughput metrics for the replication of the specified VTL library ID",
        "operationId": "getVtlLibraryReplicationThroughput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "libraryid",
            "in": "path",
            "description": "Library id",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "samples",
            "in": "query",
            "description": "Number of samples to be returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeHistorical",
            "in": "query",
            "description": "Boolean to specify if metrics returned are exclusively for the current library . If true then metrics may be returned for a previous library that existed with the same id.",
            "required": false,
            "type": "string",
            "default": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/ParametricsCollection"
            }
          },
          "400": {
            "description": "End Date earlier than Start Date"
          },
          "500": {
            "description": "Replication service is not available"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/parametrics-share-throughput": {
      "get": {
        "tags": [
          "Nas Share throughput parametrics"
        ],
        "summary": "Get NAS replication throughput metrics",
        "description": "The report will provide summation, throughput and maximum session count metrics",
        "operationId": "getNasReplicationThroughput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "samples",
            "in": "query",
            "description": "Number of samples to be returned.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/ParametricsCollection"
            }
          },
          "400": {
            "description": "End Date earlier than Start Date"
          },
          "500": {
            "description": "Replication service is not available"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/parametrics-share-throughput/share/{shareid}": {
      "get": {
        "tags": [
          "Nas Share throughput parametrics"
        ],
        "summary": "Get throughput metrics for the specified NAS Share ID",
        "description": "The report provides throughput metrics for the replication of the specified NAS share ID",
        "operationId": "getNasShareReplicationThroughput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shareid",
            "in": "path",
            "description": "Share id",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "samples",
            "in": "query",
            "description": "Number of samples to be returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeHistorical",
            "in": "query",
            "description": "Boolean to specify if metrics returned are exclusively for the current share . If true then metrics may be returned for a previous share that existed with the same id.",
            "required": false,
            "type": "string",
            "default": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/ParametricsCollection"
            }
          },
          "400": {
            "description": "End Date earlier than Start Date"
          },
          "500": {
            "description": "Replication service is not available"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/services": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get Replication Service details",
        "description": "",
        "operationId": "getRepService",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/ServiceModel"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update Replication Service",
        "description": "Updates Replication service with the given",
        "operationId": "updateRepService",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of the Replication Blackout now",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServicePutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content. Successful Operation"
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      }
    },
    "/rep/share-mapping-files/share/{shareid}/mapping/{mappingid}": {
      "get": {
        "tags": [
          "NAS share mapping files"
        ],
        "summary": "Get a collection of files",
        "description": "Returns a collection of files (limited to a maximum of 1000 files per request)",
        "operationId": "getRepShareMappingFiles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shareid",
            "in": "path",
            "description": "Unique share id",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Unique mapping id in the share",
            "required": true,
            "type": "string"
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count to return for request",
            "required": false,
            "type": "string",
            "default": "50"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/ShareMappingFilesCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/share-mapping-files/share/{shareid}/mapping/{mappingid}/file/{fileid}": {
      "get": {
        "tags": [
          "NAS share mapping files"
        ],
        "summary": "Get a single mapped file",
        "description": "Returns an individual mapped file in the specified mapping",
        "operationId": "getRepShareMappingFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shareid",
            "in": "path",
            "description": "Unique share id",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Unique mapping id in the share",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileid",
            "in": "path",
            "description": "Unique file id in the mapping",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/ShareMappingFiles"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "NAS share mapping files"
        ],
        "summary": "Updates the share file details",
        "description": "Update the share file details with the given property",
        "operationId": "updateRepShareMappingFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shareid",
            "in": "path",
            "description": "Unique share id",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Unique mapping id in the share",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileid",
            "in": "path",
            "description": "Unique file id in the mapping",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of share mapping file to be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ShareMappingFilesPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      }
    },
    "/rep/share-mapping-files/share/{shareid}/mapping/{mappingid}/filter": {
      "post": {
        "tags": [
          "NAS share mapping files"
        ],
        "summary": "Get a filtered collection of files",
        "description": "Returns a filtered collection of files (limited to a maximum of 1000 items per request)",
        "operationId": "getRepShareMappingFilesFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shareid",
            "in": "path",
            "description": "Unique share id",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Unique mapping id in the share",
            "required": true,
            "type": "string"
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ShareMappingFileFilterModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/ShareMappingFilesCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/share-mappings": {
      "get": {
        "tags": [
          "Nas Share Mappings"
        ],
        "summary": "Get all the nas share mappings on the given share",
        "description": "",
        "operationId": "getNasShareMappingsAllShares",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/NasShareMappingsCollection"
            }
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/share-mappings/count": {
      "get": {
        "tags": [
          "Nas Share Mappings"
        ],
        "summary": "Get mapping sync status counts",
        "description": "Gets the count of sync status for nas mappings",
        "operationId": "getNasMappingSyncStateCounts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MappingSyncCountsModel"
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/share-mappings/share/{shareid}": {
      "get": {
        "tags": [
          "Nas Share Mappings"
        ],
        "summary": "Get all the nas share mappings on the given share",
        "description": "",
        "operationId": "getNasShareMappings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shareid",
            "in": "path",
            "description": "Share ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/NasShareMappingsCollection"
            }
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "post": {
        "tags": [
          "Nas Share Mappings"
        ],
        "summary": "Creates a nas share mapping",
        "description": "Creates the nas share mapping with the given properties",
        "operationId": "createNasShareMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shareid",
            "in": "path",
            "description": "Share ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of share mapping",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NasShareMappingPostModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "Path to newly created mapping"
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:create"
        ]
      }
    },
    "/rep/share-mappings/share/{shareid}/mapping/{mappingid}": {
      "get": {
        "tags": [
          "Nas Share Mappings"
        ],
        "summary": "Get nas share mapping for the provided mapping id of the share",
        "description": "",
        "operationId": "getNasShareMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shareid",
            "in": "path",
            "description": "Share ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Mapping ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/NasShareMapping"
            }
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "Nas Share Mappings"
        ],
        "summary": "Update a nas share mapping",
        "description": "Updates the specified nas share mapping",
        "operationId": "updateNasShareMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shareid",
            "in": "path",
            "description": "Share ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Mapping ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of share mapping",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NasShareMappingPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Mapping not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      },
      "delete": {
        "tags": [
          "Nas Share Mappings"
        ],
        "summary": "Delete NAS Share mapping",
        "description": "Deletes the specified nas share mapping",
        "operationId": "deleteNasMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shareid",
            "in": "path",
            "description": "Share ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "mappingid",
            "in": "path",
            "description": "Mapping ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Share not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:delete"
        ]
      }
    },
    "/rep/source-appliances": {
      "get": {
        "tags": [
          "Source Appliance"
        ],
        "summary": "Get all source appliances",
        "description": "",
        "operationId": "getSourceAppliances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/SourceAppliancesCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/source-appliances/source-appliance/{source-appliance-id}": {
      "get": {
        "tags": [
          "Source Appliance"
        ],
        "summary": "Get a single source appliance",
        "description": "Returns the specified source appliance details",
        "operationId": "getSourceAppliance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "source-appliance-id",
            "in": "path",
            "description": "Source Appliance ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/SourceAppliance"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Resource not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/source-library-permissions/source-permission/{permissionId}": {
      "get": {
        "tags": [
          "Library Source Permissions"
        ],
        "summary": "Get all source library permissions",
        "description": "Returns the list of source library permissions.",
        "operationId": "getSourceLibraryPermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "Source Permission ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/SourceLibraryPermissionsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/source-library-permissions/source-permission/{permissionId}/library/{libraryid}": {
      "get": {
        "tags": [
          "Library Source Permissions"
        ],
        "summary": "Get a single source library permissions",
        "description": "Returns the specified source library permission details",
        "operationId": "getSourceLibraryPermission",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "Source Permission ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "libraryid",
            "in": "path",
            "description": "Library ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/SourceLibraryPermissions"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Permission doesn't exist"
          },
          "409": {
            "description": "Conflict. Source Permissions checking currently not enabled"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "Library Source Permissions"
        ],
        "summary": "Updates a source library permission",
        "description": "Updates the source library permission with specified properties",
        "operationId": "updateSourceLibraryPermission",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "Source Permission ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "libraryid",
            "in": "path",
            "description": "Library ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of source library permission",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SourceLibraryPermissionsPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid Input or missing properties"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      }
    },
    "/rep/source-permissions": {
      "get": {
        "tags": [
          "Source Permissions"
        ],
        "summary": "Get all source permissions",
        "description": "Returns the list of source permissions",
        "operationId": "getSourcePermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/SourcePermissionsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "404": {
            "description": "Not Found. Permission doesn't exist"
          },
          "409": {
            "description": "Conflict. Source Permissions checking currently not enabled"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "post": {
        "tags": [
          "Source Permissions"
        ],
        "summary": "Creates a source permission",
        "description": "Creates the source permission with specified properties",
        "operationId": "createSourcePermission",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Properties of source permission",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SourcePermissionsPostModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "Path to newly created mapping"
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input or missing properties"
          },
          "404": {
            "description": "Not Found. Permission doesn't exist"
          },
          "409": {
            "description": "Conflict. Source Permissions checking currently not enabled"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:create"
        ]
      }
    },
    "/rep/source-permissions/permission/{permissionId}": {
      "get": {
        "tags": [
          "Source Permissions"
        ],
        "summary": "Get a single source permissions",
        "description": "Returns the specified source permission detail for the given appliance",
        "operationId": "getSourcePermission",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "Source Permission ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/SourcePermissions"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Permission doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "delete": {
        "tags": [
          "Source Permissions"
        ],
        "summary": "Delete source permission",
        "description": "Deletes the specified source permission",
        "operationId": "deleteSourcePermission",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "Source Permission ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Hostname not responding"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:delete"
        ]
      }
    },
    "/rep/source-share-permissions/source-permission/{permissionId}": {
      "get": {
        "tags": [
          "Share Source Permissions"
        ],
        "summary": "Get all source share permissions",
        "description": "Returns the list of source share permissions",
        "operationId": "getSourceSharePermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "Source Permission ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/SourceSharePermissionsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/source-share-permissions/source-permission/{permissionId}/share/{shareid}": {
      "get": {
        "tags": [
          "Share Source Permissions"
        ],
        "summary": "Get a single source share permissions",
        "description": "Returns the specified source share permission details",
        "operationId": "getSourceSharePermission",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "Source Permission ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "shareid",
            "in": "path",
            "description": "Share ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/SourceSharePermissions"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Permission doesn't exist"
          },
          "409": {
            "description": "Conflict. Source Permissions checking currently not enabled"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "Share Source Permissions"
        ],
        "summary": "Updates a source share permission",
        "description": "Updates the source share permission with specified properties",
        "operationId": "updateSourceSharePermission",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "Source Permission ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "shareid",
            "in": "path",
            "description": "Share ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of source share permission",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SourceSharePermissionsPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid Input or missing properties"
          },
          "404": {
            "description": "Not Found. Service doesn't exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      }
    },
    "/rep/target-appliance-libraries/target-appliance/{target-appliance-id}": {
      "get": {
        "tags": [
          "Target Library"
        ],
        "summary": "Get all target libraries",
        "description": "Returns all the target libraries on the given appliance.",
        "operationId": "getTargetLibraries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "target-appliance-id",
            "in": "path",
            "description": "Target Appliance ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/TargetLibrariesCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/target-appliance-shares/target-appliance/{target-appliance-id}": {
      "get": {
        "tags": [
          "Target Shares"
        ],
        "summary": "Get all target shares",
        "description": "Returns all the target shares on the given appliance",
        "operationId": "getTargetShares",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "target-appliance-id",
            "in": "path",
            "description": "Target Appliance ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/TargetSharesCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/target-appliance-shares/target-appliance/{target-appliance-id}/shares/{id}": {
      "get": {
        "tags": [
          "Target Shares"
        ],
        "summary": "Get a single target share",
        "description": "Returns the specified target share details for the given appliance",
        "operationId": "getTargetShare",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "target-appliance-id",
            "in": "path",
            "description": "Target Appliance ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Target Share ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/TargetShares"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      }
    },
    "/rep/target-appliances": {
      "get": {
        "tags": [
          "Target Appliance"
        ],
        "summary": "Get all target appliances",
        "description": "",
        "operationId": "getTargetAppliances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/TargetAppliancesCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid Input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "post": {
        "tags": [
          "Target Appliance"
        ],
        "summary": "Creates a target appliance",
        "description": "Creates the specified target appliance properties",
        "operationId": "createTargetAppliance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Properties of target appliance",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TargetAppliancePostModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "Path to newly created mapping"
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Hostname not responding"
          },
          "409": {
            "description": "Conflict. Max appliances reached"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:create"
        ]
      }
    },
    "/rep/target-appliances/target-appliance/{id}": {
      "get": {
        "tags": [
          "Target Appliance"
        ],
        "summary": "Get a single target appliance",
        "description": "Returns the specified target appliance details",
        "operationId": "getTargetAppliance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Target Appliance ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/TargetApplianceModel"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Resource not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:read"
        ]
      },
      "put": {
        "tags": [
          "Target Appliance"
        ],
        "summary": "Update a target appliance",
        "description": "Updates the specified target appliance properties",
        "operationId": "updateTargetAppliance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Target Appliance ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of target appliance",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TargetAppliancePutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Hostname not responding"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:update"
        ]
      },
      "delete": {
        "tags": [
          "Target Appliance"
        ],
        "summary": "Delete Target Appliance",
        "description": "Deletes the specified target appliance",
        "operationId": "deleteTargetAppliance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Target Appliance ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Hostname not responding"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-pmlPermissions": [
          "repservice:delete"
        ]
      }
    }
  },
  "definitions": {
    "EventFilters": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "Return only events created after this date.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "Return only events before after this date.",
          "format": "date-time"
        },
        "showInfoEvents": {
          "type": "boolean",
          "description": "Boolean indicating if the events with information severity will be displayed.",
          "default": false
        },
        "showWarningEvents": {
          "type": "boolean",
          "description": "Boolean indicating if the events with warning severity will be displayed.",
          "default": false
        },
        "showErrorEvents": {
          "type": "boolean",
          "description": "Boolean indicating if the events with error or critical severity will be displayed.",
          "default": false
        },
        "category": {
          "type": "integer",
          "format": "int32",
          "description": "Return only events of this event category."
        },
        "message": {
          "type": "string",
          "description": "Return the events that match this message."
        },
        "sourceLibraryOrShareName": {
          "type": "string",
          "description": "Filter by the name of the source library or share that produced the event."
        },
        "targetLibraryOrShareName": {
          "type": "string",
          "description": "Filter by the name of the target library or share that produced the event."
        },
        "sourceSlotOrEntryId": {
          "type": "integer",
          "format": "int32",
          "description": "Filter by the id of source entry or slot that produced the event."
        },
        "targetSlotOrEntryId": {
          "type": "integer",
          "format": "int32",
          "description": "Filter by the id of target entry or slot that produced the event."
        }
      }
    },
    "ExternalDocs": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "LibraryMappingSlotFilterModel": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of slots returned by the search using this filter"
        },
        "filters": {
          "description": "Replication VTL mapping slots filter settings for the search",
          "$ref": "#/definitions/VtlSlotFilters"
        },
        "waypoint": {
          "type": "string",
          "description": "Waypoint to navigate the data returned using this filter"
        }
      },
      "xml": {
        "name": "LibraryMappingSlotFilterModel"
      }
    },
    "NasFileFilters": {
      "type": "object",
      "properties": {
        "entryIdRangeFilterStart": {
          "type": "integer",
          "format": "int32",
          "description": "Return only the files with ID greater or equal than this ID."
        },
        "entryIdRangeFilterEnd": {
          "type": "integer",
          "format": "int32",
          "description": "Return only the files with ID less or equal than this ID."
        },
        "fileNameFilter": {
          "type": "string",
          "description": "Return only files which match the string."
        },
        "fileNameFilterExactMatch": {
          "type": "boolean",
          "description": "True if the fileNameFilter should be applied as an exact match filter, otherwise false.",
          "default": false
        },
        "startedDateStart": {
          "type": "string",
          "description": "Return only files where the last replication started after this date."
        },
        "startedDateEnd": {
          "type": "string",
          "description": "Return only files where the last replication started before this date."
        },
        "endedDateStart": {
          "type": "string",
          "description": "Return only files where the last replication finished after this date."
        },
        "endedDateEnd": {
          "type": "string",
          "description": "Return only files where the last replication finished before this date."
        },
        "orderAscending": {
          "type": "boolean",
          "description": "True if this filter orders the data in ascending date, otherewise descending",
          "default": false
        },
        "jobStatusFilter": {
          "type": "string",
          "description": "Return only files that match the specific job status",
          "enum": [
            "PENDING",
            "COMPLETED",
            "RUNNING",
            "PAUSED",
            "CANCELLED",
            "FROZEN",
            "NO_FILTER"
          ]
        },
        "repStatusFilter": {
          "type": "string",
          "description": "Return only files that match the specific replication status",
          "enum": [
            "PENDING_SYNCHRONISATION",
            "SYNCHRONISED",
            "SYNCHRONISING",
            "NO_FILTER"
          ]
        }
      }
    },
    "PartnerApplianceModel": {
      "type": "object",
      "properties": {
        "applianceId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the partner appliance."
        },
        "applianceOnline": {
          "type": "boolean",
          "description": "Flag stating whether or not the partner appliance is currently online.",
          "default": false
        },
        "applianceName": {
          "type": "string",
          "description": "The name of the parner appliance."
        },
        "applianceAddress": {
          "type": "string",
          "description": "The IP or hostname string of the partner appliance."
        },
        "applianceSerialNumber": {
          "type": "string",
          "description": "The serial number of the partner appliance."
        },
        "applianceProductClass": {
          "type": "string",
          "description": "The product class of the partner appliance."
        },
        "libraryId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the partner library."
        },
        "libraryName": {
          "type": "string",
          "description": "The partner library name."
        },
        "mappingId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the mapping as seen by the partner appliance."
        },
        "replicationVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Replication Version of the partner library."
        },
        "repRole": {
          "type": "integer",
          "format": "int32",
          "description": "Integer corresponding to replication Role of the partner library."
        },
        "repRoleString": {
          "type": "string",
          "description": "String corresponding to replication role of the partner library."
        },
        "numMappings": {
          "type": "integer",
          "format": "int32",
          "description": "Number of mappings on the partner library."
        },
        "numSlots": {
          "type": "integer",
          "format": "int32",
          "description": "Number of slots on the partner library"
        },
        "numMappedSlots": {
          "type": "integer",
          "format": "int32",
          "description": "Number of mapped slots in the partner library."
        },
        "libraryHealthStatusLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Integer detailing the status level of the library."
        },
        "libraryHealthStatusLevelString": {
          "type": "string",
          "description": "String detailing the status level of the library."
        },
        "libraryStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Integer detailing the reason for ill health of the library if any."
        },
        "libraryStatusString": {
          "type": "string",
          "description": "String detailing the reason for ill health of the library if any."
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The total size of the user data that has been stored in the library before dedupe in Bytes."
        },
        "diskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The actual size data in the library before dedupe in Bytes."
        },
        "applianceHealthStatusLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Enum denoting health level of the partner appliance."
        },
        "applianceHealthStatusLevelString": {
          "type": "string",
          "description": "String representation of health level of the partner appliance."
        }
      },
      "description": "Model of the Library mapping partner appliance details.",
      "xml": {
        "name": "PartnerApplianceModel"
      }
    },
    "PartnerApplianceShareModel": {
      "type": "object",
      "properties": {
        "applianceId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the partner appliance."
        },
        "applianceOnline": {
          "type": "boolean",
          "description": "Flag stating whether or not the partner appliance is currently online.",
          "default": false
        },
        "applianceName": {
          "type": "string",
          "description": "The name of the parner appliance."
        },
        "applianceAddress": {
          "type": "string",
          "description": "The IP or hostname string of the partner appliance."
        },
        "applianceSerialNumber": {
          "type": "string",
          "description": "The serial number of the partner appliance."
        },
        "applianceProductClass": {
          "type": "string",
          "description": "The product class of the partner appliance."
        },
        "shareId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the partner share."
        },
        "shareName": {
          "type": "string",
          "description": "The partner share name."
        },
        "shareDescription": {
          "type": "string",
          "description": "The partner share description."
        },
        "shareAccessProtocol": {
          "type": "integer",
          "format": "int32",
          "description": "The partner share access protocol."
        },
        "shareAccessProtocolString": {
          "type": "string",
          "description": "String corresponding to the partner share access protocol."
        },
        "numDirectories": {
          "type": "integer",
          "format": "int32",
          "description": "The number of directories in the partner share."
        },
        "numFiles": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files in the partner share."
        },
        "replicationVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Replication Version of the partner share."
        },
        "repRole": {
          "type": "integer",
          "format": "int32",
          "description": "Integer corresponding to replication Role of the partner share."
        },
        "repRoleString": {
          "type": "string",
          "description": "String corresponding to replication role of the partner share."
        },
        "shareHealthStatusLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Integer detailing the status level of the share."
        },
        "shareHealthStatusLevelString": {
          "type": "string",
          "description": "String detailing the status level of the share."
        },
        "shareHealthStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Integer detailing the reason for ill health of the share if any."
        },
        "shareHealthStatusString": {
          "type": "string",
          "description": "String detailing the reason for ill health of the share if any."
        },
        "applianceHealthStatusLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Enum of the health status of the partner appliance."
        },
        "applianceHealthStatusLevelString": {
          "type": "string",
          "description": "String detailing the health status of the partner appliance."
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The total size of the user data that has been stored in the share before dedupe in Bytes."
        },
        "diskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The actual size data in the share before dedupe in Bytes."
        }
      },
      "description": "Model of the Share mapping partner appliance details.",
      "xml": {
        "name": "PartnerApplianceShareModel"
      }
    },
    "Property": {
      "type": "object",
      "properties": {
        "xml": {
          "$ref": "#/definitions/Xml"
        },
        "example": {
          "type": "object"
        },
        "readOnly": {
          "type": "boolean",
          "default": false
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "format": {
          "type": "string"
        },
        "vendorExtensions": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "description": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "VtlMappingMappedSlots": {
      "type": "object",
      "properties": {
        "sourceSlotId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of slot that acts as source in mapping."
        },
        "targetSlotId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of slot that acts as target in mapping"
        }
      },
      "description": "Model of the Library Mapped slots details.",
      "xml": {
        "name": "VtlMappingMappedSlots"
      }
    },
    "VtlSlotFilters": {
      "type": "object",
      "properties": {
        "sourceSlotIdRangeFilterStart": {
          "type": "integer",
          "format": "int32",
          "description": "Return only the slots with source ID greater than this ID."
        },
        "sourceSlotIdRangeFilterEnd": {
          "type": "integer",
          "format": "int32",
          "description": "Return only the slots with source ID less than this ID."
        },
        "targetSlotIdRangeFilterStart": {
          "type": "integer",
          "format": "int32",
          "description": "Return only the slots with target ID greater than this ID."
        },
        "targetSlotIdRangeFilterEnd": {
          "type": "integer",
          "format": "int32",
          "description": "Return only the slots with target ID less than this ID."
        },
        "barcodeFilter": {
          "type": "string",
          "description": "Return only slots that match the barcode."
        },
        "barcodeFilterExactMatch": {
          "type": "boolean",
          "description": "True if the barcodeFilter should be applied as an exact match filter, otherwise false.",
          "default": false
        },
        "startedDateStart": {
          "type": "string",
          "description": "Return only slots where the last replication started after this date."
        },
        "startedDateEnd": {
          "type": "string",
          "description": "Return only slots where the last replication started before this date."
        },
        "endedDateStart": {
          "type": "string",
          "description": "Return only slots where the last replication finished after this date."
        },
        "endedDateEnd": {
          "type": "string",
          "description": "Return only slots where the last replication finished before this date."
        },
        "orderAscending": {
          "type": "boolean",
          "description": "True if this filter orders the data in ascending date, otherewise descending",
          "default": false
        },
        "jobStatusFilter": {
          "type": "string",
          "description": "Return only slots that match the specific job status",
          "enum": [
            "PENDING",
            "COMPLETED",
            "RUNNING",
            "PAUSED",
            "CANCELLED",
            "FROZEN",
            "NO_FILTER"
          ]
        },
        "repStatusFilter": {
          "type": "string",
          "description": "Return only slots that match the specific replication status",
          "enum": [
            "PENDING_SYNCHRONISATION",
            "SYNCHRONISED",
            "SYNCHRONISING",
            "NO_FILTER"
          ]
        }
      }
    },
    "WindowCommonModel": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day ID",
          "readOnly": true
        },
        "dayString": {
          "type": "string",
          "description": "Localised string for the day",
          "readOnly": true
        },
        "timeOffset": {
          "type": "string",
          "example": "+01:00",
          "description": "Timezone offset for the window times",
          "readOnly": true
        },
        "primaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the primary window is enabled",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "13:00",
          "description": "Start time for the primary window. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "13:00",
          "description": "End time for the primary window. In system time"
        },
        "secondaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "13:00",
          "description": "Start time for the secondary window. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "13:00",
          "description": "End time for the secondary window. In system time"
        }
      }
    },
    "Xml": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "attribute": {
          "type": "boolean",
          "default": false
        },
        "wrapped": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "BandwidthCalculator": {
      "type": "object",
      "required": [
        "limitPercentage",
        "numConcurrentJobs",
        "wanSpeedCustom",
        "wanSpeedEnum"
      ],
      "properties": {
        "wanSpeedEnum": {
          "type": "integer",
          "format": "int64",
          "description": "The bandwidth of the WAN connection, chosen from a list of enum values"
        },
        "wanSpeedCustom": {
          "type": "integer",
          "format": "int64",
          "description": "The user defined custom bandwidth of the WAN connection, used if custom is chosen for wanSpeedEnum"
        },
        "limitPercentage": {
          "type": "integer",
          "format": "int32",
          "description": "The percentage of the available WAN bandwidth that should be used"
        },
        "numConcurrentJobs": {
          "type": "integer",
          "format": "int32",
          "description": "The number of concurrent copy jobs the user expects to run"
        },
        "requestedLimitBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The calculated recommended bandwidth limit",
          "readOnly": true
        },
        "thresholdLimitBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The calculated threshold limit",
          "readOnly": true
        },
        "belowThreshold": {
          "type": "boolean",
          "description": "True if the recommended limit is lower than the threshold limit",
          "readOnly": true,
          "default": false
        }
      },
      "xml": {
        "name": "ReplicationBandwidthCalculator"
      }
    },
    "BandwidthLimit": {
      "type": "object",
      "properties": {
        "generalBandwidthLimitEnabled": {
          "type": "boolean",
          "description": "True if the general bandwidth limit is enabled",
          "default": false
        },
        "generalBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the limit is enabled, the maximum bandwidth used by the StoreOnce Replication outbound copyjobs. Throttle Windows take precendence over this value."
        },
        "currentBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the limit is enabled, the current bandwidth limit for the StoreOnce Replication outbound copyjobs",
          "readOnly": true
        }
      },
      "description": "Model of the Replication Bandwidth Limit",
      "xml": {
        "name": "ReplicationBandwidthLimit"
      }
    },
    "BandwidthWindow": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day ID",
          "readOnly": true
        },
        "dayString": {
          "type": "string",
          "description": "Localised string for the day",
          "readOnly": true
        },
        "timeOffset": {
          "type": "string",
          "example": "+01:00",
          "description": "Timezone offset for the window times",
          "readOnly": true
        },
        "primaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the primary window is enabled.",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the primary bandwidth limit. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the primary bandwidth limit. In system time"
        },
        "primaryWindowBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the primary window"
        },
        "secondaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the secondary bandwidth limit. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the secondary bandwidth limit. In system time"
        },
        "secondaryWindowBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the secondary window"
        }
      },
      "description": "Model of the Replication Bandwidth Window",
      "xml": {
        "name": "ReplicationBandwidthWindow"
      }
    },
    "BlackoutNow": {
      "type": "object",
      "properties": {
        "blackoutActive": {
          "type": "boolean",
          "description": "Status of blackout. True if blackout is active, false if not",
          "readOnly": true,
          "default": false
        },
        "blackoutNow": {
          "type": "boolean",
          "description": "Blanket blackout that takes precedence over any blackout windows until further notice. True if enabled, false otherwise",
          "default": false
        },
        "blackoutReasonString": {
          "type": "string",
          "description": "Localised string representing Reason for blackout.",
          "readOnly": true
        },
        "blackoutReason": {
          "type": "integer",
          "format": "int32",
          "description": "Reason for blackout.",
          "readOnly": true
        }
      },
      "description": "Model of the Replication Blackout now",
      "xml": {
        "name": "ReplicationBlackoutNow"
      }
    },
    "BlackoutWindow": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day ID",
          "readOnly": true
        },
        "dayString": {
          "type": "string",
          "description": "Localised string for the day",
          "readOnly": true
        },
        "timeOffset": {
          "type": "string",
          "example": "+01:00",
          "description": "Timezone offset for the window times",
          "readOnly": true
        },
        "primaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the primary window is enabled",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "13:00",
          "description": "Start time for the primary window. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "13:00",
          "description": "End time for the primary window. In system time"
        },
        "secondaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "13:00",
          "description": "Start time for the secondary window. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "13:00",
          "description": "End time for the secondary window. In system time"
        }
      },
      "description": "Model of the Replication Blackout Window",
      "xml": {
        "name": "ReplicationBlackoutWindow"
      }
    },
    "BandwidthLimitPutModel": {
      "type": "object",
      "properties": {
        "generalBandwidthLimitEnabled": {
          "type": "boolean",
          "description": "True if the general bandwidth limit is enabled",
          "default": false
        },
        "generalBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the limit is enabled, the maximum bandwidth used by the StoreOnce Replication outbound copyjobs. Throttle Windows take precendence over this value."
        }
      },
      "description": "Model of the Replication Bandwidth Limit",
      "xml": {
        "name": "RepBandwidthLimitPutModel"
      }
    },
    "BandwidthWindowCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/BandwidthWindow"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "BandwidthWindowPutModel": {
      "type": "object",
      "properties": {
        "primaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the primary window is enabled.",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the primary bandwidth limit. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the primary bandwidth limit. In system time"
        },
        "primaryWindowBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the primary window"
        },
        "secondaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the secondary bandwidth limit. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the secondary bandwidth limit. In system time"
        },
        "secondaryWindowBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the secondary window"
        }
      },
      "description": "Model of the Replication Bandwidth Window",
      "xml": {
        "name": "RepBandwidthWindowPutModel"
      }
    },
    "BlackoutNowPutModel": {
      "type": "object",
      "properties": {
        "blackoutNow": {
          "type": "boolean",
          "description": "Blanket blackout that takes precedence over any blackout windows until further notice. True if enabled, false otherwise",
          "default": false
        }
      },
      "description": "Model of the Replication Blackout now",
      "xml": {
        "name": "RepBlackoutNowPutModel"
      }
    },
    "BlackoutWindowPutModel": {
      "type": "object",
      "properties": {
        "primaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the primary window is enabled",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "13:00",
          "description": "Start time for the primary window. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "13:00",
          "description": "End time for the primary window. In system time"
        },
        "secondaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "13:00",
          "description": "Start time for the secondary window. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "13:00",
          "description": "End time for the secondary window. In system time"
        }
      },
      "description": "Model of the Replication Blackout Window",
      "xml": {
        "name": "RepBlackoutWindowPutModel"
      }
    },
    "BlackoutWindowsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/BlackoutWindow"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "EventFilterModel": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of slots returned by the search using this filter"
        },
        "orderAscending": {
          "type": "boolean",
          "description": "Orders the data in ascending order according to the date",
          "default": false
        },
        "filters": {
          "description": "Replication event filter settings for the search",
          "$ref": "#/definitions/EventFilters"
        },
        "waypoint": {
          "type": "string",
          "description": "Waypoint to navigate the data returned using this filter"
        }
      },
      "xml": {
        "name": "RepEventFilterModel"
      }
    },
    "EventModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the event.",
          "readOnly": true
        },
        "timeStamp": {
          "type": "string",
          "description": "Date and time of the event",
          "readOnly": true
        },
        "category": {
          "type": "integer",
          "format": "int32",
          "description": "The event category",
          "readOnly": true
        },
        "categoryString": {
          "type": "string",
          "description": "The string representation of the event category",
          "readOnly": true
        },
        "messageString": {
          "type": "string",
          "description": "Message of the event",
          "readOnly": true
        },
        "reason": {
          "type": "integer",
          "format": "int32",
          "description": "Numeric reason code of event",
          "readOnly": true
        },
        "reasonString": {
          "type": "string",
          "description": "String representation of event reason",
          "readOnly": true
        },
        "severity": {
          "type": "integer",
          "format": "int32",
          "description": "Severity of the event",
          "readOnly": true
        },
        "severityString": {
          "type": "string",
          "description": "String representation of event severity",
          "readOnly": true
        },
        "sourceApplianceName": {
          "type": "string",
          "description": "Name of the source appliance if present",
          "readOnly": true
        },
        "sourceApplianceAddress": {
          "type": "string",
          "description": "Address of the source appliance if present",
          "readOnly": true
        },
        "sourceApplianceSerialNumber": {
          "type": "string",
          "description": "Serial number of the source appliance if present",
          "readOnly": true
        },
        "targetApplianceName": {
          "type": "string",
          "description": "Name of the target appliance if present",
          "readOnly": true
        },
        "targetApplianceAddress": {
          "type": "string",
          "description": "Address of the target appliance if present",
          "readOnly": true
        },
        "targetApplianceSerialNumber": {
          "type": "string",
          "description": "Serial number of the target appliance if present",
          "readOnly": true
        },
        "connectionFailureReason": {
          "type": "integer",
          "format": "int32",
          "description": "Reason for connection failure",
          "readOnly": true
        },
        "connectionFailureReasonString": {
          "type": "string",
          "description": "String representation of the connection failure reason",
          "readOnly": true
        },
        "mappingName": {
          "type": "string",
          "description": "Name of mapping that produced the event",
          "readOnly": true
        },
        "sourceLibraryOrShareName": {
          "type": "string",
          "description": "Name of source library or share",
          "readOnly": true
        },
        "targetLibraryOrShareName": {
          "type": "string",
          "description": "Name of target library or share",
          "readOnly": true
        },
        "sourceSlotOrEntryId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of source entry or slot that produced event",
          "readOnly": true
        },
        "targetSlotOrEntryId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of target entry or slot that produced event",
          "readOnly": true
        },
        "jobStartedDate": {
          "type": "string",
          "description": "The date and time replication job was started",
          "readOnly": true,
          "format": "date-time"
        },
        "jobStoppedDate": {
          "type": "string",
          "description": "The date and time replication job was stopped",
          "readOnly": true,
          "format": "date-time"
        },
        "jobDirection": {
          "type": "integer",
          "format": "int32",
          "description": "Enum denoting job direction",
          "readOnly": true
        },
        "jobDirectionString": {
          "type": "string",
          "description": "String representation of job direction",
          "readOnly": true
        },
        "jobStage": {
          "type": "integer",
          "format": "int32",
          "description": "Enum denoting stage of replication job",
          "readOnly": true
        },
        "jobStageString": {
          "type": "string",
          "description": "String representation of replication job stage",
          "readOnly": true
        },
        "percentageJobProgress": {
          "type": "number",
          "format": "double",
          "description": "Percentage progress of replication job",
          "readOnly": true
        },
        "jobDurationSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Duration in seconds of the replication job",
          "readOnly": true
        },
        "jobThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Current throughput of slot or entry datajob in bytes",
          "readOnly": true
        },
        "jobStatusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Numeric value representing job status",
          "readOnly": true
        }
      },
      "description": "Details of a replication event.",
      "xml": {
        "name": "RepEventModel"
      }
    },
    "EventsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/EventModel"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "LibraryMappingSlotsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/LibraryMappingSlotsModel"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "LibraryMappingSlotsModel": {
      "type": "object",
      "properties": {
        "sourceSlot": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID of the source slot of this mapping.",
          "readOnly": true
        },
        "targetSlot": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID of the target slot on the target library for this mapping.",
          "readOnly": true
        },
        "barcode": {
          "type": "string",
          "description": "Barcode value of the cartridge in the slot.",
          "readOnly": true
        },
        "cartridgeSizeBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Size of the cartridge in bytes.",
          "readOnly": true
        },
        "writtenBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The number of host bytes written to the cartridge in bytes.",
          "readOnly": true
        },
        "numChanges": {
          "type": "integer",
          "format": "int32",
          "description": "The write pass count for the cartridge.",
          "readOnly": true
        },
        "markedForRecovery": {
          "type": "boolean",
          "description": "Boolean True if the slot is marked for recovery, false otherwise.",
          "default": false
        },
        "repStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Integer representing the replication status of this slot.",
          "readOnly": true
        },
        "repStatusString": {
          "type": "string",
          "description": "String representation of the replication status of this slot.",
          "readOnly": true
        },
        "lastSyncDate": {
          "type": "string",
          "description": "The date and time this slot was last synchronized",
          "readOnly": true,
          "format": "date-time"
        },
        "startSyncDate": {
          "type": "string",
          "description": "The date and time the last synchronization of this slot was started.",
          "readOnly": true,
          "format": "date-time"
        },
        "outOfSyncSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The time that this slot has been out of sync in seconds.",
          "readOnly": true
        },
        "jobStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Enum representing the job status of this slot.",
          "readOnly": true
        },
        "jobStatusString": {
          "type": "string",
          "description": "String representation of the job status associated with this slot.",
          "readOnly": true
        },
        "jobPauseCancelReason": {
          "type": "integer",
          "format": "int32",
          "description": "Enum representation of the last pause or cancel reason for the job associated with this slot.",
          "readOnly": true
        },
        "jobPauseCancelReasonString": {
          "type": "string",
          "description": "String representation of the last pause or cancel reason for the job associated with this slot.",
          "readOnly": true
        },
        "jobStatusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Value giving extra information to the status of the job. No corresponding string.",
          "readOnly": true
        },
        "jobSizeBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the slot data job in bytes.",
          "readOnly": true
        },
        "percentageJobComplete": {
          "type": "number",
          "format": "double",
          "description": "The job progress completion percentage of the slot data job.",
          "readOnly": true
        },
        "jobDurationSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The current duration in seconds of the slot data job.",
          "readOnly": true
        },
        "jobLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The current throughput of the slot data job in bytes per second.",
          "readOnly": true
        },
        "jobNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The bandwidth used by the slot data job in bytes per second.",
          "readOnly": true
        },
        "percentageJobBandwidthSaving": {
          "type": "number",
          "format": "double",
          "description": "The current bandwidth saving of the job as a %.",
          "readOnly": true
        }
      },
      "description": "Model of the Library mapping slots details.",
      "xml": {
        "name": "RepLibraryMappingSlotsModel"
      }
    },
    "LibraryMappingSlotsPutModel": {
      "type": "object",
      "required": [
        "markedForRecovery"
      ],
      "properties": {
        "markedForRecovery": {
          "type": "boolean",
          "description": "Set to true to mark the replication job for reset .",
          "default": false
        }
      },
      "description": "Model of the Library mapping slots PUT details.",
      "xml": {
        "name": "RepLibraryMappingSlotsPutModel"
      }
    },
    "MappingSyncCountsModel": {
      "type": "object",
      "properties": {
        "numMappingsTotal": {
          "type": "integer",
          "format": "int32",
          "description": "Total mappings count."
        },
        "numMappingsStatusPendingSynchronisation": {
          "type": "integer",
          "format": "int32",
          "description": "Number of mappings pending sync"
        },
        "numMappingsStatusSynchronising": {
          "type": "integer",
          "format": "int32",
          "description": "Number of mappings Synchronising."
        },
        "numMappingStatusSynchronised": {
          "type": "integer",
          "format": "int32",
          "description": "Number of mappings Synchronised."
        },
        "numMappingsHealthLevelOK": {
          "type": "integer",
          "format": "int32",
          "description": "Number of mappings with an OK health status."
        },
        "numMappingsHealthLevelWarning": {
          "type": "integer",
          "format": "int32",
          "description": "Number of mappings with a warning health status"
        },
        "numMappingsHealthLevelCritical": {
          "type": "integer",
          "format": "int32",
          "description": "Number of mappings with a critical health status"
        }
      },
      "description": "Counts of mappings based om sync status",
      "xml": {
        "name": "RepMappingSyncCountsModel"
      }
    },
    "NasShareMapping": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID for this mapping within the current share."
        },
        "shareId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID for the share this mapping belonds to"
        },
        "name": {
          "type": "string",
          "description": "String which could be displayed to the user."
        },
        "repStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Enum value corresponding to the replication status of the mapping."
        },
        "repStatusString": {
          "type": "string",
          "description": "String representation of the replication status of the mapping."
        },
        "repRole": {
          "type": "integer",
          "format": "int32",
          "description": "Enum value corresponding to the replication role of the local library."
        },
        "repRoleString": {
          "type": "string",
          "description": "String representation of the replication role of the local library."
        },
        "numEntries": {
          "type": "integer",
          "format": "int32",
          "description": "The number of replicating entries either files or directories in the mapping."
        },
        "numEntriesOutOfSync": {
          "type": "integer",
          "format": "int32",
          "description": "The number of entries that are currently out of sync in the mapping."
        },
        "numEntriesOutOfSyncWarning": {
          "type": "integer",
          "format": "int32",
          "description": "The number of entries that are currently out of sync in the mapping for which there are warnings."
        },
        "numEntriesOutOfSyncCritical": {
          "type": "integer",
          "format": "int32",
          "description": "The number of entries that are currently out of sync in the mapping for which there are critical errors."
        },
        "outOfSyncHours": {
          "type": "integer",
          "format": "int32",
          "description": "The number of hours that the mapping has been out of sync."
        },
        "averageLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The average throughput of the jobs (in bytes per second)"
        },
        "averageNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The bandwidth used by the slot data job in bytes per second."
        },
        "percentageAverageBandwidthSave": {
          "type": "number",
          "format": "double",
          "description": "The current bandwidth saving of the job in percentage."
        },
        "recoveryActive": {
          "type": "boolean",
          "description": "Flag stating whether the there is an active recovery job in the mapping or not.",
          "default": false
        },
        "sourceApplianceMappingDetails": {
          "description": "Details on the source appliance, share and mappings",
          "$ref": "#/definitions/PartnerApplianceShareModel"
        },
        "targetApplianceMappingDetails": {
          "description": "Details on the target appliance, share and mappings.",
          "$ref": "#/definitions/PartnerApplianceShareModel"
        },
        "shareName": {
          "type": "string",
          "description": "Name of the local share"
        },
        "mappingHealthStatusLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Health level of the mapping"
        },
        "mappingHealthStatusLevelString": {
          "type": "string",
          "description": "String representation of the health level of the mapping"
        },
        "shareHealthStatusLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Health level of the local share"
        },
        "shareHealthStatusLevelString": {
          "type": "string",
          "description": "String representation of the health level of the local share"
        }
      },
      "description": "Model of the Share mapping details.",
      "xml": {
        "name": "RepNasShareMapping"
      }
    },
    "NasShareMappingPostModel": {
      "type": "object",
      "required": [
        "targetApplianceId",
        "targetShareId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name given to mapping"
        },
        "markedForRecovery": {
          "type": "boolean",
          "description": "Indicating if the share mapping will be marked for recovery.",
          "default": false
        },
        "targetShareId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target share"
        },
        "targetApplianceId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target appliance."
        },
        "adoptMapping": {
          "type": "boolean",
          "description": "Flag indicating whether to adopt an existing mapping on the target share.",
          "default": false
        }
      },
      "description": "Model to create the share mapping details.",
      "xml": {
        "name": "RepNasShareMappingPostModel"
      }
    },
    "NasShareMappingPutModel": {
      "type": "object",
      "required": [
        "targetApplianceId",
        "targetShareId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name given to mapping"
        },
        "markedForRecovery": {
          "type": "boolean",
          "description": "Indicating if the share mapping will be marked for recovery.",
          "default": false
        },
        "targetShareId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target share"
        },
        "targetApplianceId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target appliance."
        }
      },
      "description": "Model to update the share mapping details.",
      "xml": {
        "name": "RepNasShareMappingPutModel"
      }
    },
    "NasShareMappingsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/NasShareMapping"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "Parametrics": {
      "type": "object",
      "properties": {
        "averageReceivedBandwidth": {
          "type": "integer",
          "format": "int64",
          "description": "Average copy job receive bandwidth utilization in Bytes per second.",
          "readOnly": true
        },
        "averageReceivedThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average copy job receive throughput in Bytes per second.",
          "readOnly": true
        },
        "averageTransmittedBandwidth": {
          "type": "integer",
          "format": "int64",
          "description": "Average copy job transmit bandwidth utilization in Bytes per second.",
          "readOnly": true
        },
        "averageTransmittedThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average copy job transmit throughput in Bytes per second.",
          "readOnly": true
        },
        "averageTargetSessions": {
          "type": "integer",
          "format": "int32",
          "description": "Average target replication job session count.",
          "readOnly": true
        },
        "averageSourceSessions": {
          "type": "integer",
          "format": "int32",
          "description": "Average source replication job session count.",
          "readOnly": true
        },
        "peakTargetSessions": {
          "type": "integer",
          "format": "int32",
          "description": "Peak target replication job session count.",
          "readOnly": true
        },
        "peakSourceSessions": {
          "type": "integer",
          "format": "int32",
          "description": "Peak source replication job session count.",
          "readOnly": true
        },
        "timestamp": {
          "type": "string",
          "description": "UTC time for the metric.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "RepParametrics"
      }
    },
    "ParametricsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/Parametrics"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "ServiceModel": {
      "type": "object",
      "properties": {
        "repName": {
          "type": "string",
          "description": "The name of the replication appliance",
          "readOnly": true
        },
        "healthLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The health level of the service.",
          "readOnly": true
        },
        "healthLevelString": {
          "type": "string",
          "description": "Localised string representing the health level.",
          "readOnly": true
        },
        "repStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of the service.",
          "readOnly": true
        },
        "repStatusString": {
          "type": "string",
          "description": "Localised string representing the service status.",
          "readOnly": true
        },
        "minProtocolVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Minimum replication protocol version supported.",
          "readOnly": true
        },
        "maxProtocolVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum replication protocol version supported.",
          "readOnly": true
        },
        "maxSourceJobs": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum concurrent source jobs that can occur."
        },
        "maxTargetJobs": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum concurrent target jobs that can occur."
        },
        "progressLoggingEnabled": {
          "type": "boolean",
          "description": "Synchronisation progress logging flag.",
          "default": false
        },
        "progressLoggingFrequencySeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Progress logging frequency."
        },
        "outOfSyncWarningThresholdHours": {
          "type": "integer",
          "format": "int32",
          "description": "Number of hours before an out of sync warning event is raised."
        },
        "outOfSyncCriticalThresholdHours": {
          "type": "integer",
          "format": "int32",
          "description": "Number of hours before an out of sync critical event is raised."
        },
        "maxTargetAppliances": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of target appliances that can be configured in the server.",
          "readOnly": true
        },
        "maxMappingsPerLibrary": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of mappings per library.",
          "readOnly": true
        },
        "repSerialNumber": {
          "type": "string",
          "description": "The Replication serial number of the system.",
          "readOnly": true
        },
        "numTargetJobs": {
          "type": "integer",
          "format": "int32",
          "description": "Number of active target replication jobs on the appliance.",
          "readOnly": true
        },
        "numSourceJobs": {
          "type": "integer",
          "format": "int32",
          "description": "Number of active source replication jobs on the appliance.",
          "readOnly": true
        },
        "numConnectedSourceAppliances": {
          "type": "integer",
          "format": "int32",
          "description": "Number of source appliances currently connected to the local appliance.",
          "readOnly": true
        },
        "maxSourceAppliances": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of source appliances that can connect.",
          "readOnly": true
        },
        "numTargetVTLJobsRunning": {
          "type": "integer",
          "format": "int32",
          "description": "The number of target VTL jobs currently running",
          "readOnly": true
        },
        "numTargetNASJobsRunning": {
          "type": "integer",
          "format": "int32",
          "description": "The number of target NAS jobs currently running",
          "readOnly": true
        },
        "numSourceVTLJobsRunning": {
          "type": "integer",
          "format": "int32",
          "description": "The number of source VTL jobs currently running",
          "readOnly": true
        },
        "numSourceNASJobsRunning": {
          "type": "integer",
          "format": "int32",
          "description": "The number of source NAS jobs currently running",
          "readOnly": true
        }
      },
      "description": "Details of replication service.",
      "xml": {
        "name": "RepServiceModel"
      }
    },
    "ServicePutModel": {
      "type": "object",
      "properties": {
        "maxSourceJobs": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum concurrent source jobs that can occur."
        },
        "maxTargetJobs": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum concurrent target jobs that can occur."
        },
        "progressLoggingEnabled": {
          "type": "boolean",
          "description": "Synchronisation progress logging flag.",
          "default": false
        },
        "progressLoggingFrequencySeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Progress logging frequency."
        },
        "outOfSyncWarningThresholdHours": {
          "type": "integer",
          "format": "int32",
          "description": "Number of hours before an out of sync warning event is raised."
        },
        "outOfSyncCriticalThresholdHours": {
          "type": "integer",
          "format": "int32",
          "description": "Number of hours before an out of sync critical event is raised."
        }
      },
      "description": "Updating details of replication service.",
      "xml": {
        "name": "RepServicePutModel"
      }
    },
    "ShareMappingFileFilterModel": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of files returned by the search using this filter"
        },
        "filters": {
          "description": "Replication Nas mapping file filter settings for the search",
          "$ref": "#/definitions/NasFileFilters"
        },
        "waypoint": {
          "type": "string",
          "description": "Waypoint to navigate the data returned using this filter"
        }
      },
      "xml": {
        "name": "RepShareMappingFileFilterModel"
      }
    },
    "ShareMappingFiles": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID for this file in the current mapping.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "File1.txt",
          "description": "String which could be displayed to the user.",
          "readOnly": true
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "Integer detailing the type.",
          "readOnly": true
        },
        "typeString": {
          "type": "string",
          "description": "String detailing the type.",
          "readOnly": true
        },
        "sizeBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The file size in bytes.",
          "readOnly": true
        },
        "numChanged": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times this file has had its data changed.",
          "readOnly": true
        },
        "markedForRecovery": {
          "type": "boolean",
          "description": "True if the file is marked for recovery, false otherwise.",
          "default": false
        },
        "repStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Integer detailing replication status.",
          "readOnly": true
        },
        "repStatusString": {
          "type": "string",
          "description": "String representation of the replication status of this file.",
          "readOnly": true
        },
        "lastSyncDate": {
          "type": "string",
          "description": "The date and time that this file was last synchronized.",
          "readOnly": true,
          "format": "date-time"
        },
        "outOfSyncSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The number of seconds since this file was last synchronized.",
          "readOnly": true
        },
        "startSyncDate": {
          "type": "string",
          "description": "The date and time the last synchronization of this file was started.",
          "readOnly": true,
          "format": "date-time"
        },
        "jobStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Integer representing status of the job associated with this file.",
          "readOnly": true
        },
        "jobStatusString": {
          "type": "string",
          "description": "String representation of the status of the job associated with this file.",
          "readOnly": true
        },
        "jobPauseCancelReason": {
          "type": "integer",
          "format": "int32",
          "description": "Integer explaining the last pause or cancel job reason.",
          "readOnly": true
        },
        "jobPauseCancelReasonString": {
          "type": "string",
          "description": "String representing the reason for the last pause or cancel job.",
          "readOnly": true
        },
        "jobStatusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Value representing the job status.",
          "readOnly": true
        },
        "jobSizeBytes": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the file data job in bytes.",
          "readOnly": true
        },
        "percentageJobWip": {
          "type": "number",
          "format": "double",
          "description": "Value representing the progress of the Write In Place data replication in %",
          "readOnly": true
        },
        "percentageJobExtData": {
          "type": "number",
          "format": "double",
          "description": "Value representing the progress of the Extended data replication in %",
          "readOnly": true
        },
        "percentageJobComplete": {
          "type": "number",
          "format": "double",
          "description": "Value representing the progress of the file data job replication in %",
          "readOnly": true
        },
        "jobDurationSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The current duration of the file data job in seconds.",
          "readOnly": true
        },
        "jobLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The current throughput of the file data job in bytes per second.",
          "readOnly": true
        },
        "jobNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The bandwidth used by the file data job in bytes per second.",
          "readOnly": true
        },
        "percentageJobBandwidthSaving": {
          "type": "number",
          "format": "double",
          "description": "The current bandwidth saving of the job as a %.",
          "readOnly": true
        }
      },
      "description": "Model of the Share mapping file details.",
      "xml": {
        "name": "RepShareMappingFiles"
      }
    },
    "ShareMappingFilesCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/ShareMappingFiles"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "ShareMappingFilesPutModel": {
      "type": "object",
      "required": [
        "markedForRecovery"
      ],
      "properties": {
        "markedForRecovery": {
          "type": "boolean",
          "description": "True if the file is marked for recovery, the actual operation performed is a reset.",
          "default": false
        }
      },
      "description": "Model of the Share mapping file details.",
      "xml": {
        "name": "RepShareMappingFilesPutModel"
      }
    },
    "SourceAppliance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID of the source appliance"
        },
        "name": {
          "type": "string",
          "description": "Name of the source applicance"
        },
        "address": {
          "type": "string",
          "description": "The IP or hostname of the appliance."
        },
        "serialNumber": {
          "type": "string",
          "description": "Serial number of the appliance."
        },
        "healthLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Represents the health level of the service."
        },
        "healthLevelString": {
          "type": "string",
          "description": "Localised string representation of the replication health."
        },
        "repStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Numeric representation of the replication status"
        },
        "repStatusString": {
          "type": "string",
          "description": "Localised string detailing the service replication status"
        },
        "capacityBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Total capacity of the appliance in Bytes"
        },
        "freeBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Free space in the appliance in Bytes"
        },
        "online": {
          "type": "boolean",
          "description": "True if the appliance is online. False otherwise",
          "default": false
        },
        "protocolVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Replication protocol version of the appliance"
        },
        "productClass": {
          "type": "string",
          "description": "String describing the type of appliance"
        },
        "softwareVersion": {
          "type": "string",
          "description": "Firmware version currently installed in the appliance"
        },
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Numeric representation of the dayString"
        },
        "dayString": {
          "type": "string",
          "description": "Localised string denoting the day of week"
        },
        "localTime": {
          "type": "string",
          "example": "10:00",
          "description": "String in 24hour time format denoting the local time of the Target Appliance."
        },
        "bandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Value denoting the current bandwidth limit kept for bandwidth limiting windows inside the source appliance."
        },
        "blackoutActive": {
          "type": "boolean",
          "description": "Status of blackout. True if blackout active, False if not.",
          "default": false
        },
        "blackoutWindows": {
          "type": "array",
          "description": "List of blackout windows",
          "items": {
            "$ref": "#/definitions/WindowCommonModel"
          }
        }
      },
      "description": "Model of the Replication Source Appliance.",
      "xml": {
        "name": "RepSourceAppliance"
      }
    },
    "SourceAppliancesCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/SourceAppliance"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "SourceLibraryPermissions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the library."
        },
        "name": {
          "type": "string",
          "description": "Name of the library."
        },
        "allowAccess": {
          "type": "boolean",
          "description": "True if the source appliance is allowed to access this library.",
          "default": false
        }
      },
      "description": "Model of the replication source library permission details.",
      "xml": {
        "name": "RepSourceLibraryPermissions"
      }
    },
    "SourceLibraryPermissionsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/SourceLibraryPermissions"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "SourceLibraryPermissionsPutModel": {
      "type": "object",
      "properties": {
        "allowAccess": {
          "type": "boolean",
          "description": "True if the source appliance is allowed to access this library.",
          "default": false
        }
      },
      "description": "Model of the replication source library permission details update.",
      "xml": {
        "name": "RepSourceLibraryPermissionsPutModel"
      }
    },
    "SourcePermissions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID of the source permission record."
        },
        "sourceApplianceSerialNumber": {
          "type": "string",
          "description": "Serial number of the source appliance associated with this source permission record."
        },
        "hasDependentMapping": {
          "type": "boolean",
          "description": "True if the source appliance associated with a source permission record has any mappings.",
          "default": false
        }
      },
      "description": "Model of the replication source permission details.",
      "xml": {
        "name": "RepSourcePermissions"
      }
    },
    "SourcePermissionsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/SourcePermissions"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "SourcePermissionsPostModel": {
      "type": "object",
      "required": [
        "sourceApplianceSerialNumber"
      ],
      "properties": {
        "sourceApplianceSerialNumber": {
          "type": "string",
          "description": "Serial number of the source appliance associated with this source permission record."
        }
      },
      "description": "Model of the replication source permission POST details.",
      "xml": {
        "name": "RepSourcePermissionsPostModel"
      }
    },
    "SourceSharePermissions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the share."
        },
        "name": {
          "type": "string",
          "description": "Name of the share."
        },
        "allowAccess": {
          "type": "boolean",
          "description": "True if the source appliance is allowed to access this share.",
          "default": false
        }
      },
      "description": "Model of the replication source share permission details.",
      "xml": {
        "name": "RepSourceSharePermissions"
      }
    },
    "SourceSharePermissionsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/SourceSharePermissions"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "SourceSharePermissionsPutModel": {
      "type": "object",
      "required": [
        "allowAccess"
      ],
      "properties": {
        "allowAccess": {
          "type": "boolean",
          "description": "True if the source appliance is allowed to access this share.",
          "default": false
        }
      },
      "description": "Model of the replication source share permission PUT details.",
      "xml": {
        "name": "RepSourceSharePermissionsPutModel"
      }
    },
    "TargetApplianceModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID of the target appliance"
        },
        "name": {
          "type": "string",
          "description": "Name of the target applicance"
        },
        "address": {
          "type": "string",
          "description": "The IP or hostname of the appliance."
        },
        "serialNumber": {
          "type": "string",
          "description": "Serial number of the appliance."
        },
        "healthLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Represents the health level of the service."
        },
        "healthLevelString": {
          "type": "string",
          "description": "Localised string representation of the replication health."
        },
        "repStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Numeric representation of the replication status"
        },
        "repStatusString": {
          "type": "string",
          "description": "Localised string detailing the service replication status"
        },
        "capacityBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Total capacity of the appliance in Bytes"
        },
        "freeBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Free space in the appliance in Bytes"
        },
        "online": {
          "type": "boolean",
          "description": "True if the appliance is online. False otherwise",
          "default": false
        },
        "connectionFailureReason": {
          "type": "integer",
          "format": "int32",
          "description": "Numeric representation of the connection failure reason"
        },
        "connectionFailureReasonString": {
          "type": "string",
          "description": "Localised string representation of the last connection failure reason while trying to connect to this target appliance"
        },
        "protocolVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Replication protocol version of the appliance"
        },
        "productClass": {
          "type": "string",
          "description": "String describing the type of appliance"
        },
        "softwareVersion": {
          "type": "string",
          "description": "Firmware version currently installed in the appliance"
        },
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Numeric representation of the dayString"
        },
        "dayString": {
          "type": "string",
          "description": "Localised string denoting the day of week"
        },
        "localTime": {
          "type": "string",
          "example": "10:00",
          "description": "String in 24hour time format denoting the local time of the Target Appliance."
        },
        "maxMappingsPerLibrary": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of mappings per library that can be configured in target appliance."
        },
        "blackoutActive": {
          "type": "boolean",
          "description": "Status of blackout. True if blackout active, False if not.",
          "default": false
        },
        "blackoutWindows": {
          "type": "array",
          "description": "List of blackout windows",
          "items": {
            "$ref": "#/definitions/WindowCommonModel"
          }
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Total user data stored of the appliance in Bytes"
        }
      },
      "description": "Model of the Replication Target Appliance",
      "xml": {
        "name": "RepTargetApplianceModel"
      }
    },
    "TargetAppliancePostModel": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The IP or hostname String of the appliance."
        }
      },
      "description": "Model of the Target appliance POST details.",
      "xml": {
        "name": "RepTargetAppliancePostModel"
      }
    },
    "TargetAppliancePutModel": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The IP or hostname String of the appliance."
        }
      },
      "description": "Model of the Target appliance Put details.",
      "xml": {
        "name": "RepTargetAppliancePutModel"
      }
    },
    "TargetAppliancesCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/TargetApplianceModel"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "TargetLibraries": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID of the target appliance"
        },
        "name": {
          "type": "string",
          "description": "Friendly name of the library"
        },
        "libraryVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the library"
        },
        "repRole": {
          "type": "integer",
          "format": "int32",
          "description": "Enum value corresponding to the replication role of the local library,"
        },
        "repRoleString": {
          "type": "string",
          "description": "Localised string representation of the replication role of the local library."
        },
        "deduplicationEnabled": {
          "type": "boolean",
          "description": "True if the library has the deduplication enabled. False otherwise",
          "default": false
        },
        "encryptionEnabled": {
          "type": "boolean",
          "description": "True if encryption is enabled, false otherwise.",
          "default": false
        },
        "numSlotMappings": {
          "type": "integer",
          "format": "int32",
          "description": "Number of slot mappings in the library."
        },
        "numSlots": {
          "type": "integer",
          "format": "int32",
          "description": "The number of slots in the library."
        },
        "diskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Size On Disk In Bytes"
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "User Data Stored In Bytes "
        },
        "healthLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Represents the health level of the library."
        },
        "healthLevelString": {
          "type": "string",
          "description": "Localised string representation of the library health."
        },
        "libraryStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Gives additional information about the current health state."
        },
        "libraryStatusString": {
          "type": "string",
          "description": "Localised string value which may give additional detail pertaining to the current health state."
        },
        "slots": {
          "type": "array",
          "xml": {
            "name": "slot",
            "wrapped": true
          },
          "description": "Provides the details of Vtl target library slots",
          "items": {
            "$ref": "#/definitions/TargetLibrariesSlot"
          }
        }
      },
      "description": "Model of the Target Library details.",
      "xml": {
        "name": "RepTargetLibraries"
      }
    },
    "TargetLibrariesCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/TargetLibraries"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "TargetLibrariesSlot": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID for this slot"
        },
        "barcode": {
          "type": "string",
          "example": "1D14CD0A",
          "description": "Barcode of the cartridge"
        },
        "sizeBytes": {
          "type": "integer",
          "format": "int64",
          "example": 800000000000,
          "description": "Cartridge max size in bytes"
        },
        "numChanges": {
          "type": "integer",
          "format": "int64",
          "description": "The number of times the cartridge has been modified."
        },
        "mapped": {
          "type": "boolean",
          "description": "True if the slot is mapped. False otherwise.",
          "default": false
        }
      },
      "description": "Model of the Target Library Slots detail.",
      "xml": {
        "name": "RepTargetLibrariesSlot"
      }
    },
    "TargetShares": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID identifying the share in the target."
        },
        "name": {
          "type": "string",
          "description": "Name of the share."
        },
        "description": {
          "type": "string",
          "description": "Description of the share."
        },
        "accessProtocol": {
          "type": "integer",
          "format": "int32",
          "description": "Enum representing the access protocol of the share."
        },
        "accessProtocolString": {
          "type": "string",
          "description": "String representing the access protocol of the share."
        },
        "shareVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Share replication version."
        },
        "repRole": {
          "type": "integer",
          "format": "int32",
          "description": "Enum value corresponding to the replication role of the target share."
        },
        "repRoleString": {
          "type": "string",
          "description": "String representation of the replication role of the target share."
        },
        "encryptionEnabled": {
          "type": "boolean",
          "description": "True if encryption is enabled, false otherwise.",
          "default": false
        },
        "deduplicationEnabled": {
          "type": "boolean",
          "description": "True if the share has deduplication enabled. False otherwise.",
          "default": false
        },
        "diskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Size On Disk In Bytes"
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "User Data Stored In Bytes "
        },
        "numFiles": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files."
        },
        "numDirectories": {
          "type": "integer",
          "format": "int32",
          "description": "The number of directories."
        },
        "healthLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Represents the health level of the share."
        },
        "healthLevelString": {
          "type": "string",
          "description": "A String representation of the share health."
        },
        "shareStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Enum giving additional details on the current health level"
        },
        "shareStatusString": {
          "type": "string",
          "description": "String value which may give additional detail pertaining to the current health state."
        }
      },
      "description": "Model of the Target Shares details.",
      "xml": {
        "name": "RepTargetShares"
      }
    },
    "TargetSharesCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/TargetShares"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "VtlLibraryDefaultMappingModel": {
      "type": "object",
      "properties": {
        "targetApplianceId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target appliance."
        },
        "targetLibraryId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target library."
        },
        "targetMappingId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the existing mapping on target library if adopting an existing mapping."
        },
        "targetSlotStart": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target slot from which we want the mapping to start."
        },
        "mode": {
          "type": "string",
          "description": "Value which controls how the recoverSlots & mappedSlots fields will be set.",
          "enum": [
            "FIRST",
            "FIRST_RECOVER",
            "ANOTHER",
            "ANOTHER_RECOVER",
            "ADOPT",
            "MODIFY"
          ]
        }
      },
      "description": "Model to create a default library mapping.",
      "xml": {
        "name": "RepVtlLibraryDefaultMappingModel"
      }
    },
    "VtlLibraryMappingCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/VtlLibraryMappingModel"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "VtlLibraryMappingModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID for this mapping within the current library."
        },
        "libraryId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID for the library this mapping belongs to."
        },
        "libraryName": {
          "type": "string",
          "description": "Unique ID for the library this mapping belongs to."
        },
        "name": {
          "type": "string",
          "description": "String which could be displayed to the user."
        },
        "repStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Enum value corresponding to the replication status of the mapping."
        },
        "repStatusString": {
          "type": "string",
          "description": "String representation of the replication status of the mapping."
        },
        "repRole": {
          "type": "integer",
          "format": "int32",
          "description": "Enum value corresponding to the replication role of the local library."
        },
        "repRoleString": {
          "type": "string",
          "description": "String representation of the replication role of the local library."
        },
        "numMappedSlots": {
          "type": "integer",
          "format": "int32",
          "description": "The number of replicating slots in the mapping."
        },
        "numMappedSlotsOutOfSync": {
          "type": "integer",
          "format": "int32",
          "description": "The number of mapped slots that are currently out of sync in the mapping."
        },
        "numMappedSlotsOutOfSyncWarning": {
          "type": "integer",
          "format": "int32",
          "description": "The number of mapped slots that are currently out of sync in the mapping for which there are warnings."
        },
        "numMappedSlotsOutOfSyncCritical": {
          "type": "integer",
          "format": "int32",
          "description": "The number of mapped slots that are currently out of sync in the mapping for which there are critical errors."
        },
        "outOfSyncHours": {
          "type": "integer",
          "format": "int32",
          "description": "The number of hours that the mapping has been out of sync."
        },
        "mappedSlots": {
          "type": "array",
          "description": "The collection of slots that are mapped.",
          "items": {
            "$ref": "#/definitions/VtlMappingMappedSlots"
          }
        },
        "averageLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The current throughput of the slot data job in bytes per second."
        },
        "averageNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The bandwidth used by the slot data job in bytes per second."
        },
        "percentageAverageBandwidthSave": {
          "type": "number",
          "format": "double",
          "description": "The current bandwidth saving of the job in percentage."
        },
        "visibleFromHosts": {
          "type": "boolean",
          "description": "Flag stating whether the local library is visible from other hosts or not.",
          "default": false
        },
        "recoveryActive": {
          "type": "boolean",
          "description": "Flag stating whether the there is an active recovery job in the mapping or not.",
          "default": false
        },
        "sourceApplianceMappingDetails": {
          "description": "Details on the source appliance, library and mappings",
          "$ref": "#/definitions/PartnerApplianceModel"
        },
        "targetApplianceMappingDetails": {
          "description": "Details on the target appliance, library and mappings.",
          "$ref": "#/definitions/PartnerApplianceModel"
        },
        "libraryRole": {
          "type": "integer",
          "format": "int32",
          "description": "Replication role of the local library"
        },
        "libraryRoleString": {
          "type": "string",
          "description": "String representation of the Replication role of the local library"
        },
        "libraryHealthStatusLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Health status level of the local library"
        },
        "libraryHealthStatusLevelString": {
          "type": "string",
          "description": "String representation of the Health status level of the local library"
        },
        "mappingHealthStatusLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Health status level of the mapping"
        },
        "mappingHealthStatusLevelString": {
          "type": "string",
          "description": "String representation of the Health status level of the mapping"
        }
      },
      "description": "Model of the Library mapping details.",
      "xml": {
        "name": "RepVtlLibraryMappingModel"
      }
    },
    "VtlLibraryMappingPostModel": {
      "type": "object",
      "required": [
        "targetApplianceId",
        "targetLibraryId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the mapping"
        },
        "adoptMapping": {
          "type": "boolean",
          "description": "Flag indicating whether to adopt an existing mapping on the target. False by default",
          "default": false
        },
        "targetLibraryId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target library."
        },
        "targetApplianceId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target appliance."
        },
        "targetMappingId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the existing target mapping to adopt. Only used if the adoptMapping flag is set."
        },
        "mappedSlots": {
          "type": "array",
          "description": "The collection of slots that are mapped.",
          "items": {
            "$ref": "#/definitions/VtlMappingMappedSlotsPostModel"
          }
        }
      },
      "description": "Model of the Library mapping POST details.",
      "xml": {
        "name": "RepVtlLibraryMappingPostModel"
      }
    },
    "VtlLibraryMappingPutModel": {
      "type": "object",
      "required": [
        "targetApplianceId",
        "targetLibraryId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the store"
        },
        "targetLibraryId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target library."
        },
        "targetApplianceId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the target appliance."
        },
        "mappedSlots": {
          "type": "array",
          "description": "The collection of slots that are mapped.",
          "items": {
            "$ref": "#/definitions/VtlMappingMappedSlotsPutModel"
          }
        }
      },
      "description": "Model of the Library mapping PUT details.",
      "xml": {
        "name": "RepVtlLibraryMappingPutModel"
      }
    },
    "VtlMappingMappedSlotsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/VtlMappingMappedSlots"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "VtlMappingMappedSlotsPostModel": {
      "type": "object",
      "properties": {
        "sourceSlotId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of slot that acts as source in mapping."
        },
        "targetSlotId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of slot that acts as target in mapping"
        },
        "recover": {
          "type": "boolean",
          "description": "Perform an initial one off recovery of the source slot. False by default",
          "default": false
        }
      },
      "description": "Model of the Library Mapped slots details for POST operation.",
      "xml": {
        "name": "RepVtlMappingMappedSlotsPostModel"
      }
    },
    "VtlMappingMappedSlotsPutModel": {
      "type": "object",
      "properties": {
        "sourceSlotId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of slot that acts as source in mapping."
        },
        "targetSlotId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of slot that acts as target in mapping"
        },
        "recover": {
          "type": "boolean",
          "description": "Perform an initial one off recovery of the source slot. False by default",
          "default": false
        }
      },
      "description": "Model of the Library Mapped slots details for PUT operation.",
      "xml": {
        "name": "RepVtlMappingMappedSlotsPutModel"
      }
    }
  },
  "host": "APPLIANCE-ADDRESS",
  "securityDefinitions": {
    "BasicAuth": {
      "type": "basic"
    },
    "oauth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "/pml/login/authenticatewithobject"
    }
  },
  "security": [
    {
      "BasicAuth": [],
      "oauth": []
    }
  ]
}