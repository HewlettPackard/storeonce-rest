{
  "swagger": "2.0",
  "info": {
    "description": "unused",
    "version": "13.3.0-SNAPSHOT",
    "title": "Catalyst"
  },
  "basePath": "/api/v1/data-services",
  "tags": [
    {
      "name": "StoreOnce Catalyst"
    },
    {
      "name": "Bandwidth Calculator"
    },
    {
      "name": "Bandwidth Limits"
    },
    {
      "name": "Bandwidth Windows"
    },
    {
      "name": "Blackout Now"
    },
    {
      "name": "Blackout Windows"
    },
    {
      "name": "Clients"
    },
    {
      "name": "Cloud Bandwidth Limits"
    },
    {
      "name": "Cloud Bandwidth Windows"
    },
    {
      "name": "Cloud Connectivity Test"
    },
    {
      "name": "Cloud Diagnostics"
    },
    {
      "name": "Cloud Parametrics"
    },
    {
      "name": "Cloud Proxies"
    },
    {
      "name": "Cloud SSL Certificates"
    },
    {
      "name": "Cloud Self Certify"
    },
    {
      "name": "Cloud Store Keys"
    },
    {
      "name": "Cloud Stores"
    },
    {
      "name": "Cloud Subnets"
    },
    {
      "name": "CoFC Device Logins"
    },
    {
      "name": "CoFC Devices"
    },
    {
      "name": "CoFC Identifiers"
    },
    {
      "name": "CoFC Initiators"
    },
    {
      "name": "CoFC Remote Hosts"
    },
    {
      "name": "Copyjobs"
    },
    {
      "name": "Datajobs"
    },
    {
      "name": "Items"
    },
    {
      "name": "Service"
    },
    {
      "name": "Storage Metrics"
    },
    {
      "name": "Store Key Resource"
    },
    {
      "name": "Store Permissions"
    },
    {
      "name": "Stores"
    },
    {
      "name": "Throughput Parametrics"
    },
    {
      "name": "Usage Summaries"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/cat/bandwidth-calculator": {
      "put": {
        "tags": [
          "Bandwidth Calculator"
        ],
        "summary": "Calculate bandwidth limit",
        "description": "Calculates the recommended bandwidth limit",
        "operationId": "getRecommendedLimit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model containing fields required to calculate bandwidth limit.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BandwidthCalculator"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BandwidthCalculator"
            }
          },
          "400": {
            "description": "Invalid input specified in request",
            "schema": {
              "$ref": "#/definitions/StoreonceRestException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/bandwidth-limit": {
      "get": {
        "tags": [
          "Bandwidth Limits"
        ],
        "summary": "Get bandwidth limit settings",
        "description": "Returns the status and magnitude of the bandwidth limit",
        "operationId": "getBandwidthNow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK, Successful operation",
            "schema": {
              "$ref": "#/definitions/BandwidthLimit"
            }
          },
          "400": {
            "description": "Bad request, invalid input",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "Bandwidth Limits"
        ],
        "summary": "Update bandwidth limit settings",
        "description": "Updates the status and magnitude of the general bandwidth limit",
        "operationId": "updateBandwidthNow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of the Bandwidth Limit",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BandwidthLimitPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content, Successful operation"
          },
          "400": {
            "description": "Bad request, invalid input"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      }
    },
    "/cat/bandwidth-windows": {
      "get": {
        "tags": [
          "Bandwidth Windows"
        ],
        "summary": "Get all bandwidth windows",
        "description": "Returns specified days bandwidth window settings",
        "operationId": "getCatBandwidthWindows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BandwidthWindowsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Window does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/bandwidth-windows/day/{dayid}": {
      "get": {
        "tags": [
          "Bandwidth Windows"
        ],
        "summary": "Get a single bandwidth window",
        "description": "Returns specified day's bandwidth window settings",
        "operationId": "getCatBandwidthWindow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dayid",
            "in": "path",
            "description": "Number representing the day of the week",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BandwidthWindow"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Window does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "Bandwidth Windows"
        ],
        "summary": "Update a single bandwidth window",
        "description": "Updates the specified days bandwidth window settings",
        "operationId": "updateCatBandwidthWindow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dayid",
            "in": "path",
            "description": "Number representing the day of the week",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model of the bandwidth window",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BandwidthWindowPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Window does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      }
    },
    "/cat/blackout-now": {
      "get": {
        "tags": [
          "Blackout Now"
        ],
        "summary": "Get blackout override settings",
        "description": "Returns the status of the blackout window override",
        "operationId": "getBlackoutNow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK, Successful operation",
            "schema": {
              "$ref": "#/definitions/BlackoutNow"
            }
          },
          "400": {
            "description": "Bad request, invalid input",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "Blackout Now"
        ],
        "summary": "Update blackout override settings",
        "description": "Updates the status of the blackout override",
        "operationId": "updateBlackoutNow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of the Blackout Now",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlackoutNowPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content, Successful operation"
          },
          "400": {
            "description": "Bad request, invalid input",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      }
    },
    "/cat/blackout-windows": {
      "get": {
        "tags": [
          "Blackout Windows"
        ],
        "summary": "Return all blackout windows",
        "description": "Returns the bandwidth window information for all 7 days",
        "operationId": "getCatBlackoutWindows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BlackoutWindowsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Window does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/blackout-windows/day/{dayid}": {
      "get": {
        "tags": [
          "Blackout Windows"
        ],
        "summary": "Get a single blackout window",
        "description": "Returns the bandwidth window information for a single specified day",
        "operationId": "getCatBlackoutWindow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dayid",
            "in": "path",
            "description": "Number representing the day of the week",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BlackoutWindow"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Window does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "Blackout Windows"
        ],
        "summary": "Update a single blackout window",
        "description": "Updates the blackout window setttings for the specified day",
        "operationId": "updateCatBlackoutWindow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dayid",
            "in": "path",
            "description": "Number representing the day of the week",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model of the blackout window",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlackoutWindowPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Window does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      }
    },
    "/cat/clients": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get Clients",
        "description": "Returns the list of clients currently configured on the catalyst service",
        "operationId": "getCatClients",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ClientsCollection"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Create Client",
        "description": "Creates a new Catalyst client",
        "operationId": "createCatClient",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of a Catalyst client",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ClientPostModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "Path to newly created client"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:create"
        ]
      }
    },
    "/cat/clients/client/{client}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get Client",
        "description": "Returns the specified Catalyst client",
        "operationId": "getCatClient",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "client",
            "in": "path",
            "description": "ID of the Catalyst Client",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "Clients"
        ],
        "summary": "Update Client",
        "description": "Updates the specified Catalyst client",
        "operationId": "updateCatClient",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "client",
            "in": "path",
            "description": "ID of the Catalyst Client",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model of a Catalyst client",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ClientPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      },
      "delete": {
        "tags": [
          "Clients"
        ],
        "summary": "Delete Client",
        "description": "Deletes the specified Catalyst client",
        "operationId": "deleteCatClient",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "client",
            "in": "path",
            "description": "ID of the Catalyst Client",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:delete"
        ]
      }
    },
    "/cat/cloud-bandwidth-limit": {
      "get": {
        "tags": [
          "Cloud Bandwidth Limits"
        ],
        "summary": "Get bandwidth limit settings",
        "description": "Returns the status and magnitude of the bandwidth limit",
        "operationId": "getCloudBandwidthLimit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK, Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudBandwidthLimit"
            }
          },
          "400": {
            "description": "Bad request, invalid input",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "Cloud Bandwidth Limits"
        ],
        "summary": "Update cloud bandwidth limit settings",
        "description": "Updates the status and magnitude of the cloud general bandwidth limit",
        "operationId": "updateCloudBandwidthLimit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of the Cloud Bandwidth Limit",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CloudBandwidthLimitPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content, Successful operation"
          },
          "400": {
            "description": "Bad request, invalid input",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      }
    },
    "/cat/cloud-bandwidth-subnets": {
      "get": {
        "tags": [
          "Cloud Subnets"
        ],
        "summary": "Get the collection of subnet rules",
        "description": "Returns the list of subnets currently configured on the catalyst service",
        "operationId": "getCatCloudSubnets",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudSubnetsCollection"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "post": {
        "tags": [
          "Cloud Subnets"
        ],
        "summary": "Create a subnet rule",
        "description": "",
        "operationId": "createCatCloudSubnet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of the cloud subnet settings",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CloudSubnetPostModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:create"
        ]
      }
    },
    "/cat/cloud-bandwidth-subnets/subnet/{subnet}": {
      "get": {
        "tags": [
          "Cloud Subnets"
        ],
        "summary": "Get a singular subnet rule by id",
        "description": "",
        "operationId": "getCatCloudSubnet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subnet",
            "in": "path",
            "description": "ID of the Catalyst Cloud subnet",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudSubnetModel"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "Cloud Subnets"
        ],
        "summary": "Update a subnet rule",
        "description": "",
        "operationId": "updateCatCloudSubnet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subnet",
            "in": "path",
            "description": "ID of the Catalyst Cloud subnet",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model of the cloud subnet settings",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CloudSubnetPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      },
      "delete": {
        "tags": [
          "Cloud Subnets"
        ],
        "summary": "Delete a singular subnet rule by id",
        "description": "",
        "operationId": "deleteCatCloudSubnet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subnet",
            "in": "path",
            "description": "ID of the Catalyst Cloud subnet",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:delete"
        ]
      }
    },
    "/cat/cloud-bandwidth-windows": {
      "get": {
        "tags": [
          "Cloud Bandwidth Windows"
        ],
        "summary": "Get all bandwidth windows",
        "description": "Returns specified days cloud bandwidth window settings",
        "operationId": "getCatBandwidthWindows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudBandwidthWindowsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found. Window does not exist"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/cloud-bandwidth-windows/day/{dayid}": {
      "get": {
        "tags": [
          "Cloud Bandwidth Windows"
        ],
        "summary": "Get a single cloud bandwidth window",
        "description": "Returns specified day's cloud bandwidth window settings",
        "operationId": "getCatBandwidthWindow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dayid",
            "in": "path",
            "description": "Number representing the day of the week",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudBandwidthWindowModel"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Window does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "Cloud Bandwidth Windows"
        ],
        "summary": "Update a single cloud bandwidth window",
        "description": "Updates the specified days cloud bandwidth window settings",
        "operationId": "updateCatBandwidthWindow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dayid",
            "in": "path",
            "description": "Number representing the day of the week",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model of the bandwidth window",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CloudBandwidthWindowPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Window does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      }
    },
    "/cat/cloud-connectivity": {
      "post": {
        "tags": [
          "Cloud Connectivity Test"
        ],
        "summary": "Run connectivity test",
        "description": "Run connectivity test against parameters.",
        "operationId": "runCloudConnectivityTest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of parameters for Catalyst cloud requests",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CloudParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CloudConnectivity"
            }
          },
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Failed to start / Internal error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:create"
        ]
      }
    },
    "/cat/cloud-proxy": {
      "get": {
        "tags": [
          "Cloud Proxies"
        ],
        "summary": "Get Catalyst Cloud Proxy Settings",
        "description": "",
        "operationId": "getCloudProxy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudProxy"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      },
      "put": {
        "tags": [
          "Cloud Proxies"
        ],
        "summary": "Update Catalyst cloud proxy settings",
        "description": "",
        "operationId": "updateCloudProxy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of Catalyst Cloud Proxy Settings",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CloudProxy"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:update"
        ]
      }
    },
    "/cat/cloud-ssl-certificate": {
      "get": {
        "tags": [
          "Cloud SSL Certificates"
        ],
        "summary": "Returns the Catalyst Cloud SSL Certificate details from a given host address",
        "description": "",
        "operationId": "getCloudSSLCertificates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cspAddress",
            "in": "query",
            "description": "Cloud Service Provider Address",
            "required": false,
            "type": "string"
          },
          {
            "name": "cspPort",
            "in": "query",
            "description": "Cloud Service Provider Port",
            "required": false,
            "type": "string"
          },
          {
            "name": "proxyConnection",
            "in": "query",
            "description": "True if proxy is to be used to obtain the SSL Details",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudSSLCertificate"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/cloud-store-diagnostics/store/{storeid}": {
      "get": {
        "tags": [
          "Cloud Diagnostics"
        ],
        "summary": "Get all previous diagnostic results for the given store.",
        "description": "",
        "operationId": "getCloudDiagnostics",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudStoreDiagnosticsCollection"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      },
      "post": {
        "tags": [
          "Cloud Diagnostics"
        ],
        "summary": "Starts diagnostic tests on the cloud store",
        "description": "Create a Catalyst store.",
        "operationId": "runCloudDiagnostics",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "uploadIncluded",
            "in": "query",
            "description": "Upload tests included",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "downloadIncluded",
            "in": "query",
            "description": "Download tests included",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI where diagnostic result can be seen"
              }
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:create"
        ]
      }
    },
    "/cat/cloud-store-diagnostics/store/{storeid}/diagnostics/{diagnosticid}": {
      "get": {
        "tags": [
          "Cloud Diagnostics"
        ],
        "summary": "Get results from a specific diagnostic run",
        "description": "",
        "operationId": "getCloudDiagnostic",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "diagnosticid",
            "in": "path",
            "description": "ID of the cloud diagnostics",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudStoreDiagnostics"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/cloud-store-keys": {
      "post": {
        "tags": [
          "Cloud Store Keys"
        ],
        "summary": "Import Catalyst Cloud Store Key",
        "description": "",
        "operationId": "importCloudStoreKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of a Catalyst cloud key",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CloudStoreKey"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid or Missing property."
          },
          "403": {
            "description": "Incorrect key for given UID."
          },
          "409": {
            "description": " Key name already exists."
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:create"
        ]
      }
    },
    "/cat/cloud-stores": {
      "post": {
        "tags": [
          "Cloud Stores"
        ],
        "summary": "Get cloud stores",
        "description": "Return list of cloud stores with given parameters.",
        "operationId": "getCloudStores",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of parameters for Catalyst cloud requests",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CloudParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CloudStore"
            }
          },
          "201": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:create"
        ]
      }
    },
    "/cat/cofc-device-logins/device/{device}": {
      "get": {
        "tags": [
          "CoFC Device Logins"
        ],
        "summary": "Get All CoFC Device Login Details",
        "description": "Returns details of host devices connected to the CoFC device specified by device ID",
        "operationId": "getCofcDeviceLogins",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "device",
            "in": "path",
            "description": "ID of the CoFC device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CoFCDeviceLoginCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found."
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/cofc-device-logins/device/{device}/login/{login}": {
      "get": {
        "tags": [
          "CoFC Device Logins"
        ],
        "summary": "Get CoFC Device Login Details",
        "description": "Returns details of a host device connected to the CoFC device, based on login number and device ID",
        "operationId": "getCofcDeviceLogin",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "device",
            "in": "path",
            "description": "ID of the CoFC device",
            "required": true,
            "type": "string"
          },
          {
            "name": "login",
            "in": "path",
            "description": "Login ID of the CoFC device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CofcDeviceLogin"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI"
          },
          "404": {
            "description": "Not Found."
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/cofc-devices": {
      "get": {
        "tags": [
          "CoFC Devices"
        ],
        "summary": "Get CoFC Devices",
        "description": "Return CoFC Devices",
        "operationId": "getCofcDevices",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CoFCDevicesCollection"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/cofc-devices/device/{device}": {
      "get": {
        "tags": [
          "CoFC Devices"
        ],
        "summary": "Get a CoFC Device",
        "description": "Return CoFC Device details",
        "operationId": "getCofcDevice",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "device",
            "in": "path",
            "description": "ID of the CoFC device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CofcDevice"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "CoFC Devices"
        ],
        "summary": "Update CoFC Device",
        "description": "Update CoFC Device number of LUNs",
        "operationId": "updateCofcDevice",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "device",
            "in": "path",
            "description": "ID of the CoFC device",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model of the CoFC Device Properties",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CoFCDevicePutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      }
    },
    "/cat/cofc-identifier": {
      "get": {
        "tags": [
          "CoFC Identifiers"
        ],
        "summary": "Get a CoFC Identifier",
        "description": "Return CoFC Identifier details",
        "operationId": "getCofcIdentifier",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CofcIdentifier"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "CoFC Identifiers"
        ],
        "summary": "Update a CoFC Identifier",
        "description": "Update CoFC Identifier details",
        "operationId": "updateCofcIdentifier",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of the CoFC Identifier Properties",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CoFCIdentifierPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      }
    },
    "/cat/cofc-initiators": {
      "get": {
        "tags": [
          "CoFC Initiators"
        ],
        "summary": "Get CoFC Initiators",
        "description": "Return all CoFC Initiator Details",
        "operationId": "getCofcInitiators",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CoFCInitiatorsCollection"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/cofc-initiators/initiator/{initiator}": {
      "get": {
        "tags": [
          "CoFC Initiators"
        ],
        "summary": "Get a CoFC Initiator",
        "description": "Return CoFC Initiator Details",
        "operationId": "getCofcInitiator",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "initiator",
            "in": "path",
            "description": "ID of the CoFC initiator",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CofcInitiator"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/cofc-remote-host-ranges": {
      "get": {
        "tags": [
          "CoFC Remote Hosts"
        ],
        "summary": "Get CoFC Remote Hosts Ranges",
        "description": "Returns a collection CoFC Remote Hosts Ranges",
        "operationId": "getCofcRemoteHosts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CoFCRemoteHostsCollection"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "post": {
        "tags": [
          "CoFC Remote Hosts"
        ],
        "summary": "Create CoFC new Remote Host Range",
        "description": "Creates a new CoFC Remote Host Range, the new range must not overlap an already existing range",
        "operationId": "createCofcRemoteHost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of the CoFC Remote Host Properties",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CofcRemoteHost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "Path to newly created Remote Host Range"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:create"
        ]
      }
    },
    "/cat/cofc-remote-host-ranges/wwpnStart/{wwpnStart}": {
      "get": {
        "tags": [
          "CoFC Remote Hosts"
        ],
        "summary": "Get CoFC Remote Host Range",
        "description": "Returns a CoFC Remote Host range",
        "operationId": "getCofcRemoteHost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "wwpnStart",
            "in": "path",
            "description": "World Wide Port Name used to get remote host ranges",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CofcRemoteHost"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "delete": {
        "tags": [
          "CoFC Remote Hosts"
        ],
        "summary": "Delete CoFC Remote Host Range",
        "description": "Deletes the specified CoFC Remote Host Range starting from the specified start world wide port name",
        "operationId": "deleteCofcRemoteHost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "wwpnStart",
            "in": "path",
            "description": "World Wide Port Name used to get remote host ranges",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "COFC not supported"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:delete"
        ]
      }
    },
    "/cat/copyjobs/store/{storeid}/direction/{direction}": {
      "get": {
        "tags": [
          "Copyjobs"
        ],
        "summary": "Get a collection of copyjobs",
        "description": "Returns a collection of copyjobs (limited to a maximum of 1000 copyjobs per request)",
        "operationId": "getCatStoreCopyJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "path",
            "description": "direction of the copyjob",
            "required": true,
            "type": "string"
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count to return for request",
            "required": false,
            "type": "string",
            "default": "50"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreCopyJobsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Copyjob/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/copyjobs/store/{storeid}/direction/{direction}/count": {
      "post": {
        "tags": [
          "Copyjobs"
        ],
        "summary": "Get a count of filtered copyjobs",
        "description": "",
        "operationId": "getCatStoreCopyJobFilterCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "path",
            "description": "direction of the copyjob",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CopyJobFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreCopyJobsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in body",
            "schema": {
              "$ref": "#/definitions/StoreonceRestException"
            }
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/StoreonceRestException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/StoreonceRestException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/copyjobs/store/{storeid}/direction/{direction}/filter": {
      "post": {
        "tags": [
          "Copyjobs"
        ],
        "summary": "Get a filtered collection of copyjobs",
        "description": "Returns a filtered collection of copyjobs (limited to a maximum of 1000 copyjobs per request)",
        "operationId": "getCatStoreCopyJobFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "path",
            "description": "direction of the copyjob",
            "required": true,
            "type": "string"
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CopyJobFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreCopyJobsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/StoreonceRestException"
            }
          },
          "404": {
            "description": "Not Found. Copyjob/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/copyjobs/store/{storeid}/direction/{direction}/job/{jobid}": {
      "get": {
        "tags": [
          "Copyjobs"
        ],
        "summary": "Get a single copyjob",
        "description": "Returns a single copyjob with the matching job ID from the given store",
        "operationId": "getCatStoreCopyJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "path",
            "description": "direction of the copyjob",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobid",
            "in": "path",
            "description": "ID of the job",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreCopyJob"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Copyjob/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      },
      "put": {
        "tags": [
          "Copyjobs"
        ],
        "summary": "Cancel a copyjob",
        "description": "Cancels the given copyjob",
        "operationId": "putCatStoreCopyJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "path",
            "description": "direction of the copyjob",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobid",
            "in": "path",
            "description": "ID of the job",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StoreCopyJobCancelModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content. Successful operation"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Copyjob/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:update"
        ]
      }
    },
    "/cat/datajobs/store/{storeid}": {
      "get": {
        "tags": [
          "Datajobs"
        ],
        "summary": "Get a collection of datajobs",
        "description": "Returns a collection of datajobs",
        "operationId": "getCatStoreDataJobs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count to return for request",
            "required": false,
            "type": "string",
            "default": "50"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreDataJobsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Datajob/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/datajobs/store/{storeid}/count": {
      "post": {
        "tags": [
          "Datajobs"
        ],
        "summary": "Get a count of filtered datajobs",
        "description": "",
        "operationId": "getFilteredCatStoreDataJobsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model for the datajob filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataJobFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreDataJobsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in body ",
            "schema": {
              "$ref": "#/definitions/StoreonceRestException"
            }
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/StoreonceRestException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/StoreonceRestException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/datajobs/store/{storeid}/filter": {
      "post": {
        "tags": [
          "Datajobs"
        ],
        "summary": "Get a filtered collection of datajobs",
        "description": "Returns a filtered collection of datajobs (limited to a maximum of 1000 items per request)",
        "operationId": "getFilteredCatStoreDataJobs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model for the datajob filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataJobFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreDataJobsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/StoreonceRestException"
            }
          },
          "404": {
            "description": "Not Found. Datajob/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/datajobs/store/{storeid}/job/{jobid}": {
      "get": {
        "tags": [
          "Datajobs"
        ],
        "summary": "Get a single datajob",
        "description": "Returns single datajob with matching datajob id from supplied store",
        "operationId": "getCatStoreDataJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobid",
            "in": "path",
            "description": "ID of the job",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreDatajob"
            }
          },
          "404": {
            "description": "Not Found. Datajob/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/items/store/{storeid}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get a collection of items",
        "description": "Returns a collection of items (limited to a maximum of 1000 items per request)",
        "operationId": "getCatStoreItems",
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count to return for request",
            "required": false,
            "type": "string",
            "default": "50"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreItemsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Item/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/items/store/{storeid}/count": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Get a count of filtered items",
        "description": "",
        "operationId": "getCatStoreItemFilterCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreItemsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in body",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/items/store/{storeid}/filter": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Get a filtered collection of items",
        "description": "Returns a filtered collection of items (limited to a maximum of 1000 items per request)",
        "operationId": "getCatStoreItemFilter",
        "consumes": [
          "text/xml",
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "waypoint",
            "in": "query",
            "description": "Waypoint to use for request",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreItemsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Item/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/items/store/{storeid}/item/{itemid}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get a single item",
        "description": "Returns single item with matching item id from supplied store",
        "operationId": "getCatStoreItem",
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemid",
            "in": "path",
            "description": "ID of the Catalyst item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreItem"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Item/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete a single item",
        "description": "Deletes an item with the matching item id",
        "operationId": "deleteCatStoreItem",
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemid",
            "in": "path",
            "description": "ID of the Catalyst item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Item/Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:delete"
        ]
      }
    },
    "/cat/parametrics-cloud": {
      "get": {
        "tags": [
          "Cloud Parametrics"
        ],
        "summary": "Get a catalyst cloud metric reports",
        "description": "Returns a stores reports between the start and end dates, samples denotes  the amount of members to return",
        "operationId": "getCloudParametricsReports",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "The date from which samples should be returned.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The date samples should be returned up until",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "samples",
            "in": "query",
            "description": "The maximum number of samples to return.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudParametricsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/parametrics-cloud/store/{storeid}": {
      "get": {
        "tags": [
          "Cloud Parametrics"
        ],
        "summary": "Get catalyst cloud store parametric reports",
        "description": "Returns store reports between the start and end dates, samples denotes the amount of members to return",
        "operationId": "getCloudStoreParametricsReports",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The date from which samples should be returned.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The date samples should be returned up until",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "samples",
            "in": "query",
            "description": "The maximum number of samples to return.",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeHistorical",
            "in": "query",
            "description": "Boolean to specify if metrics returned are exclusively for the current store ",
            "required": false,
            "type": "string",
            "default": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CloudParametricsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/parametrics-storage": {
      "get": {
        "tags": [
          "Storage Metrics"
        ],
        "summary": "Get a cat stores metric reports",
        "description": "Returns a stores reports between the start and end dates, samples denotes  the amount of members to return",
        "operationId": "getSingleStorageReport",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Retrieve samples from this date onwards",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Retrieve samples up to this date.  If omitted, the current date is used ",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "samples",
            "in": "query",
            "description": "Maximum number of samples to return",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StorageParametricsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/parametrics-storage/store/{storeid}": {
      "get": {
        "tags": [
          "Storage Metrics"
        ],
        "summary": "Get storage metric reports",
        "description": "Returns store reports between the start and end dates, samples denotes the amount of members to return",
        "operationId": "getStoreStorageReports",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Retrieve samples from this date onwards",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Retrieve samples up to this date.  If omitted, the current date is used ",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "samples",
            "in": "query",
            "description": "Maximum number of samples to return",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeHistorical",
            "in": "query",
            "description": "Boolean to specify if metrics returned are exclusively for the current store",
            "required": false,
            "type": "string",
            "default": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StorageParametricsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/parametrics-throughput": {
      "get": {
        "tags": [
          "Throughput Parametrics"
        ],
        "summary": "Get cat throughput reports",
        "description": "Returns metrics for all stores between the start and end dates, samples denotes the amount of members to return",
        "operationId": "getThroughputReports",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Retrieve samples from this date onwards",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Retrieve samples up to this date.  If omitted, the current date is used ",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "samples",
            "in": "query",
            "description": "Maximum number of samples to return",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ThroughputParametricsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/parametrics-throughput/store/{storeid}": {
      "get": {
        "tags": [
          "Throughput Parametrics"
        ],
        "summary": "Get a cat stores throughput reports",
        "description": "Returns metrics, between the start and end dates, samples denotes the amount of members to return",
        "operationId": "getStoreThroughputReport",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Retrieve samples from this date onwards",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Retrieve samples up to this date.  If omitted, the current date is used ",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "samples",
            "in": "query",
            "description": "Maximum number of samples to return",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeHistorical",
            "in": "query",
            "description": "Boolean to specify if metrics returned are exclusively for the current store",
            "required": false,
            "type": "string",
            "default": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ThroughputParametricsCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      }
    },
    "/cat/services": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get Service",
        "description": "Returns the Catalyst service information",
        "operationId": "getCatService",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:read"
        ]
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update Service",
        "description": "Updates the Catalyst service parameters",
        "operationId": "updateCatService",
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Model of the Catalyst service",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServicePutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content, Successful operation"
          },
          "400": {
            "description": "Bad request, invalid input",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      }
    },
    "/cat/store-keys/store/{storeid}": {
      "get": {
        "tags": [
          "Store Key Resource"
        ],
        "summary": "Get Cloud Store Keys",
        "description": "Returns the store key, encrypted with a password",
        "operationId": "getCatStoreKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password to create an encrypted key from, Password must contain lower and upper case letters, a number, and some special character, and must be between 15-32 characters in length.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/EncryptedKey"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not found, Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/stores": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get Stores",
        "description": "Gets the collection of Catalyst stores on the appliance.",
        "operationId": "getCatStores",
        "produces": [
          "application/json",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoresCollection"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      },
      "post": {
        "tags": [
          "Stores"
        ],
        "summary": "Create Store",
        "description": "Create a Catalyst store.",
        "operationId": "createCatStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameters of Catalyst store.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StorePostModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "Path to newly created store"
              }
            }
          },
          "404": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:create"
        ]
      }
    },
    "/cat/stores-permissions/store/{storeid}": {
      "get": {
        "tags": [
          "Store Permissions"
        ],
        "summary": "Get store permissions",
        "description": "Gets the collection of Catalyst stores permissions",
        "operationId": "getCatStoreClientPermissions",
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StorePermissionsCollection"
            }
          },
          "404": {
            "description": "Not found, Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/stores-permissions/store/{storeid}/client/{client}": {
      "get": {
        "tags": [
          "Store Permissions"
        ],
        "summary": "Get a single client permission",
        "description": "Returns the store premissions for a given client for the given store",
        "operationId": "getCatStoreClientPermission",
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "client",
            "in": "path",
            "description": "ID of the Store Client",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StorePermissionModel"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Store/Client does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      },
      "put": {
        "tags": [
          "Store Permissions"
        ],
        "summary": "Update a single client permission",
        "description": "Updates the specified client access settting for the given store",
        "operationId": "updateCatStoreClientPermission",
        "consumes": [
          "text/xml",
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "client",
            "in": "path",
            "description": "ID of the Store Client",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model of the stores permissions",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StorePermissionPutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Store/Client does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catservice:update"
        ]
      }
    },
    "/cat/stores/store/{storeid}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get Store",
        "description": "Get a single Catalyst store information.",
        "operationId": "getCatStore",
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      },
      "put": {
        "tags": [
          "Stores"
        ],
        "summary": "Update Store",
        "description": "Update a Catalyst store's properties.",
        "operationId": "updateCatStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameters of Catalyst store.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StorePutModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:update"
        ]
      },
      "delete": {
        "tags": [
          "Stores"
        ],
        "summary": "Update Store",
        "description": "Delete a Catalyst store.",
        "operationId": "deleteCatStore",
        "produces": [
          "application/json",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "cloudDeleteType",
            "in": "query",
            "description": "Integer representing the type of delete to carry out.",
            "required": false,
            "type": "string",
            "default": "0",
            "enum": [
              "0",
              "1",
              "2"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Catalyst service is not available",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:delete"
        ]
      }
    },
    "/cat/usage-summaries/store/{storeid}": {
      "get": {
        "tags": [
          "Usage Summaries"
        ],
        "summary": "Get a single store usage summaries",
        "description": "Returns a single store usage summaries",
        "operationId": "getCatStoreUsageSummaries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Query start date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Query end date",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreUsageSummaryCollection"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    },
    "/cat/usage-summaries/store/{storeid}/vendor/{vendor}": {
      "get": {
        "tags": [
          "Usage Summaries"
        ],
        "summary": "Get a single store usage summaries for the vendor specified",
        "description": "Returns specified store and vendor usage summaries",
        "operationId": "getCatStoreUsageSummariesForVendor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeid",
            "in": "path",
            "description": "ID of the Catalyst store",
            "required": true,
            "type": "string"
          },
          {
            "name": "vendor",
            "in": "path",
            "description": "Vendor name",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Query start date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Query end date",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/StoreUsageSummary"
            }
          },
          "400": {
            "description": "Bad Request. Invalid data in URI",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "404": {
            "description": "Not Found. Store does not exist",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/D2DBusinessException"
            }
          }
        },
        "x-pmlPermissions": [
          "catstores:read"
        ]
      }
    }
  },
  "definitions": {
    "CloudStore": {
      "type": "object",
      "properties": {
        "serialNumber": {
          "type": "string",
          "description": "Serial number of the StoreOnce appliance the store belongs to",
          "readOnly": true
        },
        "cloudStoreId": {
          "type": "string",
          "description": "The cloudStoreId of the cloud store",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the cloud store",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the cloud store",
          "readOnly": true
        },
        "encryptionEnabled": {
          "type": "boolean",
          "description": "True if cloud store is encryptionEnabled",
          "readOnly": true,
          "default": false
        },
        "cloudDiskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of capacity used (post dedupe) in the cloud",
          "readOnly": true
        },
        "localDiskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of capacity used (post dedupe) on the appliance",
          "readOnly": true
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of data stored in the cloud",
          "readOnly": true
        },
        "sparseIndexBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Size of the sparse index in bytes",
          "readOnly": true
        },
        "numItems": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items stored",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The protocol version for the store",
          "readOnly": true
        },
        "lastAccessedDate": {
          "type": "string",
          "description": "Date/time the cloud store was last accessed by a StoreOnce appliance",
          "readOnly": true,
          "format": "date-time"
        },
        "createdDate": {
          "type": "string",
          "description": "Date/time the cloud store was first created",
          "readOnly": true,
          "format": "date-time"
        },
        "attached": {
          "type": "boolean",
          "description": "True if cloud store is currently attached",
          "readOnly": true,
          "default": false
        },
        "markedForDeletion": {
          "type": "boolean",
          "description": "True if store is marked for deletion",
          "readOnly": true,
          "default": false
        },
        "recoverSerialNumber": {
          "type": "string",
          "description": "Serial number of the StoreOnce appliance currently connecting to the cloud store, blank if no connect in process.",
          "readOnly": true
        },
        "recoverStartDate": {
          "type": "string",
          "description": "Date/time the current connect process was started, blank if no connect in processs.",
          "readOnly": true,
          "format": "date-time"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Numerical value representing the status of the store.",
          "readOnly": true
        },
        "statusString": {
          "type": "string",
          "description": "Localised string representation of the status of the store.",
          "readOnly": true
        },
        "recoverEligibilityStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Numeric value representing if the store can be connected to in read write mode or the reason it can?t.",
          "readOnly": true
        },
        "recoverEligibilityStatusString": {
          "type": "string",
          "description": "Localised string representing the basic reason for the read write connect to be enabled/disabled.",
          "readOnly": true
        },
        "readOnlyConnectEligibilityStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Numeric value representing if the store can be connected to in read only mode or the reason it can?t.",
          "readOnly": true
        },
        "readOnlyConnectEligibilityStatusString": {
          "type": "string",
          "description": "\tLocalised string representing the basic reason for read only connect to be enabled/disabled.",
          "readOnly": true
        },
        "recoverDisabledReasonString": {
          "type": "string",
          "description": "Localised string indicating why the store is not eligible for read write connect. Blank if the store is eligible.",
          "readOnly": true
        },
        "readOnlyConnectDisabledReason": {
          "type": "string",
          "description": "Localised string indicating why the store is not eligible for read only connect. Blank if store is eligible.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatCloudStore"
      }
    },
    "CloudStorePostModel": {
      "type": "object",
      "required": [
        "cspVendor"
      ],
      "properties": {
        "cloudStoreId": {
          "type": "string",
          "description": "The UID for the cloud store if attached, otherwise not returned.",
          "readOnly": true
        },
        "cspVendor": {
          "type": "integer",
          "format": "int32",
          "minimum": 1.0,
          "maximum": 4.0
        },
        "cspProtocol": {
          "type": "integer",
          "format": "int32",
          "description": "Cloud service protocol"
        },
        "cspContainer": {
          "type": "string",
          "description": "Container name for attached cloud store."
        },
        "cspAuthenticationId": {
          "type": "string",
          "description": "Authentication ID for attached cloud store."
        },
        "cspAuthenticationVersion": {
          "type": "integer",
          "format": "int32",
          "description": "AWS Signature Version if a cloud store using Amazon S3 is attached."
        },
        "cspAddress": {
          "type": "string",
          "description": "Host address for cloud provider."
        },
        "cspPort": {
          "type": "integer",
          "format": "int32",
          "description": "Port for cloud provider."
        },
        "cspAddressingStyle": {
          "type": "integer",
          "format": "int32",
          "description": "Addressing style for S3 cloud provider."
        },
        "cspAddressingStyleString": {
          "type": "string",
          "description": "String representation of addressing style.",
          "readOnly": true
        },
        "attachReadOnlyEnabled": {
          "type": "boolean",
          "description": "True if the store is a cloud store attached in read only mode, false otherwise.",
          "default": false
        },
        "proxyConnectionEnabled": {
          "type": "boolean",
          "description": "True if proxy is to be used for connections to the cloud service provider, false if not",
          "default": false
        },
        "secureConnectionEnabled": {
          "type": "boolean",
          "description": "True if SSL is to used for connections to the cloud service provider, false if not.",
          "default": false
        },
        "cspAuthenticationKey": {
          "type": "string",
          "description": "Authentication Key for attached cloud store."
        }
      },
      "xml": {
        "name": "CloudStorePostModel"
      }
    },
    "CloudStorePutModel": {
      "type": "object",
      "properties": {
        "cspVendor": {
          "type": "integer",
          "format": "int32",
          "minimum": 1.0,
          "maximum": 4.0
        },
        "cspProtocol": {
          "type": "integer",
          "format": "int32",
          "description": "Cloud service protocol"
        },
        "cspContainer": {
          "type": "string",
          "description": "Container name for attached cloud store."
        },
        "cspAuthenticationId": {
          "type": "string",
          "description": "Authentication ID for attached cloud store."
        },
        "cspAuthenticationVersion": {
          "type": "integer",
          "format": "int32",
          "description": "AWS Signature Version if a cloud store using Amazon S3 is attached."
        },
        "cspAddress": {
          "type": "string",
          "description": "Host address for cloud provider."
        },
        "cspPort": {
          "type": "integer",
          "format": "int32",
          "description": "Port for cloud provider."
        },
        "cspAddressingStyle": {
          "type": "integer",
          "format": "int32",
          "description": "Addressing style for S3 cloud provider."
        },
        "cspAddressingStyleString": {
          "type": "string",
          "description": "String representation of addressing style.",
          "readOnly": true
        },
        "proxyConnectionEnabled": {
          "type": "boolean",
          "description": "True if proxy is to be used for connections to the cloud service provider, false if not",
          "default": false
        },
        "secureConnectionEnabled": {
          "type": "boolean",
          "description": "True if SSL is to used for connections to the cloud service provider, false if not.",
          "default": false
        },
        "cspAuthenticationKey": {
          "type": "string",
          "description": "Authentication Key for attached cloud store."
        }
      },
      "xml": {
        "name": "CloudStorePutModel"
      }
    },
    "CloudStoreSslCertificate": {
      "type": "object",
      "properties": {
        "subjectCommonName": {
          "type": "string",
          "description": "Self-signed certificate common name",
          "readOnly": true
        },
        "subjectOrganisation": {
          "type": "string",
          "description": "Self-signed certificate organisation name",
          "readOnly": true
        },
        "subjectOrganisationalUnit": {
          "type": "string",
          "description": "Self-signed certificate organisation unit"
        },
        "serialNumber": {
          "type": "string",
          "description": "Self-signed certificate serial number"
        },
        "issuerCommonName": {
          "type": "string",
          "description": "Self-signed certificate issuer name"
        },
        "issuerOrganisation": {
          "type": "string",
          "description": "Self-signed certificate issuer organisation"
        },
        "issuerOrganisationalUnit": {
          "type": "string",
          "description": "Self-signed certificate issuer organisation unit"
        },
        "certificateStartDate": {
          "type": "string",
          "description": "The date the certificate used for the cloud store is valid from.",
          "format": "date-time"
        },
        "certificateEndDate": {
          "type": "string",
          "description": "The date the certificate used for the cloud store is valid until.",
          "format": "date-time"
        },
        "sha1Fingerprint": {
          "type": "string",
          "description": "The SHA1 fingerprint of the certificate."
        },
        "sha256Fingerprint": {
          "type": "string",
          "description": "The SHA256 fingerprint of the certificate"
        }
      },
      "xml": {
        "name": "CloudStoreSslCertificate"
      }
    },
    "D2DBusinessException": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "messageKey": {
          "type": "string"
        },
        "catalog": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "message": {
          "type": "string"
        },
        "localizedMessage": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      }
    },
    "DataAndCopyJobsBytes": {
      "type": "object",
      "properties": {
        "datajobWrittenBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The total data size of the datajobs written"
        },
        "datajobReadBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The total data size of the datajobs read"
        },
        "inboundCopyjobsDataCopiedBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of bytes copied via inbound copyjobs transferred"
        },
        "outboundCopyjobsDataCopiedBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of bytes copied via outbound copyjobs transferred"
        }
      },
      "description": "Model for the Catalyst datajob and copyjob bytes"
    },
    "EncryptedKey": {
      "type": "object",
      "properties": {
        "encryptedKey": {
          "type": "string",
          "description": "Store UID, encryption key name and encryption key value encrypted using the supplied password",
          "readOnly": true
        }
      },
      "xml": {
        "name": "EncryptedKey"
      }
    },
    "ExtendedError": {
      "type": "object",
      "properties": {
        "severity": {
          "type": "string",
          "enum": [
            "OK",
            "Warning",
            "Critical"
          ]
        },
        "messageForCurrentLocale": {
          "type": "string",
          "xml": {
            "name": "message"
          }
        },
        "resolutionForCurrentLocale": {
          "type": "string",
          "xml": {
            "name": "resolution"
          }
        },
        "message": {
          "$ref": "#/definitions/MessageInfo"
        },
        "resolution": {
          "$ref": "#/definitions/MessageInfo"
        }
      },
      "xml": {
        "name": "extendedError"
      }
    },
    "ExternalDocs": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "MessageInfo": {
      "type": "object",
      "properties": {
        "catalogName": {
          "type": "string"
        },
        "messageKey": {
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "messageForCurrentLocale": {
          "type": "string"
        }
      },
      "xml": {
        "name": "messageInfo"
      }
    },
    "Property": {
      "type": "object",
      "properties": {
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "format": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "vendorExtensions": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "xml": {
          "$ref": "#/definitions/Xml"
        },
        "example": {
          "type": "object"
        },
        "readOnly": {
          "type": "boolean",
          "default": false
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Response": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "entity": {
          "type": "object"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "methodName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "className": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "StoreonceRestException": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "response": {
          "$ref": "#/definitions/Response"
        },
        "error": {
          "$ref": "#/definitions/ExtendedError"
        },
        "message": {
          "type": "string"
        },
        "localizedMessage": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      }
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "message": {
          "type": "string"
        },
        "localizedMessage": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      }
    },
    "Xml": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "attribute": {
          "type": "boolean",
          "default": false
        },
        "wrapped": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "BandwidthCalculator": {
      "type": "object",
      "required": [
        "limitPercentage",
        "numConcurrentJobs",
        "wanSpeedCustom",
        "wanSpeedEnum"
      ],
      "properties": {
        "wanSpeedEnum": {
          "type": "integer",
          "format": "int64",
          "description": "The bandwidth of the WAN connection, chosen from a list of enum values"
        },
        "wanSpeedCustom": {
          "type": "integer",
          "format": "int64",
          "description": "The user defined custom bandwidth of the WAN connection, used if custom is chosen for wanSpeedEnum"
        },
        "limitPercentage": {
          "type": "integer",
          "format": "int32",
          "description": "The percentage of the available WAN bandwidth that should be used"
        },
        "numConcurrentJobs": {
          "type": "integer",
          "format": "int32",
          "description": "The number of concurrent copy jobs the user expects to run"
        },
        "requestedLimitBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The calculated recommended bandwidth limit",
          "readOnly": true
        },
        "thresholdLimitBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The calculated threshold limit",
          "readOnly": true
        },
        "belowThreshold": {
          "type": "boolean",
          "description": "True if the recommended limit is lower than the threshold limit",
          "readOnly": true,
          "default": false
        }
      },
      "xml": {
        "name": "CatalystBandwidthCalculator"
      }
    },
    "BandwidthLimit": {
      "type": "object",
      "properties": {
        "generalBandwidthLimitEnabled": {
          "type": "boolean",
          "description": "True if the general bandwidth limit is enabled",
          "default": false
        },
        "generalBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the limit is enabled, the maximum bandwidth used by the StoreOnce Catalyst outbound copyjobs"
        },
        "currentBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the limit is enabled, the current bandwidth limit for the StoreOnce Catalyst outbound copyjobs",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatalystBandwidthLimit"
      }
    },
    "BandwidthWindow": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day ID",
          "readOnly": true
        },
        "dayString": {
          "type": "string",
          "description": "Localised string for the day",
          "readOnly": true
        },
        "timeOffset": {
          "type": "string",
          "example": "+01:00",
          "description": "Timezone offset for the window times",
          "readOnly": true
        },
        "primaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the primary window is enabled",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the primary bandwidth limit. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the primary bandwidth limit. In system time"
        },
        "primaryWindowBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the primary window"
        },
        "secondaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the secondary bandwidth limit. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the secondary bandwidth limit. In system time"
        },
        "secondaryWindowBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the secondary window"
        }
      },
      "xml": {
        "name": "CatalystBandwidthWindow"
      }
    },
    "BlackoutNow": {
      "type": "object",
      "required": [
        "blackoutNow"
      ],
      "properties": {
        "blackoutActive": {
          "type": "boolean",
          "description": "Status of blackout. True if blackout active, False if not",
          "readOnly": true,
          "default": false
        },
        "blackoutNow": {
          "type": "boolean",
          "description": "Blanket blackout that takes precedence over any blackout windows until further notice",
          "default": false
        },
        "blackoutReason": {
          "type": "integer",
          "format": "int32",
          "description": "Reason for blackout.",
          "readOnly": true
        },
        "blackoutReasonString": {
          "type": "string",
          "description": "Localisable string representing Reason for blackout.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatalystBlackoutNow"
      }
    },
    "BlackoutWindow": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day ID",
          "readOnly": true
        },
        "dayString": {
          "type": "string",
          "description": "Localised string for the day",
          "readOnly": true
        },
        "timeOffset": {
          "type": "string",
          "example": "+01:00",
          "description": "Timezone offset for the window times",
          "readOnly": true
        },
        "primaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the primary window is enabled",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "13:00",
          "description": "Start time for the primary window. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "13:00",
          "description": "End time for the primary window. In system time"
        },
        "secondaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "13:00",
          "description": "Start time for the secondary window. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "13:00",
          "description": "End time for the secondary window. In system time"
        }
      },
      "xml": {
        "name": "CatalystBlackoutWindow"
      }
    },
    "Client": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the client",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the client",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description of the client"
        },
        "passwordSet": {
          "type": "boolean",
          "description": "Is set to true if the client's password has been set",
          "readOnly": true,
          "default": false
        }
      },
      "xml": {
        "name": "CatalystClient"
      }
    },
    "CloudBandwidthLimit": {
      "type": "object",
      "properties": {
        "generalUploadBandwidthLimitEnabled": {
          "type": "boolean",
          "description": "True if the general upload bandwidth limit is enabled",
          "default": false
        },
        "generalUploadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the upload limit is enabled, the maximum upload bandwidth used by StoreOnce Catalyst CloudBank"
        },
        "currentUploadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the upload limit is enabled, the current upload bandwidth limit for StoreOnce Catalyst CloudBank",
          "readOnly": true
        },
        "generalDownloadBandwidthLimitEnabled": {
          "type": "boolean",
          "description": "True if the general download bandwidth limit is enabled",
          "default": false
        },
        "generalDownloadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the download limit is enabled, the maximum download bandwidth used by StoreOnce Catalyst CloudBank"
        },
        "currentDownloadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the download is enabled, the current download bandwidth limit for StoreOnce Catalyst CloudBank",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatalystCloudBandwidthLimit"
      }
    },
    "CofcDevice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the CoFC Device",
          "readOnly": true
        },
        "deviceName": {
          "type": "string",
          "description": "Name of the CoFC device",
          "readOnly": true
        },
        "fcAddress": {
          "type": "string",
          "description": "Fibre channel address of the CoFC Device",
          "readOnly": true
        },
        "wwpn": {
          "type": "string",
          "description": "World wide port name of the CoFC Device",
          "readOnly": true
        },
        "wwnn": {
          "type": "string",
          "description": "World wide node name of the CoFC Device",
          "readOnly": true
        },
        "numLogins": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logins for the CoFC Device",
          "readOnly": true
        },
        "numLuns": {
          "type": "integer",
          "format": "int32",
          "description": "Number of Logical Unit Numbers the device presents"
        },
        "fcDeviceStatusInfo": {
          "type": "integer",
          "format": "int32",
          "description": "Reason fcAddress was not acquired. Only returned when fcAddress not acquired",
          "readOnly": true
        },
        "fcDeviceStatusInfoString": {
          "type": "string",
          "description": "Localised string representing the device status info",
          "readOnly": true
        },
        "fcDeviceStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Current status of the CoFC Device",
          "readOnly": true
        },
        "fcDeviceStatusString": {
          "type": "string",
          "description": "Localised string representing the device status",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatalystCofcDevice"
      }
    },
    "CofcDeviceLogin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Login unique identifier",
          "readOnly": true
        },
        "fcAddress": {
          "type": "string",
          "description": "Fibre channel address of the CoFC Device",
          "readOnly": true
        },
        "wwpn": {
          "type": "string",
          "description": "World wide port name of the CoFC Device",
          "readOnly": true
        },
        "wwnn": {
          "type": "string",
          "description": "World wide node name of the CoFC Device",
          "readOnly": true
        },
        "operatingSystem": {
          "type": "integer",
          "format": "int32",
          "description": "Operating System of the CoFC Device",
          "readOnly": true
        },
        "operatingSystemString": {
          "type": "string",
          "description": "Localised string representation of Operating System",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatalystCofcDeviceLogin"
      }
    },
    "CofcIdentifier": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The Catalyst over fibre channel identifier",
          "readOnly": true
        },
        "identifierAlias": {
          "type": "string",
          "description": "The Catalyst over fibre channel identifier alias"
        }
      },
      "xml": {
        "name": "CatalystCofcIdentifier"
      }
    },
    "CofcInitiator": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "ID of the CoFC Initiator",
          "readOnly": true
        },
        "deviceName": {
          "type": "string",
          "description": "Name for the initiator",
          "readOnly": true
        },
        "fcAddress": {
          "type": "string",
          "description": "Fibre Channel address of each Catalyst initiator presented.",
          "readOnly": true
        },
        "wwpn": {
          "type": "string",
          "description": "World wide port name of the CoFC initiator",
          "readOnly": true
        },
        "wwnn": {
          "type": "string",
          "description": "World wide node name of the CoFC initiator",
          "readOnly": true
        },
        "fcDeviceStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Current status of the CoFC initiator",
          "readOnly": true
        },
        "fcDeviceStatusString": {
          "type": "string",
          "description": "Localised string representing the initiator status",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatalystCofcInitiator"
      }
    },
    "CofcRemoteHost": {
      "type": "object",
      "properties": {
        "wwpnStart": {
          "type": "string",
          "description": "Starting World Wide Port Name"
        },
        "wwpnEnd": {
          "type": "string",
          "description": "Ending World Wide Port Name"
        },
        "operatingSystem": {
          "type": "integer",
          "format": "int32",
          "description": "Remote host operating system"
        },
        "operatingSystemString": {
          "type": "string",
          "description": "Localised String for the remote host operating system",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatalystCofcRemoteHost"
      }
    },
    "CopyJobFilter": {
      "type": "object",
      "properties": {
        "filters": {
          "description": "Catalyst copy job filter settings for the search",
          "$ref": "#/definitions/CopyjobFilters"
        },
        "orderAscending": {
          "type": "boolean",
          "description": "True if this filter orders the data in ascending date, otherwise descending",
          "default": false
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of items returned by the search using this filter"
        },
        "waypoint": {
          "type": "string",
          "description": "Waypoint to navigate the data returned using this filter"
        }
      },
      "xml": {
        "name": "CatalystCopyJobFilter"
      }
    },
    "DataJobFilter": {
      "type": "object",
      "properties": {
        "filters": {
          "description": "Catalyst copy job filter settings for the search",
          "$ref": "#/definitions/DatajobFilters"
        },
        "orderAscending": {
          "type": "boolean",
          "description": "True if this filter orders the data in ascending date, otherwise descending",
          "default": false
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of items returned by the search using this filter"
        },
        "catDatajobFilters": {
          "description": "Catalyst data job filter settings for the search",
          "$ref": "#/definitions/DatajobFilters"
        }
      },
      "xml": {
        "name": "CatalystDatajobFilter"
      }
    },
    "ItemFilter": {
      "type": "object",
      "properties": {
        "orderAscending": {
          "type": "boolean",
          "description": "True if this filter orders the data in ascending date, otherewise descending",
          "default": false
        },
        "metaDataIncluded": {
          "type": "boolean",
          "description": "True if this filter returns item meta data",
          "default": false
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of items returned by the search using this filter"
        },
        "filters": {
          "description": "Catalyst store items filter settings for the search",
          "$ref": "#/definitions/ItemFilters"
        },
        "waypoint": {
          "type": "string",
          "description": "Waypoint to navigate the data returned using this filter"
        }
      },
      "xml": {
        "name": "CatalystItemFilter"
      }
    },
    "Service": {
      "type": "object",
      "properties": {
        "healthLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The health level of the service",
          "readOnly": true
        },
        "healthLevelString": {
          "type": "string",
          "description": "Localised string representing the health level",
          "readOnly": true
        },
        "catStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of the service",
          "readOnly": true
        },
        "catStatusString": {
          "type": "string",
          "description": "Localised string representing the service status",
          "readOnly": true
        },
        "maxOutboundCopyJobs": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum concurrent outbound copyjobs that can occur"
        },
        "maxDataAndInboundCopyJobs": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum concurrent data and inbound copyjobs that can occur"
        },
        "maxProtocolVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum protocol version supported",
          "readOnly": true
        },
        "minProtocolVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Minimum protocol version supported",
          "readOnly": true
        },
        "numRemainingStores": {
          "type": "integer",
          "format": "int32",
          "description": "Number of stores which can be created on this service set",
          "readOnly": true
        },
        "cofcSupported": {
          "type": "boolean",
          "description": "True if Catalyst over fibre channel is supported on this device",
          "readOnly": true,
          "default": false
        },
        "numInboundCopyjobSessions": {
          "type": "integer",
          "format": "int32",
          "description": "Number of active inbound copy jobs on the appliance",
          "readOnly": true
        },
        "numOutboundCopyjobSessions": {
          "type": "integer",
          "format": "int32",
          "description": "Number of active outbound copy jobs on the appliance",
          "readOnly": true
        },
        "numDataJobSessions": {
          "type": "integer",
          "format": "int32",
          "description": "Number of active data jobs on the appliance",
          "readOnly": true
        },
        "cloudCapacityBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Total capacity licensed for cloud storage (in bytes)",
          "readOnly": true
        },
        "cloudDiskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of capacity used (post dedupe) in the cloud (in bytes)",
          "readOnly": true
        },
        "cloudFreeBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of licensed free space in the cloud (in bytes)",
          "readOnly": true
        },
        "cloudUserBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of data stored in the cloud (in bytes )",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatalystService"
      }
    },
    "Store": {
      "type": "object",
      "required": [
        "copyJobRetentionDays",
        "dataJobRetentionDays",
        "encryptionEnabled",
        "name",
        "primaryTransferPolicy",
        "secondaryTransferPolicy"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID for this store",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the store"
        },
        "description": {
          "type": "string",
          "description": "Description of the store"
        },
        "createdDate": {
          "type": "string",
          "description": "Date the store was created",
          "readOnly": true,
          "format": "date-time"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Protocol version of the store",
          "readOnly": true
        },
        "variableBlockDedupeSupported": {
          "type": "boolean",
          "description": "True if the store supports variable block dedupe storage mode",
          "readOnly": true,
          "default": false
        },
        "fixedBlockDedupeSupported": {
          "type": "boolean",
          "description": "True if the store supports fixed block dedupe storage mode",
          "readOnly": true,
          "default": false
        },
        "noDedupeSupported": {
          "type": "boolean",
          "description": "True if the store supports no dedupe storage mode",
          "readOnly": true,
          "default": false
        },
        "sparseWriteSupported": {
          "type": "boolean",
          "description": "True if the store supports sparse writes",
          "readOnly": true,
          "default": false
        },
        "writeInPlaceSupported": {
          "type": "boolean",
          "description": "True if the store supports write in place",
          "readOnly": true,
          "default": false
        },
        "rawReadWriteSupported": {
          "type": "boolean",
          "description": "True if the store supports raw read write",
          "readOnly": true,
          "default": false
        },
        "multipleObjectOpenersSupported": {
          "type": "boolean",
          "description": "True if the store supports multiple object openers",
          "readOnly": true,
          "default": false
        },
        "multipleObjectWritesSupported": {
          "type": "boolean",
          "description": "True if the store supports multiple object writers",
          "readOnly": true,
          "default": false
        },
        "cloneExtentSupported": {
          "type": "boolean",
          "description": "True if the store supports extent cloning",
          "readOnly": true,
          "default": false
        },
        "primaryTransferPolicy": {
          "type": "integer",
          "format": "int32",
          "description": "Primary transfer policy for this store's jobs"
        },
        "primaryTransferPolicyString": {
          "type": "string",
          "description": "Localised string representation of the primary transfer policy",
          "readOnly": true
        },
        "secondaryTransferPolicy": {
          "type": "integer",
          "format": "int32",
          "description": "Secondary transfer policy for this store's jobs"
        },
        "secondaryTransferPolicyString": {
          "type": "string",
          "description": "Localised string representation of the secondary transfer policy",
          "readOnly": true
        },
        "sizeOnDiskQuotaEnabled": {
          "type": "boolean",
          "description": "True if quota policy for size on disk is enabled",
          "default": false
        },
        "sizeOnDiskQuotaBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Size on disk quota limit policy"
        },
        "userDataStoredQuotaEnabled": {
          "type": "boolean",
          "description": "True if quota policy for user data is enabled",
          "default": false
        },
        "userDataStoredQuotaBytes": {
          "type": "integer",
          "format": "int64",
          "description": "User data quota limit policy"
        },
        "dataJobRetentionDays": {
          "type": "integer",
          "format": "int64",
          "description": "Datajob log retention period in days"
        },
        "copyJobRetentionDays": {
          "type": "integer",
          "format": "int64",
          "description": "Copyjob log retention period in days"
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The total size of the user data that has been stored",
          "readOnly": true
        },
        "diskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The actual size of the deduped user data stored on disk",
          "readOnly": true
        },
        "dedupeRatio": {
          "type": "number",
          "format": "float",
          "description": "Dedupe ratio of the store",
          "readOnly": true
        },
        "numItems": {
          "type": "integer",
          "format": "int64",
          "description": "The number of Catalyst items associated with the store",
          "readOnly": true
        },
        "numDataJobs": {
          "type": "integer",
          "format": "int64",
          "description": "The number of Catalyst datajobs associated with the store",
          "readOnly": true
        },
        "numInboundCopyJobs": {
          "type": "integer",
          "format": "int64",
          "description": "The number of inbound Catalyst copyjobs associated with the store",
          "readOnly": true
        },
        "numOutboundCopyJobs": {
          "type": "integer",
          "format": "int64",
          "description": "The number of outbound Catalyst copyjobs associated with the store",
          "readOnly": true
        },
        "healthLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The store health",
          "readOnly": true
        },
        "healthLevelString": {
          "type": "string",
          "description": "Localised representation of the store health",
          "readOnly": true
        },
        "storeStatus": {
          "type": "integer",
          "format": "int32",
          "description": "The store status",
          "readOnly": true
        },
        "storeStatusString": {
          "type": "string",
          "description": "Localised representation of the store status",
          "readOnly": true
        },
        "encryptionEnabled": {
          "type": "boolean",
          "description": "True if the store is encrypted",
          "default": false
        },
        "secureEraseModeString": {
          "type": "string",
          "description": "Localised representation of the store erase mode",
          "readOnly": true
        },
        "secureEraseMode": {
          "type": "integer",
          "format": "int32",
          "description": "The store erase mode"
        },
        "modifiedDate": {
          "type": "string",
          "description": "The date the store was last modified",
          "readOnly": true,
          "format": "date-time"
        },
        "dedupeStoreId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID for the dedupe store associated with this store",
          "readOnly": true
        },
        "securityMode": {
          "type": "integer",
          "format": "int32",
          "description": "The stores security mode",
          "readOnly": true
        },
        "securityModeString": {
          "type": "string",
          "description": "The string representation of the stores security mode",
          "readOnly": true
        },
        "dataImmutabilityGraceEnabled": {
          "type": "boolean",
          "description": "True if a grace period for data immutability has been enabled",
          "default": false
        },
        "dataImmutabilityGraceSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum amount of time in seconds the backup data is immutable"
        },
        "dataImmutabilityRetentionSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of time in seconds the backup data is immutable"
        },
        "dataImmutabilityRetentionEnabled": {
          "type": "boolean",
          "description": "True if a retention period for data immutability has been enabled",
          "default": false
        },
        "dataImmutabilityMaxISVRetentionSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of time in seconds the ISV backup data can be immutable"
        },
        "aligned4KBoverrideEnabled": {
          "type": "boolean",
          "description": "True will force Catalyst client to use fixed 4KB chunking on Veeam files",
          "default": false
        },
        "sslCertificate": {
          "type": "string",
          "description": "SSL certificate details to use for the relevant cloud provider."
        },
        "cloudStoreEnabled": {
          "type": "boolean",
          "description": "Flag telling whether it's a cloud store",
          "default": false
        },
        "cloudStoreDetails": {
          "description": "Details of the attached cloud store",
          "$ref": "#/definitions/CloudStore"
        }
      },
      "xml": {
        "name": "CatalystStore"
      }
    },
    "StoreCopyJob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "ID for this copyjob",
          "readOnly": true
        },
        "clientIpAddress": {
          "type": "string",
          "description": "The IP address of the client that created this copyjob",
          "readOnly": true
        },
        "clientId": {
          "type": "string",
          "example": "Client1",
          "description": "A string representing the client that created this copyjob",
          "readOnly": true
        },
        "applicationId": {
          "type": "string",
          "example": "HPDataProtector",
          "description": "String representing the application that was used to create this copyjob",
          "readOnly": true
        },
        "jobReference": {
          "type": "string",
          "description": "Reference given to this copyjob",
          "readOnly": true
        },
        "queuedDate": {
          "type": "string",
          "description": "The date that the source object was queued to be copied",
          "readOnly": true,
          "format": "date-time"
        },
        "startedDate": {
          "type": "string",
          "description": "The date that the source object last started to copy",
          "readOnly": true,
          "format": "date-time"
        },
        "endedDate": {
          "type": "string",
          "description": "The date that the source object stopped copying",
          "readOnly": true,
          "format": "date-time"
        },
        "jobStatus": {
          "type": "integer",
          "format": "int32",
          "description": "The status of the completed copyjob"
        },
        "jobStatusString": {
          "type": "string",
          "description": "Localised string representing the status of the completed copyjob"
        },
        "jobStatusCode": {
          "type": "integer",
          "format": "int32",
          "description": "A numeric value for the status of the copy job. Provides further info for the status of the job."
        },
        "lastPauseCancelReason": {
          "type": "integer",
          "format": "int32",
          "description": "The most recent reason the copyjob was paused or cancelled"
        },
        "lastPauseCancelReasonString": {
          "type": "string",
          "description": "Localised string representing the most recent reason the copyjob was paused or cancelled"
        },
        "lastFailedRunReason": {
          "type": "integer",
          "format": "int32",
          "description": "The most recent reason why the copyjob failed to run"
        },
        "lastFailedRunReasonString": {
          "type": "string",
          "description": "Localised string representing the most recent reason why the copyjob failed to run"
        },
        "jobStatusInfo": {
          "type": "integer",
          "format": "int32",
          "description": "The most recent reason why the copyjob failed to run or was paused or cancelled"
        },
        "jobStatusInfoString": {
          "type": "string",
          "description": "Localised string representing the most recent reason why the copyjob failed to run or was paused or cancelled"
        },
        "failedAttempts": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times the copyjob has been attempted but failed to complete"
        },
        "lastAttemptDate": {
          "type": "string",
          "description": "The date that the copyjob was last attempted ",
          "format": "date-time"
        },
        "nextAttemptDate": {
          "type": "string",
          "description": "The date that the copyjob will next be attempted ",
          "format": "date-time"
        },
        "markedForCancellation": {
          "type": "boolean",
          "description": "True if the copyjob has been marked to be cancelled",
          "default": false
        },
        "cancellable": {
          "type": "boolean",
          "description": "True if this copyjob is able to be cancelled",
          "default": false
        },
        "dataCopiedBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the data that has been copied so far"
        },
        "percentageComplete": {
          "type": "number",
          "format": "double",
          "description": "The percentage of the copy complete so far"
        },
        "estimatedCompletionDate": {
          "type": "string",
          "description": "The estimated date that the copyjob will complete",
          "format": "date-time"
        },
        "jobDurationSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The duration that the copyjob ran for, excluding queued/paused time"
        },
        "writtenDiskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the data written for this data job"
        },
        "writeDedupeRatio": {
          "type": "number",
          "format": "double",
          "description": "The dedupe ratio of the write data"
        },
        "copyDataTransmittedBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the read data transferred for this data job"
        },
        "copyNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The bandwidth utilization of this copyjob"
        },
        "percentageCopyBandwidthSaving": {
          "type": "number",
          "format": "double",
          "description": "The bandwidth saving of the copy data"
        },
        "copyLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The copy throughput (in bytes/sec) of this copyjob"
        },
        "transportProtocol": {
          "type": "integer",
          "format": "int32",
          "description": "The transport protocol of the job"
        },
        "transportProtocolString": {
          "type": "string",
          "description": "Localised representation of the transport protocol of the job"
        },
        "destinationClientSecurityMode": {
          "type": "integer",
          "format": "int32",
          "description": "A numeric value for the security mode of the destination client."
        },
        "destinationClientSecurityModeString": {
          "type": "string",
          "description": "String representation of the security mode of the destination client."
        },
        "originClientSecurityMode": {
          "type": "integer",
          "format": "int32",
          "description": "A numeric value for the security mode of the origin client."
        },
        "originClientSecurityModeString": {
          "type": "string",
          "description": "String representation of the security mode of the origin client."
        },
        "origin": {
          "description": "Information about the origin of the job",
          "$ref": "#/definitions/StoreCopyJobOrigin"
        },
        "destination": {
          "description": "Information about the destination of the job",
          "$ref": "#/definitions/StoreCopyJobDestination"
        }
      },
      "xml": {
        "name": "CatalystStoreCopyJob"
      }
    },
    "StoreCopyJobDestination": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Unique ID for the copyjob at the destination"
        },
        "address": {
          "type": "string",
          "description": "The IP Address or FQDN of the destination appliance"
        },
        "serialNumber": {
          "type": "string",
          "description": "The serial number of the destination appliance"
        },
        "commandPort": {
          "type": "integer",
          "format": "int32",
          "description": "The command port for the destination appliance"
        },
        "dataPort": {
          "type": "integer",
          "format": "int32",
          "description": "The data port for the destination appliance"
        },
        "storeName": {
          "type": "string",
          "description": "The name of the destination store"
        },
        "itemName": {
          "type": "string",
          "description": "The name of the destination item"
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the target item when it was last flushed"
        },
        "copyOffsetBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The offset within the target item from which to start the copy"
        }
      }
    },
    "StoreCopyJobOrigin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Unique ID for the copyjob at the origin"
        },
        "address": {
          "type": "string",
          "description": "The IP Address or FQDN of the source appliance"
        },
        "serialNumber": {
          "type": "string",
          "description": "The serial number of the source appliance"
        },
        "storeName": {
          "type": "string",
          "description": "The name of the source store"
        },
        "itemName": {
          "type": "string",
          "description": "The name of the source item"
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the source item"
        },
        "dataModifiedDate": {
          "type": "string",
          "description": "The date that the source object was last modified",
          "format": "date-time"
        },
        "copySizeBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the data to be copied"
        },
        "copyOffsetBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The offset within the source item from which to start the copy"
        },
        "fixedBlockSizeBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the fixed block dedupe"
        },
        "storageMode": {
          "type": "integer",
          "format": "int32",
          "description": "Storage mode"
        },
        "storageModeString": {
          "type": "string",
          "description": "Localised representation of the storage mode"
        }
      }
    },
    "StoreDatajob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "ID for this datajob"
        },
        "name": {
          "type": "string",
          "description": "The name of the Catalyst item being accessed"
        },
        "jobStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Basic status of the datajob"
        },
        "jobStatusString": {
          "type": "string",
          "description": "Localised representation of the basic status of the datajob"
        },
        "jobStatusInfo": {
          "type": "integer",
          "format": "int32",
          "description": "Further status information associated with this datajob"
        },
        "jobStatusInfoString": {
          "type": "string",
          "description": "Localised string representation of the further status information associated with this datajob"
        },
        "jobStatusCode": {
          "type": "integer",
          "format": "int32",
          "description": "The status code of the completed datajob. Provides a more detailed reason why the job has failed"
        },
        "jobDurationSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The duration of the data session"
        },
        "writtenUserBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the data written for this datajob"
        },
        "writtenDiskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the data written to disk for this datajob"
        },
        "writeDurationSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The duration of the write operation for this datajob"
        },
        "writeLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The write logical throughput (in bytes/sec) of this datajob"
        },
        "writeTransferredBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the write data transferred for this datajob"
        },
        "writeNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The write bandwidth utilization of this datajob in (in bytes/sec)"
        },
        "percentageWriteBandwidthSaving": {
          "type": "number",
          "format": "double",
          "description": "The bandwidth saving of the write data"
        },
        "writeDedupeRatio": {
          "type": "number",
          "format": "float",
          "description": "The dedupe ratio of the write data"
        },
        "readUserBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The data read for this datajob"
        },
        "readDiskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the data read from disk for this datajob"
        },
        "readDurationSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The duration of the data read for this datajob"
        },
        "readLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The read logical throughput (in bytes/sec) of this datajob"
        },
        "readTransferredBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the read data transferred for this datajob"
        },
        "readNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The read bandwidth utilization of this datajob (in bytes/sec)"
        },
        "percentageReadBandwidthSaving": {
          "type": "number",
          "format": "double",
          "description": "The bandwidth saving of the read data"
        },
        "readDedupeRatio": {
          "type": "number",
          "format": "float",
          "description": "The dedupe ratio of the read data"
        },
        "cloneDurationSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The duration of the data clone for this datajob"
        },
        "cloneThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The clone throughput (in bytes/sec) of this datajob"
        },
        "clonedUserBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the clone data written for this datajob"
        },
        "clientIpAddress": {
          "type": "string",
          "description": "The IP address of the client that created this datajob"
        },
        "clientId": {
          "type": "string",
          "example": "Client1",
          "description": "The client that created this datajob"
        },
        "applicationId": {
          "type": "string",
          "example": "HPDataProtector",
          "description": "The application that was used to create this datajob"
        },
        "jobReference": {
          "type": "string",
          "description": "An optional internal job reference from the backup application"
        },
        "startedDate": {
          "type": "string",
          "description": "The date that this datajob was started",
          "format": "date-time"
        },
        "endedDate": {
          "type": "string",
          "description": "The date that this datajob ended if applicable",
          "format": "date-time"
        },
        "itemUserBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the Item, including any sparse regions"
        },
        "transportProtocol": {
          "type": "integer",
          "format": "int32",
          "description": "The jobs transport protocol"
        },
        "transportProtocolString": {
          "type": "string",
          "description": "Localised representation of the transport protocol"
        },
        "percentageTotalBandwidthSaving": {
          "type": "number",
          "format": "double",
          "description": "The total bandwidth saving of the read and write data"
        },
        "totalNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "The total logical throughput (in bytes/sec) of this datajob"
        }
      },
      "xml": {
        "name": "CatalystStoreDatajob"
      }
    },
    "StoreItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Item ID",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name given to this item",
          "readOnly": true
        },
        "createdDate": {
          "type": "string",
          "description": "Date the item was created",
          "readOnly": true,
          "format": "date-time"
        },
        "itemState": {
          "type": "integer",
          "format": "int32",
          "description": "Current status of the item",
          "readOnly": true
        },
        "itemStateString": {
          "type": "string",
          "description": "Localised string representation of the status of the item",
          "readOnly": true
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Size of the item in bytes including sparse regions",
          "readOnly": true
        },
        "metaModifiedDate": {
          "type": "string",
          "description": "Date the metadata was last modified",
          "readOnly": true,
          "format": "date-time"
        },
        "metaDataSizeBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Decoded size of the metadata",
          "readOnly": true
        },
        "dataModifiedDate": {
          "type": "string",
          "description": "Date the item data was last modified",
          "format": "date-time"
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Date the item data or item meta was last modified",
          "format": "date-time"
        },
        "metaData": {
          "type": "string",
          "description": "Optional ISV metadata",
          "readOnly": true
        },
        "tagList": {
          "type": "string",
          "description": "Space seperated list of item tags",
          "readOnly": true
        },
        "storageMode": {
          "type": "integer",
          "format": "int32",
          "description": "Storage mode of the item",
          "readOnly": true
        },
        "storageModeString": {
          "type": "string",
          "description": "Localised string representation of the storage mode of the item",
          "readOnly": true
        },
        "fixedBlockSizeBytes": {
          "type": "integer",
          "format": "int64",
          "description": " The size, in bytes, of the fixed block dedupe",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "Version of the item",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatalystStoreItem"
      }
    },
    "StoreUsageSummary": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "The name of the vendor"
        },
        "numItems": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items that have been created and haven't been deleted"
        },
        "numDatajobsStarted": {
          "type": "integer",
          "format": "int64",
          "description": "The number of Datajobs that have been started"
        },
        "numInboundCopyjobsStarted": {
          "type": "integer",
          "format": "int64",
          "description": "The number of Inbound Copyjobs that have been started"
        },
        "numOutboundCopyjobsStarted": {
          "type": "integer",
          "format": "int64",
          "description": "The number of Outbound Copyjobs that have been started"
        },
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The total size of the user data that has been  stored (before dedupe)"
        },
        "tcpIp": {
          "description": "TCP IP data transfer statistics",
          "$ref": "#/definitions/DataAndCopyJobsBytes"
        },
        "fc": {
          "description": "FC data transfer statistics",
          "$ref": "#/definitions/DataAndCopyJobsBytes"
        }
      },
      "description": "Model for the Catalyst store usage summaries",
      "xml": {
        "name": "CatalystStoreUsageSummary"
      }
    },
    "BandwidthLimitPutModel": {
      "type": "object",
      "properties": {
        "generalBandwidthLimitEnabled": {
          "type": "boolean",
          "description": "True if the general bandwidth limit is enabled",
          "default": false
        },
        "generalBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the limit is enabled, the maximum bandwidth used by the StoreOnce Catalyst outbound copyjobs"
        }
      },
      "xml": {
        "name": "CatBandwidthLimitPutModel"
      }
    },
    "BandwidthWindowPutModel": {
      "type": "object",
      "properties": {
        "primaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the primary window is enabled",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the primary bandwidth limit. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the primary bandwidth limit. In system time"
        },
        "primaryWindowBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the primary window"
        },
        "secondaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the secondary bandwidth limit. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the secondary bandwidth limit. In system time"
        },
        "secondaryWindowBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the secondary window"
        }
      },
      "xml": {
        "name": "CatBandwidthWindowPutModel"
      }
    },
    "BandwidthWindowsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/BandwidthWindow"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "BlackoutNowPutModel": {
      "type": "object",
      "required": [
        "blackoutNow"
      ],
      "properties": {
        "blackoutActive": {
          "type": "boolean",
          "description": "Status of blackout. True if blackout active, False if not",
          "readOnly": true,
          "default": false
        },
        "blackoutNow": {
          "type": "boolean",
          "description": "Blanket blackout that takes precedence over any blackout windows until further notice",
          "default": false
        },
        "blackoutReason": {
          "type": "integer",
          "format": "int32",
          "description": "Reason for blackout.",
          "readOnly": true
        },
        "blackoutReasonString": {
          "type": "string",
          "description": "Localisable string representing Reason for blackout.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatBlackoutNowPutModel"
      }
    },
    "BlackoutWindowPutModel": {
      "type": "object",
      "properties": {
        "primaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the primary window is enabled",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "13:00",
          "description": "Start time for the primary window. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "13:00",
          "description": "End time for the primary window. In system time"
        },
        "secondaryWindowEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "13:00",
          "description": "Start time for the secondary window. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "13:00",
          "description": "End time for the secondary window. In system time"
        }
      },
      "xml": {
        "name": "CatBlackoutWindowPutModel"
      }
    },
    "BlackoutWindowsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/BlackoutWindow"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "ClientPostModel": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the client"
        },
        "description": {
          "type": "string",
          "description": "Description of the client"
        },
        "password": {
          "type": "string",
          "description": "Write-only password field"
        }
      },
      "xml": {
        "name": "CatClientPostModel"
      }
    },
    "ClientPutModel": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the client"
        },
        "password": {
          "type": "string",
          "description": "Write-only password field"
        }
      },
      "xml": {
        "name": "CatClientPutModel"
      }
    },
    "ClientsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/Client"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "CloudBandwidthLimitPutModel": {
      "type": "object",
      "properties": {
        "generalUploadBandwidthLimitEnabled": {
          "type": "boolean",
          "description": "True if the general upload bandwidth limit is enabled",
          "default": false
        },
        "generalUploadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the upload limit is enabled, the maximum upload bandwidth used by the StoreOnce Catalyst outbound copyjobs"
        },
        "generalDownloadBandwidthLimitEnabled": {
          "type": "boolean",
          "description": "True if the general download bandwidth limit is enabled",
          "default": false
        },
        "generalDownloadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "If the download limit is enabled, the maximum download bandwidth used by the StoreOnce Catalyst outbound copyjobs"
        }
      },
      "xml": {
        "name": "CatCloudBandwidthLimitPutModel"
      }
    },
    "CloudBandwidthWindowModel": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day ID",
          "readOnly": true
        },
        "dayString": {
          "type": "string",
          "description": "Localised string for the day",
          "readOnly": true
        },
        "timeOffset": {
          "type": "string",
          "example": "+01:00",
          "description": "Timezone offset for the window times",
          "readOnly": true
        },
        "primaryWindowUploadLimitEnabled": {
          "type": "boolean",
          "description": "Whether the primary window upload limit is enabled",
          "default": false
        },
        "primaryWindowDownloadLimitEnabled": {
          "type": "boolean",
          "description": "Whether the primary window download limit is enabled",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the primary bandwidth limit. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the primary bandwidth limit. In system time"
        },
        "primaryWindowUploadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the primary window upload"
        },
        "primaryWindowDownloadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the primary window download"
        },
        "secondaryWindowUploadLimitEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window upload limit is enabled",
          "default": false
        },
        "secondaryWindowDownloadLimitEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window download limit is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the primary bandwidth limit. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the secondary bandwidth limit. In system time"
        },
        "secondaryWindowUploadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the secondary window upload"
        },
        "secondaryWindowDownloadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the secondary window download"
        }
      },
      "xml": {
        "name": "CatCloudBandwidthWindowModel"
      }
    },
    "CloudBandwidthWindowPutModel": {
      "type": "object",
      "properties": {
        "primaryWindowUploadLimitEnabled": {
          "type": "boolean",
          "description": "Whether the primary window upload limit is enabled",
          "default": false
        },
        "primaryWindowDownloadLimitEnabled": {
          "type": "boolean",
          "description": "Whether the primary window download limit is enabled",
          "default": false
        },
        "primaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the primary bandwidth limit. In system time"
        },
        "primaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the primary bandwidth limit. In system time"
        },
        "primaryWindowUploadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the primary window upload"
        },
        "primaryWindowDownloadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the primary window download"
        },
        "secondaryWindowUploadLimitEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window upload limit is enabled",
          "default": false
        },
        "secondaryWindowDownloadLimitEnabled": {
          "type": "boolean",
          "description": "Whether the secondary window download limit is enabled",
          "default": false
        },
        "secondaryWindowStartTime": {
          "type": "string",
          "example": "09:00",
          "description": "Start time for the primary bandwidth limit. In system time"
        },
        "secondaryWindowEndTime": {
          "type": "string",
          "example": "09:00",
          "description": "End time for the secondary bandwidth limit. In system time"
        },
        "secondaryWindowUploadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the secondary window upload"
        },
        "secondaryWindowDownloadBandwidthLimit": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth limit for the secondary window download"
        }
      },
      "xml": {
        "name": "CatCloudBandwidthWindowPutModel"
      }
    },
    "CloudBandwidthWindowsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/CloudBandwidthWindowModel"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "CloudConnectivity": {
      "type": "object",
      "properties": {
        "validProxy": {
          "type": "boolean",
          "description": "True if connection to cloud provider does not return proxy error",
          "readOnly": true,
          "default": false
        },
        "validHost": {
          "type": "boolean",
          "description": "True if host address/port can be reached",
          "readOnly": true,
          "default": false
        },
        "validCredentials": {
          "type": "boolean",
          "description": "True if credentials are valid and can connect successfully",
          "readOnly": true,
          "default": false
        },
        "trustedEncryptionCertificate": {
          "type": "boolean",
          "description": "True if the certificate for the given cloud provider is trusted",
          "readOnly": true,
          "default": false
        },
        "canPutObject": {
          "type": "boolean",
          "description": "True if a successful PUT is executed",
          "readOnly": true,
          "default": false
        },
        "canGetObject": {
          "type": "boolean",
          "description": "True if a successful GET is executed",
          "readOnly": true,
          "default": false
        },
        "canGetObjects": {
          "type": "boolean",
          "description": "True if a successful list of objects is executed",
          "readOnly": true,
          "default": false
        },
        "canDeleteObject": {
          "type": "boolean",
          "description": "True if a successful DELETE is executed",
          "readOnly": true,
          "default": false
        }
      },
      "xml": {
        "name": "CatCloudConnectivity"
      }
    },
    "CloudParameters": {
      "type": "object",
      "properties": {
        "sslCertificate": {
          "type": "string",
          "description": "SSL certificate details to use for the relevant cloud provider"
        },
        "cspVendor": {
          "type": "integer",
          "format": "int32",
          "description": "Enum representation of cloud service provider for cloud store"
        },
        "cspProtocol": {
          "type": "integer",
          "format": "int32",
          "description": "Enum representation of protocol to use for cloud service provider"
        },
        "cspVendorString": {
          "type": "string",
          "description": "String representation of cloud service provider for cloud store"
        },
        "cspProtocolString": {
          "type": "string",
          "description": "String representation of protocol to use for cloud service provider"
        },
        "cspContainer": {
          "type": "string",
          "description": "Cloud container name"
        },
        "cspAuthenticationId": {
          "type": "string",
          "description": "Authentication ID for cloud store.S3 - Access ID,Azure - Account Name"
        },
        "cspAuthenticationKey": {
          "type": "string",
          "description": "Authentication Key for cloud store. S3 - Secret Key, Azure - Account Key"
        },
        "cspAuthenticationVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Enum representation of AWS Signature Version if a cloud store using Amazon S3 is attached"
        },
        "cspAuthenticationVersionString": {
          "type": "string",
          "description": "String representation of AWS Signature Version if a cloud store using Amazon S3 is attached"
        },
        "cspAddress": {
          "type": "string",
          "description": "Host address for cloud provider"
        },
        "cspPort": {
          "type": "integer",
          "format": "int32",
          "description": "Port for cloud provider"
        },
        "cspAddressingStyle": {
          "type": "integer",
          "format": "int32",
          "description": "Addressing style for S3 cloud provider"
        },
        "cloudStoreId": {
          "type": "string",
          "description": "Cloud store unique identifier"
        },
        "proxyConnectionEnabled": {
          "type": "boolean",
          "description": "True if proxy is to be used for connections to the cloud service provider, false if not",
          "default": false
        },
        "secureConnectionEnabled": {
          "type": "boolean",
          "description": "True if SSL is to used for connections to the cloud service provider, false if not.",
          "default": false
        }
      },
      "xml": {
        "name": "CatCloudParameters"
      }
    },
    "CloudParametrics": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "UTC time for the metric.",
          "readOnly": true
        },
        "outboundCloudTransmittedBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Numuber of bytes transmitted to the cloud storage.",
          "readOnly": true
        },
        "inboundCloudReceivedBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Numuber of bytes received from the cloud storage.",
          "readOnly": true
        },
        "numCloudRequests": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of cloud request sent to the cloud storage.",
          "readOnly": true
        },
        "numCloudGetRequests": {
          "type": "integer",
          "format": "int64",
          "description": "Number of GET requests to the cloud storage.",
          "readOnly": true
        },
        "numCloudHeadRequests": {
          "type": "integer",
          "format": "int64",
          "description": "Number of HEAD requests to the cloud storage.",
          "readOnly": true
        },
        "numCloudPutRequests": {
          "type": "integer",
          "format": "int64",
          "description": "Number of PUT requests to the cloud storage.",
          "readOnly": true
        },
        "numCloudPostRequests": {
          "type": "integer",
          "format": "int64",
          "description": "Number of POST requests to the cloud storage.",
          "readOnly": true
        },
        "numCloudListRequests": {
          "type": "integer",
          "format": "int64",
          "description": "Number of LIST requests to the cloud storage.",
          "readOnly": true
        },
        "numCloudDeleteRequests": {
          "type": "integer",
          "format": "int64",
          "description": "Number of DELETE requests to the cloud storage.",
          "readOnly": true
        },
        "outboundCloudNetworkLimit": {
          "type": "integer",
          "format": "int64",
          "description": "The outbound cloud network limit set during this sample",
          "readOnly": true
        },
        "outboundCloudNetworkLimitEnabled": {
          "type": "boolean",
          "description": "The outbound cloud network limit enabled set during this sample",
          "readOnly": true,
          "default": false
        },
        "inboundCloudNetworkLimit": {
          "type": "integer",
          "format": "int64",
          "description": "The inbound cloud network limit set during this sample",
          "readOnly": true
        },
        "inboundCloudNetworkLimitEnabled": {
          "type": "boolean",
          "description": "The inbound cloud network limit enabled set during this sample",
          "readOnly": true,
          "default": false
        }
      },
      "xml": {
        "name": "CatCloudParametrics"
      }
    },
    "CloudParametricsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/CloudParametrics"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "CloudProxy": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Is the proxy enabled",
          "default": false
        },
        "address": {
          "type": "string",
          "description": "Host address for the proxy"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port number for the proxy"
        },
        "username": {
          "type": "string",
          "description": "Username for the proxy"
        },
        "password": {
          "type": "string",
          "description": "Password for the proxy"
        }
      },
      "xml": {
        "name": "CatCloudProxy"
      }
    },
    "CloudSSLCertificate": {
      "type": "object",
      "properties": {
        "subjectCommonName": {
          "type": "string",
          "description": "The common name of the subject for the certificate",
          "readOnly": true
        },
        "subjectOrganisation": {
          "type": "string",
          "description": "The organisation of the subject for the certificate",
          "readOnly": true
        },
        "subjectOrganisationalUnit": {
          "type": "string",
          "description": "The organisation unit of the subject for the certificate",
          "readOnly": true
        },
        "serialNumber": {
          "type": "string",
          "description": "The serial number of the certificate",
          "readOnly": true
        },
        "issuerCommonName": {
          "type": "string",
          "description": "The common name of the issuer for the certificate",
          "readOnly": true
        },
        "issuerOrganisation": {
          "type": "string",
          "description": "The organisation of the issuer for the certificate",
          "readOnly": true
        },
        "issuerOrganisationalUnit": {
          "type": "string",
          "description": "The organisation unit of the issuer for the certificate",
          "readOnly": true
        },
        "notValidBeforeDate": {
          "type": "string",
          "description": "The date the certificate is valid from",
          "readOnly": true,
          "format": "date-time"
        },
        "notValidAfterDate": {
          "type": "string",
          "description": "The date the certificate is valid until",
          "readOnly": true,
          "format": "date-time"
        },
        "sha1Fingerprint": {
          "type": "string",
          "description": "The SHA1 fingerprint of the certificate",
          "readOnly": true
        },
        "sha256Fingerprint": {
          "type": "string",
          "description": "The SHA256 fingerprint of the certificate",
          "readOnly": true
        },
        "sslCertificate": {
          "type": "string",
          "description": "Full SSL certificate details",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatCloudSSLCertificate"
      }
    },
    "CloudStoreDiagnostics": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID number for the diagnostic result returned",
          "readOnly": true
        },
        "timestamp": {
          "type": "string",
          "description": "Time the test was run",
          "readOnly": true
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Enum for status of diagnostic run",
          "readOnly": true
        },
        "statusString": {
          "type": "string",
          "description": "Localised string for status of run",
          "readOnly": true
        },
        "statusInformation": {
          "type": "string",
          "description": "More verbose status of run",
          "readOnly": true
        },
        "validProxyStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of proxy test",
          "readOnly": true
        },
        "validProxyStatusString": {
          "type": "string",
          "description": "String status of proxy test",
          "readOnly": true
        },
        "validHostStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of address connection test",
          "readOnly": true
        },
        "validHostStatusString": {
          "type": "string",
          "description": "String status of address connection test",
          "readOnly": true
        },
        "validCredentialsStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of credentials test",
          "readOnly": true
        },
        "validCredentialsStatusString": {
          "type": "string",
          "description": "String status of credentials test",
          "readOnly": true
        },
        "trustedEncryptionCertificateStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of certificate validation test",
          "readOnly": true
        },
        "trustedEncryptionCertificateStatusString": {
          "type": "string",
          "description": "String status of certificate validation test",
          "readOnly": true
        },
        "putObjectStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of PUT test",
          "readOnly": true
        },
        "putObjectStatusString": {
          "type": "string",
          "description": "String status of PUT test",
          "readOnly": true
        },
        "getObjectStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of GET single test",
          "readOnly": true
        },
        "getObjectStatusString": {
          "type": "string",
          "description": "String status of GET single test",
          "readOnly": true
        },
        "getObjectsStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of get collection test",
          "readOnly": true
        },
        "getObjectsStatusString": {
          "type": "string",
          "description": "String status of get collection test",
          "readOnly": true
        },
        "deleteObjectStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of DELETE test",
          "readOnly": true
        },
        "deleteObjectStatusString": {
          "type": "string",
          "description": "String status of DELETE test",
          "readOnly": true
        },
        "connectionLatencyStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Status of latency test",
          "readOnly": true
        },
        "connectionLatencyStatusString": {
          "type": "string",
          "description": "String status of latency test",
          "readOnly": true
        },
        "connectionLatency": {
          "type": "integer",
          "format": "int32",
          "description": "Latency of connection",
          "readOnly": true
        },
        "uploadTestWrite100Status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of write 100% test",
          "readOnly": true
        },
        "uploadTestWrite100StatusString": {
          "type": "string",
          "description": "String status of write 100% test",
          "readOnly": true
        },
        "uploadTestWrite100Throughput": {
          "type": "integer",
          "format": "int32",
          "description": "Throughput of write 100% test",
          "readOnly": true
        },
        "uploadTestWrite0Status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of upload 0% changed data test",
          "readOnly": true
        },
        "uploadTestWrite0StatusString": {
          "type": "string",
          "description": "String status of upload 0% changed data test",
          "readOnly": true
        },
        "uploadTestWrite0Throughput": {
          "type": "integer",
          "format": "int32",
          "description": "Upload speed for 0% changed data",
          "readOnly": true
        },
        "uploadTestWrite1Status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of upload 1% changed data test",
          "readOnly": true
        },
        "uploadTestWrite1StatusString": {
          "type": "string",
          "description": "String status of upload 1% changed data test",
          "readOnly": true
        },
        "uploadTestWrite1Throughput": {
          "type": "integer",
          "format": "int32",
          "description": "Download speed of upload 1% changed data test",
          "readOnly": true
        },
        "uploadTestWrite5Status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of upload 5% changed data test",
          "readOnly": true
        },
        "uploadTestWrite5StatusString": {
          "type": "string",
          "description": "String status of upload 5% changed data test",
          "readOnly": true
        },
        "uploadTestWrite5Throughput": {
          "type": "integer",
          "format": "int32",
          "description": "Download speed of upload 5% changed data test",
          "readOnly": true
        },
        "uploadTestWrite10Status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of upload 10% changed data test",
          "readOnly": true
        },
        "uploadTestWrite10StatusString": {
          "type": "string",
          "description": "String status of upload 10% changed data test",
          "readOnly": true
        },
        "uploadTestWrite10Throughput": {
          "type": "integer",
          "format": "int32",
          "description": "Download speed of upload 10% changed data test",
          "readOnly": true
        },
        "downloadTestRead100Status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of download 100% changed data test",
          "readOnly": true
        },
        "downloadTestRead100StatusString": {
          "type": "string",
          "description": "String status of download 100% changed data test",
          "readOnly": true
        },
        "downloadTestRead100Throughput": {
          "type": "integer",
          "format": "int32",
          "description": "Download speed for download 100% changed data test",
          "readOnly": true
        },
        "downloadTestRead0Status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of download 0% changed data test",
          "readOnly": true
        },
        "downloadTestRead0StatusString": {
          "type": "string",
          "description": "Status of download 0% changed data test",
          "readOnly": true
        },
        "downloadTestRead0Throughput": {
          "type": "integer",
          "format": "int32",
          "description": "Download speed for download 0% changed data test",
          "readOnly": true
        },
        "downloadTestRead1Status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of download 1% changed data test",
          "readOnly": true
        },
        "downloadTestRead1StatusString": {
          "type": "string",
          "description": "String status of download 1% changed data test",
          "readOnly": true
        },
        "downloadTestRead1Throughput": {
          "type": "integer",
          "format": "int32",
          "description": "Download speed for download 1% changed data test",
          "readOnly": true
        },
        "downloadTestRead5Status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of download 5% changed data test",
          "readOnly": true
        },
        "downloadTestRead5StatusString": {
          "type": "string",
          "description": "String status of download 5% changed data test",
          "readOnly": true
        },
        "downloadTestRead5Throughput": {
          "type": "integer",
          "format": "int32",
          "description": "Download speed for download 5% changed data test",
          "readOnly": true
        },
        "downloadTestRead10Status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of download 10% changed data test",
          "readOnly": true
        },
        "downloadTestRead10StatusString": {
          "type": "string",
          "description": "String status of download 10% changed data test",
          "readOnly": true
        },
        "downloadTestRead10Throughput": {
          "type": "integer",
          "format": "int32",
          "description": "Download speed for download 10% changed data test",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatCloudStoreDiagnostics"
      }
    },
    "CloudStoreDiagnosticsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/CloudStoreDiagnostics"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "CloudStoreKey": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "Password for the key"
        },
        "encryptedKey": {
          "type": "string",
          "description": "The encrypted key"
        },
        "cloudStoreId": {
          "type": "string",
          "description": "The UID of the cloud store the key relates to."
        }
      },
      "xml": {
        "name": "CatCloudStoreKey"
      }
    },
    "CloudStoreName": {
      "type": "object",
      "properties": {
        "storeName": {
          "type": "string",
          "description": "Name of the store to run self verification on"
        }
      },
      "xml": {
        "name": "CatCloudStoreName"
      }
    },
    "CloudSubnetModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID of the subnet",
          "readOnly": true
        },
        "prefix": {
          "type": "integer",
          "format": "int32",
          "description": "Prefix of the subnet"
        },
        "network": {
          "type": "string",
          "description": "Address of the subnet"
        },
        "description": {
          "type": "string",
          "description": "Description of the subnet"
        }
      },
      "xml": {
        "name": "CatCloudSubnetModel"
      }
    },
    "CloudSubnetPostModel": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "integer",
          "format": "int32",
          "description": "Prefix of the subnet"
        },
        "network": {
          "type": "string",
          "description": "Address of the subnet"
        },
        "description": {
          "type": "string",
          "description": "Description of the subnet"
        }
      },
      "xml": {
        "name": "CatCloudSubnetPostModel"
      }
    },
    "CloudSubnetPutModel": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "integer",
          "format": "int32",
          "description": "Prefix of the subnet"
        },
        "network": {
          "type": "string",
          "description": "Address of the subnet"
        },
        "description": {
          "type": "string",
          "description": "Description of the subnet"
        }
      },
      "xml": {
        "name": "CatCloudSubnetPutModel"
      }
    },
    "CloudSubnetsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/CloudSubnetModel"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "CoFCDeviceLoginCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/CofcDeviceLogin"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "CoFCDevicePutModel": {
      "type": "object",
      "properties": {
        "numLuns": {
          "type": "integer",
          "format": "int32",
          "description": "Number of Logical Unit Numbers the device represents"
        }
      },
      "xml": {
        "name": "CatCoFCDevicePutModel"
      }
    },
    "CoFCDevicesCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/CofcDevice"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "CoFCIdentifierPutModel": {
      "type": "object",
      "properties": {
        "identifierAlias": {
          "type": "string",
          "description": "The Catalyst over fibre channel identifier alias"
        }
      },
      "xml": {
        "name": "CatCoFCIdentifierPutModel"
      }
    },
    "CoFCInitiatorsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/CofcInitiator"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "CoFCRemoteHostsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/CofcRemoteHost"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "CopyjobFilters": {
      "type": "object",
      "properties": {
        "clientAddressFilter": {
          "type": "string",
          "description": "Client Address used by the filter"
        },
        "clientAddressFilterExactMatch": {
          "type": "boolean",
          "description": "True if the Client Address used by the filter is an exact match",
          "default": false
        },
        "applicationIdFilter": {
          "type": "string",
          "description": "Application ID used by the filter"
        },
        "clientIdFilter": {
          "type": "string",
          "description": "Client ID used by the filter"
        },
        "applicationIdClientIdFilterExactMatch": {
          "type": "boolean",
          "description": "True if the Application ID used by the filter is an exact match",
          "default": false
        },
        "queuedDateStart": {
          "type": "string",
          "description": "Queued Start Date used by the filter"
        },
        "queuedDateEnd": {
          "type": "string",
          "description": "Queued End Date used by the filter"
        },
        "startedDateStart": {
          "type": "string",
          "description": "Date to search for started jobs that started on this date"
        },
        "startedDateEnd": {
          "type": "string",
          "description": "Date to search for started jobs that started before this date"
        },
        "endedDateStart": {
          "type": "string",
          "description": "Date to search for ended jobs that ended after this date"
        },
        "endedDateEnd": {
          "type": "string",
          "description": "Date to search for ended jobs that ended before this date"
        },
        "jobStatusFilter": {
          "type": "integer",
          "format": "int32",
          "description": "Filter on the status of the jobs"
        },
        "origin": {
          "description": "Copy job originating server filter",
          "$ref": "#/definitions/CopyjobServerFilters"
        },
        "destination": {
          "description": "Copy job destination server filter",
          "$ref": "#/definitions/CopyjobServerFilters"
        }
      }
    },
    "CopyjobServerFilters": {
      "type": "object",
      "properties": {
        "serverAddressFilter": {
          "type": "string",
          "description": "Server address search pattern"
        },
        "serverAddressFilterExactMatch": {
          "type": "boolean",
          "description": "True if this filter uses exact server address matching",
          "default": false
        },
        "storeNameFilter": {
          "type": "string",
          "description": "Store name search pattern"
        },
        "storeNameFilterExactMatch": {
          "type": "boolean",
          "description": "True if this filter uses exact store name matching",
          "default": false
        },
        "itemNameFilter": {
          "type": "string",
          "description": "Item name search pattern"
        },
        "itemNameFilterExactMatch": {
          "type": "boolean",
          "description": "True if this filter uses exact item name matching",
          "default": false
        }
      }
    },
    "DatajobFilters": {
      "type": "object",
      "properties": {
        "itemNameFilter": {
          "type": "string",
          "description": "'Item name' search used by the filter"
        },
        "itemNameFilterExactMatch": {
          "type": "boolean",
          "description": "True if the 'Item name' used by the filter is an exact match",
          "default": false
        },
        "applicationIdFilter": {
          "type": "string",
          "description": "'Application ID' search used by the filter"
        },
        "applicationIdClientIdFilterExactMatch": {
          "type": "boolean",
          "description": "True if the 'Application ID' used by the filter is an exact match",
          "default": false
        },
        "clientIdFilter": {
          "type": "string",
          "description": "'Client ID' search used by the filter"
        },
        "clientAddressFilter": {
          "type": "string",
          "description": "'Client Address' search used by the filter"
        },
        "clientAddressFilterExactMatch": {
          "type": "boolean",
          "description": "True if the 'Client Address' used by the filter is an exact match",
          "default": false
        },
        "startedDateStart": {
          "type": "string",
          "description": "Date to search for started jobs that started on this date"
        },
        "startedDateEnd": {
          "type": "string",
          "description": "Date to search for started jobs that started before this date"
        },
        "endedDateStart": {
          "type": "string",
          "description": "Date to search for ended jobs that ended after this date"
        },
        "endedDateEnd": {
          "type": "string",
          "description": "Date to search for ended jobs that ended before this date"
        },
        "jobStatusFilter": {
          "type": "integer",
          "format": "int32",
          "description": "Filter on the status of the jobs"
        }
      }
    },
    "ItemFilters": {
      "type": "object",
      "properties": {
        "itemNameFilter": {
          "type": "string",
          "description": "'Item Name' search used by the filter"
        },
        "itemNameFilterExactMatch": {
          "type": "boolean",
          "description": "True if the 'Item Name' used by the filter is an exact match",
          "default": false
        },
        "inclusiveTagList": {
          "type": "string",
          "description": "'Inclusive Tag' list search used by the filter"
        },
        "inclusiveTagListMatchAll": {
          "type": "boolean",
          "description": "True if the 'Inclusive Tag' list used by the filter is an exact match",
          "default": false
        },
        "exclusiveTagList": {
          "type": "string",
          "description": "'Exclusive Tag' list search used by the filter"
        },
        "exclusiveTagListMatchAll": {
          "type": "boolean",
          "description": "True if the 'Exclusive Tag' list used by the filter is an exact match for all items",
          "default": false
        },
        "createdDateStart": {
          "type": "string",
          "description": "Created item date to search from"
        },
        "createdDateEnd": {
          "type": "string",
          "description": "Created item date to search to"
        },
        "modifiedDateStart": {
          "type": "string",
          "description": "Modified item date to search from"
        },
        "modifiedDateEnd": {
          "type": "string",
          "description": "Modified item date to search to"
        }
      }
    },
    "ServicePutModel": {
      "type": "object",
      "properties": {
        "maxOutboundCopyJobs": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum concurrent outbound copyjobs that can occur"
        },
        "maxDataAndInboundCopyJobs": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum concurrent data and inbound copyjobs that can occur"
        }
      },
      "xml": {
        "name": "CatServicePutModel"
      }
    },
    "StorageParametric": {
      "type": "object",
      "properties": {
        "userBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Amount of user data stored in bytes",
          "readOnly": true
        },
        "diskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Amount of disk capacity used in  bytes",
          "readOnly": true
        },
        "numObjects": {
          "type": "integer",
          "format": "int64",
          "description": "Number of objects",
          "readOnly": true
        },
        "timestamp": {
          "type": "string",
          "description": "UTC time for the metric",
          "readOnly": true
        },
        "dedupeRatio": {
          "type": "number",
          "format": "double",
          "description": "Dedupe ratio.",
          "readOnly": true
        },
        "cloudDiskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Amount of capacity used in cloud storage in bytes",
          "readOnly": true
        },
        "localDiskBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Amount of capacity used in local storage in bytes",
          "readOnly": true
        }
      },
      "xml": {
        "name": "CatStorageParametric"
      }
    },
    "StorageParametricsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/StorageParametric"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "StoreCopyJobCancelModel": {
      "type": "object",
      "properties": {
        "markedForCancellation": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "CatalystCopyjobCancellation"
      }
    },
    "StoreCopyJobsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/StoreCopyJob"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "StoreDataJobsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/StoreDatajob"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "StoreItemsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/StoreItem"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "StorePermissionModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID for the client",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Display name of the client",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description of the client",
          "readOnly": true
        },
        "allowAccess": {
          "type": "boolean",
          "description": "True if the client has access permissions for the store",
          "default": false
        }
      },
      "description": "CatalystStorePermission",
      "xml": {
        "name": "CatalystStorePermission"
      }
    },
    "StorePermissionPutModel": {
      "type": "object",
      "properties": {
        "allowAccess": {
          "type": "boolean",
          "description": "True if the client has access permissions for the store",
          "default": false
        }
      },
      "description": "CatStorePermissionPutModel",
      "xml": {
        "name": "CatStorePermissionPutModel"
      }
    },
    "StorePermissionsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/StorePermissionModel"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "StorePostModel": {
      "type": "object",
      "required": [
        "copyJobRetentionDays",
        "dataImmutabilityGraceEnabled",
        "dataImmutabilityGraceSeconds",
        "dataImmutabilityMaxISVRetentionSeconds",
        "dataImmutabilityRetentionEnabled",
        "dataImmutabilityRetentionSeconds",
        "dataJobRetentionDays",
        "description",
        "encryptionEnabled",
        "name",
        "primaryTransferPolicy",
        "secondaryTransferPolicy",
        "securityMode",
        "sizeOnDiskQuotaBytes",
        "userDataStoredQuotaBytes",
        "userDataStoredQuotaEnabled"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID for this store",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the store"
        },
        "description": {
          "type": "string",
          "description": "Description of the store"
        },
        "primaryTransferPolicy": {
          "type": "integer",
          "format": "int32",
          "description": "Primary transfer policy for this store's jobs"
        },
        "secondaryTransferPolicy": {
          "type": "integer",
          "format": "int32",
          "description": "Secondary transfer policy for this store's jobs"
        },
        "sizeOnDiskQuotaEnabled": {
          "type": "boolean",
          "description": "True if quota policy for size on disk is enabled",
          "default": false
        },
        "sizeOnDiskQuotaBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Size on disk quota limit policy"
        },
        "userDataStoredQuotaEnabled": {
          "type": "boolean",
          "description": "True if quota policy for user data is enabled",
          "default": false
        },
        "userDataStoredQuotaBytes": {
          "type": "integer",
          "format": "int64",
          "description": "User data quota limit policy"
        },
        "dataJobRetentionDays": {
          "type": "integer",
          "format": "int64",
          "description": "Datajob log retention period in days"
        },
        "copyJobRetentionDays": {
          "type": "integer",
          "format": "int64",
          "description": "Copyjob log retention period in days"
        },
        "encryptionEnabled": {
          "type": "boolean",
          "description": "True if the store is encrypted",
          "default": false
        },
        "secureEraseModeString": {
          "type": "string",
          "description": "Localised representation of the store erase mode",
          "readOnly": true
        },
        "secureEraseMode": {
          "type": "integer",
          "format": "int32",
          "description": "The store erase mode"
        },
        "modifiedDate": {
          "type": "string",
          "description": "The date the store was last modified",
          "readOnly": true,
          "format": "date-time"
        },
        "securityMode": {
          "type": "integer",
          "format": "int32",
          "description": "The stores security mode"
        },
        "dataImmutabilityGraceEnabled": {
          "type": "boolean",
          "description": "True if a grace period for data immutability has been enabled",
          "default": false
        },
        "dataImmutabilityGraceSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum amount of time in seconds the backup data is immutable"
        },
        "dataImmutabilityRetentionSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of time in seconds the backup data is immutable"
        },
        "dataImmutabilityRetentionEnabled": {
          "type": "boolean",
          "description": "True if a retention period for data immutability has been enabled",
          "default": false
        },
        "dataImmutabilityMaxISVRetentionSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of time in seconds the ISV backup data can be immutable"
        },
        "aligned4KBoverrideEnabled": {
          "type": "boolean",
          "description": "True will force Catalyst client to use fixed 4KB chunking on Veeam files",
          "default": false
        },
        "sslCertificate": {
          "type": "string",
          "description": "SSL certificate details to use for the relevant cloud provider."
        },
        "cloudStoreEnabled": {
          "type": "boolean",
          "description": "Flag telling whether it's a cloud store. False by default",
          "default": false
        },
        "cloudStoreDetails": {
          "description": "The details of the cloud store. Only set if creating a cloud store",
          "$ref": "#/definitions/CloudStorePostModel"
        }
      },
      "xml": {
        "name": "CatStorePostModel"
      }
    },
    "StorePutModel": {
      "type": "object",
      "required": [
        "copyJobRetentionDays",
        "dataImmutabilityGraceEnabled",
        "dataImmutabilityGraceSeconds",
        "dataImmutabilityMaxISVRetentionSeconds",
        "dataImmutabilityRetentionEnabled",
        "dataImmutabilityRetentionSeconds",
        "dataJobRetentionDays",
        "encryptionEnabled",
        "primaryTransferPolicy",
        "secondaryTransferPolicy",
        "securityMode",
        "sizeOnDiskQuotaBytes",
        "sizeOnDiskQuotaEnabled",
        "userDataStoredQuotaBytes",
        "userDataStoredQuotaEnabled"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the store"
        },
        "primaryTransferPolicy": {
          "type": "integer",
          "format": "int32",
          "description": "Primary transfer policy for this store's jobs"
        },
        "secondaryTransferPolicy": {
          "type": "integer",
          "format": "int32",
          "description": "Secondary transfer policy for this store's jobs"
        },
        "sizeOnDiskQuotaEnabled": {
          "type": "boolean",
          "description": "True if quota policy for size on disk is enabled",
          "default": false
        },
        "sizeOnDiskQuotaBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Size on disk quota limit policy"
        },
        "userDataStoredQuotaEnabled": {
          "type": "boolean",
          "description": "True if quota policy for user data is enabled",
          "default": false
        },
        "userDataStoredQuotaBytes": {
          "type": "integer",
          "format": "int64",
          "description": "User data quota limit policy"
        },
        "dataJobRetentionDays": {
          "type": "integer",
          "format": "int64",
          "description": "Datajob log retention period in days"
        },
        "copyJobRetentionDays": {
          "type": "integer",
          "format": "int64",
          "description": "Copyjob log retention period in days"
        },
        "encryptionEnabled": {
          "type": "boolean",
          "description": "True if the store is encrypted",
          "default": false
        },
        "secureEraseMode": {
          "type": "integer",
          "format": "int32",
          "description": "The store erase mode"
        },
        "securityMode": {
          "type": "integer",
          "format": "int32",
          "description": "The stores security mode"
        },
        "dataImmutabilityGraceEnabled": {
          "type": "boolean",
          "description": "True if a grace period for data immutability has been enabled",
          "default": false
        },
        "dataImmutabilityGraceSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum amount of time in seconds the backup data is immutable"
        },
        "dataImmutabilityRetentionSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of time in seconds the backup data is immutable"
        },
        "dataImmutabilityRetentionEnabled": {
          "type": "boolean",
          "description": "True if a retention period for data immutability has been enabled",
          "default": false
        },
        "dataImmutabilityMaxISVRetentionSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of time in seconds the ISV backup data can be immutable"
        },
        "aligned4KBoverrideEnabled": {
          "type": "boolean",
          "description": "True will force Catalyst client to use fixed 4KB chunking on Veeam files",
          "default": false
        },
        "sslCertificate": {
          "type": "string",
          "description": "SSL certificate details to use for the relevant cloud provider."
        },
        "cloudStoreEnabled": {
          "type": "boolean",
          "description": "Flag telling whether it's a cloud store. False by default",
          "default": false
        },
        "cloudStoreDetails": {
          "description": "The details of the cloud store. Only set if Modifying a cloud store",
          "$ref": "#/definitions/CloudStorePutModel"
        }
      },
      "xml": {
        "name": "CatStorePutModel"
      }
    },
    "StoreUsageSummaryCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/StoreUsageSummary"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "StoresCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/Store"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    },
    "ThroughputParametric": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "UTC time for the metric.",
          "readOnly": true
        },
        "averageInboundCopyjobSessions": {
          "type": "integer",
          "format": "int64",
          "description": "Average inbound copy job session count",
          "readOnly": true
        },
        "averageOutboundCopyjobSessions": {
          "type": "integer",
          "format": "int64",
          "description": "Average outbound copy job session count",
          "readOnly": true
        },
        "peakInboundCopyjobSessions": {
          "type": "integer",
          "format": "int64",
          "description": "Peak inbound copy job session count",
          "readOnly": true
        },
        "peakOutboundCopyjobSessions": {
          "type": "integer",
          "format": "int64",
          "description": "Peak outbound copy job session count",
          "readOnly": true
        },
        "inboundCopyjobNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average copy job receive network throughput in Bytes per second",
          "readOnly": true
        },
        "inboundCopyjobLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average copy job receive throughput in Bytes per second",
          "readOnly": true
        },
        "outboundCopyjobNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average copy job transmit network throughput in Bytes per second",
          "readOnly": true
        },
        "outboundCopyjobLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average copy job transmit throughput in Bytes per second",
          "readOnly": true
        },
        "inboundDatajobNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average data job receive network throughput in Bytes per second",
          "readOnly": true
        },
        "inboundDatajobLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average data job receive throughput in Bytes per second",
          "readOnly": true
        },
        "averageDataJobSessions": {
          "type": "integer",
          "format": "int64",
          "description": "Average data job session count",
          "readOnly": true
        },
        "peakDataJobSessions": {
          "type": "integer",
          "format": "int64",
          "description": "Peak data job session count",
          "readOnly": true
        },
        "outboundDatajobNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average data job transmit network throughput in Bytes per second",
          "readOnly": true
        },
        "outboundDatajobLogicalThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average data job transmit throughput in Bytes per second",
          "readOnly": true
        },
        "bandwidthLimitEnabled": {
          "type": "boolean",
          "description": "Was bandwidth limit was active during this sample",
          "readOnly": true,
          "default": false
        },
        "bandwidthLimitBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The bandwidth limit set during this sample",
          "readOnly": true
        },
        "blackoutEnabled": {
          "type": "boolean",
          "description": "Was blackout active during this sample",
          "readOnly": true,
          "default": false
        },
        "outboundCloudNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average network throughput of local to cloud in Bytes per second",
          "readOnly": true
        },
        "inboundCloudNetworkThroughput": {
          "type": "integer",
          "format": "int64",
          "description": "Average network throughput of cloud to local in Bytes per second",
          "readOnly": true
        },
        "outboundCloudNetworkLimit": {
          "type": "integer",
          "format": "int64",
          "description": "The outbound cloud network limit set during this sample",
          "readOnly": true
        },
        "outboundCloudNetworkLimitEnabled": {
          "type": "boolean",
          "description": "The outbound cloud network limit enabled set during this sample",
          "readOnly": true,
          "default": false
        },
        "inboundCloudNetworkLimit": {
          "type": "integer",
          "format": "int64",
          "description": "The inbound cloud network limit set during this sample",
          "readOnly": true
        },
        "inboundCloudNetworkLimitEnabled": {
          "type": "boolean",
          "description": "The inbound cloud network limit enabled set during this sample",
          "readOnly": true,
          "default": false
        }
      },
      "xml": {
        "name": "CatThroughputParametric"
      }
    },
    "ThroughputParametricsCollection": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "xml": {
            "name": "member",
            "wrapped": true
          },
          "description": "Members of the collection",
          "items": {
            "$ref": "#/definitions/ThroughputParametric"
          }
        },
        "nextPageUri": {
          "type": "string",
          "description": "Provided if more members are available",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of members that are available",
          "readOnly": true
        },
        "numMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members returned",
          "readOnly": true
        }
      },
      "description": "Container for a collection of models",
      "xml": {
        "name": "Collection"
      }
    }
  },
  "host": "APPLIANCE-ADDRESS",
  "securityDefinitions": {
    "BasicAuth": {
      "type": "basic"
    },
    "oauth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "/pml/login/authenticatewithobject"
    }
  },
  "security": [
    {
      "BasicAuth": [],
      "oauth": []
    }
  ]
}