{
  "swagger": "2.0",
  "info": {
    "description": "unused",
    "version": "4.25.0-SNAPSHOT",
    "title": "PML Core Module"
  },
  "host": "APPLIANCE-ADDRESS",
  "basePath": "/pml",
  "tags": [
    {
      "name": "I18n Catalog Access REST API"
    },
    {
      "name": "OAuth2 related REST API"
    },
    {
      "name": "PML Cluster framework"
    },
    {
      "name": "PML Core UploadDownload Service"
    },
    {
      "name": "PML Quorum framework"
    },
    {
      "name": "PML Remote Trust Service"
    },
    {
      "name": "PML Server framework"
    },
    {
      "name": "PML Task framework"
    },
    {
      "name": "Password Policy REST API"
    },
    {
      "name": "RBAC related REST API"
    },
    {
      "name": "Session Service"
    },
    {
      "name": "certificate related REST API"
    },
    {
      "name": "directory services REST API"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/asynchronous_operation_task": {
      "get": {
        "tags": [
          "PML Task framework"
        ],
        "summary": "Get Task objects",
        "description": "",
        "operationId": "getTasks",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "tasks-only",
            "in": "query",
            "description": "If this query parameter is specified, only the PML Tasks will bereturned. Otherwise both, PML Tasks and all pending or just completed async REST requests will be returned",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tasks"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_task:read",
          "pml_task:write"
        ]
      }
    },
    "/asynchronous_operation_task/usageReport": {
      "get": {
        "tags": [
          "PML Task framework"
        ],
        "summary": "Get resource usage report",
        "description": "",
        "operationId": "getTaskResourceUsageReport",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskResourceUsageReport"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_task:read",
          "pml_task:write"
        ]
      }
    },
    "/asynchronous_operation_task/{id}": {
      "get": {
        "tags": [
          "PML Task framework"
        ],
        "summary": "Get Task object by id",
        "description": "",
        "operationId": "getTask",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task id",
            "required": true,
            "type": "string"
          },
          {
            "name": "updatestate",
            "in": "query",
            "description": "If this query parameter is specified and its value is true, the TaskFramework will execute task update state on the Task's target node to get the most recenet task state. If this query parameter is not specified or its value is not true, the TaskFramework will returna cached Task state known from the last task update that happens every minute.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_task:read",
          "pml_task:write"
        ]
      }
    },
    "/asynchronous_operation_task/{id}/taskinfo": {
      "get": {
        "tags": [
          "PML Task framework"
        ],
        "summary": "Get Task extended info object by id",
        "description": "",
        "operationId": "getTaskInfo",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskInfo"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_task:read",
          "pml_task:write"
        ]
      }
    },
    "/catalogs": {
      "get": {
        "tags": [
          "I18n Catalog Access REST API"
        ],
        "summary": "Returns a list of catalogs belonging to a locale",
        "description": "If no locale is specified, the language of the default locale of the instance of the JVM is used",
        "operationId": "getCatalogs",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "description": "locale of the catalog",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Catalogs"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:read",
          "pml_cluster:write"
        ]
      }
    },
    "/catalogs/{catalog}": {
      "get": {
        "tags": [
          "I18n Catalog Access REST API"
        ],
        "summary": "Returns key/value pairs for a specific catalog",
        "description": "If no locale is specified, the language of the default locale of the instance of the JVM is used",
        "operationId": "getCatalog",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "description": "locale of the catalog",
            "required": false,
            "type": "string"
          },
          {
            "name": "catalog",
            "in": "path",
            "description": "name of the catalog",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:read",
          "pml_cluster:write"
        ]
      }
    },
    "/catalogs/{catalog}/keys": {
      "get": {
        "tags": [
          "I18n Catalog Access REST API"
        ],
        "summary": "Returns a list of keys for a specific catalog",
        "description": "If no locale is specified, the language of the default locale of the instance of the JVM is used",
        "operationId": "getCatalogKeys",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "description": "locale of the catalog",
            "required": false,
            "type": "string"
          },
          {
            "name": "catalog",
            "in": "path",
            "description": "name of the catalog",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CatalogKeys"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:read",
          "pml_cluster:write"
        ]
      }
    },
    "/catalogs/{catalog}/keys/{key}": {
      "get": {
        "tags": [
          "I18n Catalog Access REST API"
        ],
        "summary": "Returns a single message for a specified catalog and key",
        "description": "If no locale is specified, the language of the default locale of the instance of the JVM is used",
        "operationId": "getCatalogMessage",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "description": "locale of the catalog",
            "required": false,
            "type": "string"
          },
          {
            "name": "catalog",
            "in": "path",
            "description": "name of the catalog",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "name of the key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CatalogMessage"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:read",
          "pml_cluster:write"
        ]
      }
    },
    "/certificates/backup": {
      "post": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "backs up the server keystore for later restoration",
        "description": "",
        "operationId": "backupKeyStore",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/cachedcsr": {
      "get": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "returns a cached csr, or blank if there is no cached csr",
        "description": "",
        "operationId": "getCachedCsr",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateDto"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:read",
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/certificateinfo/{alias}": {
      "get": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "returns lots of different fields about the certificate",
        "description": "",
        "operationId": "getCertificateInfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "the alias to use",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SSLCertificate"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:read",
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/chain": {
      "get": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "returns array of certificates that form the chain of the signed certificate",
        "description": "",
        "operationId": "getChain",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateList"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:read",
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/csr": {
      "get": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "return certificate signing request from server keystore with pml alias",
        "description": "",
        "operationId": "getServerCsr",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "ext",
            "in": "query",
            "description": "a value of 'true' will add extensions to the CSR",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateDto"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:read",
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/db": {
      "post": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "generate a certificate for this node to be used by the database",
        "description": "",
        "operationId": "generateDBCertificate",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "san",
            "in": "query",
            "description": "The Subject Alternative Name for the certificate",
            "required": true,
            "type": "string"
          },
          {
            "name": "cn",
            "in": "query",
            "description": "The Common Name for the certificate",
            "required": true,
            "type": "string"
          },
          {
            "name": "ou",
            "in": "query",
            "description": "The Organizational Unit for the certificate",
            "required": true,
            "type": "string"
          },
          {
            "name": "o",
            "in": "query",
            "description": "The Organization for the certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/distinguishedname": {
      "get": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "returns the current distinguished name of the certificate with pml alias",
        "description": "",
        "operationId": "getDistinguishedName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DistinguishedName"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:read",
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/distributekeystore": {
      "post": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "forces the server keystore to be distributed to all cluster nodes; this command restarts the server, meaning it will be temporarily unavailable during the restart",
        "description": "",
        "operationId": "distributeKeyStore",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/importca": {
      "post": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "imports a CA certificate into the server keystore under a generated alias",
        "description": "",
        "operationId": "importCertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the certificate to import",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CertificateDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/importcatrust": {
      "post": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "imports a CA certificate into the server truststore under a generated alias; this command restarts the server, meaning it will be temporarily unavailable during the restart",
        "description": "",
        "operationId": "importCertificateTrust",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the certificate to import",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CertificateDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/importkeypair": {
      "post": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "used to import a public/private key pair into the server keystore; this command restarts the server, meaning it will be temporarily unavailable during the restart",
        "description": "",
        "operationId": "importKeyPair",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The public and private key pair to be imported (with optional privateKeyPass)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyPair"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/importsigned": {
      "post": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "imports a signed certificate into the server keystore under the 'pml' alias; this command restarts the server, meaning it will be temporarily unavailable during the restart",
        "description": "",
        "operationId": "importSignedCertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the certificate to import",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CertificateDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/payload": {
      "get": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "returns information specified by certFile in a serialized form for convenient use in other operations",
        "description": "",
        "operationId": "getServerPayload",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "certFile",
            "in": "query",
            "description": "the full path to the file to put into serialized form",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateDto"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:read",
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/restore": {
      "post": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "restores the server keystore from a previous backup; this command restarts the server, meaning it will be temporarily unavailable during the restart",
        "description": "",
        "operationId": "restoreKeyStore",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/server": {
      "get": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "return certificate information from server keystore with pml alias",
        "description": "",
        "operationId": "getServerCertificate",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateDto"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:read",
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/server/{alias}": {
      "get": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "return certificate information from server keystore with specified alias",
        "description": "",
        "operationId": "getServerCertificateWithAlias",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "the alias of the certificate to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateDto"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:read",
          "pml_PKI:write"
        ]
      },
      "delete": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "deletes the certificate with the specified alias from the server keystore",
        "description": "",
        "operationId": "deleteCertificate",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "the alias of the certificate to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/servercertificates": {
      "get": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "returns array of all certificates in the server keystore",
        "description": "",
        "operationId": "getServerCertificates",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateList"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:read",
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/updateselfsigned": {
      "post": {
        "tags": [
          "certificate related REST API"
        ],
        "summary": "generates a new public/private key pair for the PML self-signed certificate; this command restarts the server, meaning it will be temporarily unavailable during the restart",
        "description": "",
        "operationId": "updateSelfSigned",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the distinguished name",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DNameFields"
            }
          },
          {
            "name": "san",
            "in": "query",
            "description": "the SubjectAlternativeName",
            "required": false,
            "type": "string"
          },
          {
            "name": "santype",
            "in": "query",
            "description": "the SubjectAlternativeName type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_PKI:write"
        ]
      }
    },
    "/certificates/{ipAndPort}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get the certificate for an LDAP server",
        "description": "",
        "operationId": "getCertForLDAPServer",
        "parameters": [
          {
            "name": "ipAndPort",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UnboundidDSServer"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/clustermanagement": {
      "get": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Obtain ClusterFormationInfo",
        "description": "",
        "operationId": "getClusterFormationInfo",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ClusterFormationInfo"
            }
          }
        },
        "x-pmlPermissions": [
          "pml:read:guestinfo:read",
          "pml_cluster:write"
        ]
      }
    },
    "/clustermanagement/componenthealth": {
      "get": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Obtain HealthStates in text form",
        "description": "",
        "operationId": "getAllComponentHealthAsText",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      },
      "post": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Refresh All Component Health",
        "description": "",
        "operationId": "refreshAllComponentHealth",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      }
    },
    "/clustermanagement/componenthealth/{name}": {
      "get": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Obtain ComponentHealthState by name in text form",
        "description": "",
        "operationId": "getComponentHealthAsText",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of the component health state to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      },
      "post": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Refresh Component Health by name",
        "description": "",
        "operationId": "refreshComponentHealth",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of the component health state to return to refresh",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      }
    },
    "/clustermanagement/node": {
      "get": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Obtain Nodes Information in text format",
        "description": "",
        "operationId": "getRegisteredClusterNodesAsText",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      },
      "post": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Add a node to a cluster",
        "description": "",
        "operationId": "addNode",
        "parameters": [
          {
            "name": "register-ignore",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forced",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ignoreveto",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      }
    },
    "/clustermanagement/node/{name}": {
      "get": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Obtain Node Information by node name",
        "description": "",
        "operationId": "getRegisteredClusterNode",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of the node to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      },
      "delete": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Delete a cluster node by its name",
        "description": "",
        "operationId": "removeNode",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of the cluster node to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "unregister-ignore",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forced",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ignoreveto",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      }
    },
    "/clustermanagement/vif": {
      "get": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Obtain Information about PML Vifs",
        "description": "",
        "operationId": "getVifs",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PmVifs"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      },
      "post": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Add a PmVif to a cluster",
        "description": "",
        "operationId": "addPmVif",
        "produces": [
          "*/*"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      }
    },
    "/clustermanagement/vif/{type}": {
      "delete": {
        "tags": [
          "PML Cluster framework"
        ],
        "summary": "Delete a cluster vif by its type",
        "description": "",
        "operationId": "removeVif",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "type of the vif to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      }
    },
    "/directory/status/{id}": {
      "get": {
        "tags": [
          "directory services REST API"
        ],
        "summary": "return status on a given directory realm",
        "description": "",
        "operationId": "getDirectoryStatus",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the directory realm",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DirectoryRealmStatus"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/download": {
      "get": {
        "tags": [
          "PML Core UploadDownload Service"
        ],
        "summary": "Download a file from the /support directory",
        "description": "",
        "operationId": "getFile",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "description": "The full file name path including /support to download. ",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get groups",
        "description": "",
        "operationId": "getGroups",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Groups"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get a group by its id",
        "description": "",
        "operationId": "getGroup",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/initialized": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Determine if PML is initialized.  Initialized means stock ManagedUser admin does not have the initial password and is in the Administrator Role",
        "description": "",
        "operationId": "isPMLInitialized",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Initialized"
            }
          }
        },
        "x-pmlPermissions": [
          "pml:read:guestinfo:read",
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/login/authenticate": {
      "post": {
        "tags": [
          "OAuth2 related REST API"
        ],
        "summary": "Obtain authentication token using Form as per OAuth2 spec",
        "description": "",
        "operationId": "handleAuthRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "formData",
            "description": "username to authenticate",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "password for the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "formData",
            "description": "not implemented",
            "required": false,
            "type": "string"
          },
          {
            "name": "grant_type",
            "in": "formData",
            "description": "must be 'password'",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/login/authenticatewithobject": {
      "post": {
        "tags": [
          "OAuth2 related REST API"
        ],
        "summary": "Obtain authentication token using JSON/XML",
        "description": "",
        "operationId": "handleAuthRequestWithObject",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payload for Authentication",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AuthenticationTransfer"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/login/check": {
      "post": {
        "tags": [
          "OAuth2 related REST API"
        ],
        "summary": "Check credentials",
        "description": "",
        "operationId": "checkAuth",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payload for Authentication containing username and password",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AuthenticationTransfer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AuthCheckResponse"
            }
          }
        }
      }
    },
    "/login/delete": {
      "delete": {
        "tags": [
          "OAuth2 related REST API"
        ],
        "summary": "Delete an authentication token",
        "description": "",
        "operationId": "delete",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/login/refresh": {
      "post": {
        "tags": [
          "OAuth2 related REST API"
        ],
        "summary": "Obtain a new authentication token from a previous refresh_token",
        "description": "",
        "operationId": "refresh",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "refresh_token",
            "in": "formData",
            "description": "refresh_token from previously returned token",
            "required": false,
            "type": "string"
          },
          {
            "name": "grant_type",
            "in": "formData",
            "description": "must be 'refresh_token'",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/login/refreshwithobject": {
      "post": {
        "tags": [
          "OAuth2 related REST API"
        ],
        "summary": "Obtain a new authentication token from a previous refresh_token using JSON/XML",
        "description": "",
        "operationId": "refreshWithObject",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payload for Authentication",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AuthenticationTransfer"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/managedgroups": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get managed groups",
        "description": "",
        "operationId": "getManagedGroups",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ManagedGroups"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Create a managed group",
        "description": "",
        "operationId": "addManagedGroup",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the managed group to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ManagedGroup"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/managedgroups/{groupId}": {
      "delete": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Delete a managed group by its id",
        "description": "",
        "operationId": "deleteManagedGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "the id of the managed group to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/managedgroups/{groupId}/managedusers/{userId}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get managed user with user_id in managed group with group_id",
        "description": "",
        "operationId": "getManagedUserForManagedGroup",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "the id of the group",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "the id of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "showHidden",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ManagedUser"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "delete": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Delete a managed group's managed user with ids",
        "description": "",
        "operationId": "deleteManagedGroupManagedUser",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "the id of the managed group that has the managed user to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "the id of the managed group's tmanaged user to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/managedgroups/{id}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get managed group by id",
        "description": "",
        "operationId": "getManagedGroup",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the group to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ManagedGroup"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/managedgroups/{id}/managedusers": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get managed users for managed group with id",
        "description": "",
        "operationId": "getManagedUsersForManagedGroup",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the group to return users",
            "required": true,
            "type": "string"
          },
          {
            "name": "showHidden",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ManagedUsers"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a managed user to a managed group with an id",
        "description": "",
        "operationId": "addManagedUserToManagedGroup",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the managed group",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the managed user",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ManagedUser"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/managedgroups/{id}/managedusers/{managedUserId}": {
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a managed user to a managed group with an id by that managed user's id",
        "description": "",
        "operationId": "addManagedUserToManagedGroupByIdNoForm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the managed group",
            "required": true,
            "type": "string"
          },
          {
            "name": "managedUserId",
            "in": "path",
            "description": "the id of the managed user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/managedusers": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get managed users",
        "description": "",
        "operationId": "getManagedUsers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "showHidden",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ManagedUsers"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Create a managed user, the password should be sent in plain text relying on https encryption",
        "description": "",
        "operationId": "addManagedUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the managed user to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ManagedUser"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      },
      "put": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Modify a managed user, the password should be sent in plain text relying on https encryption",
        "description": "",
        "operationId": "modifyManagedUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "reset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the managed user that will entirely replace an existing one",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ManagedUser"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "owninfo:write"
        ]
      }
    },
    "/managedusers/{id}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get managed user by id",
        "description": "",
        "operationId": "getManagedUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user to return",
            "required": true,
            "type": "string"
          },
          {
            "name": "showHidden",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ManagedUser"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write",
          "owninfo:write"
        ]
      },
      "delete": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Delete a managed user by its id",
        "description": "",
        "operationId": "deleteManagedUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the managed user to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/managedusers/{userId}": {
      "patch": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Modify a managed user, the password should be sent in plain text relying on https encryption",
        "description": "",
        "operationId": "patchManagedUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "reset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "the id of the managed user to delete",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the managed user partially replace an existing one with available values",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ManagedUser"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "owninfo:write"
        ]
      }
    },
    "/passwordpolicy": {
      "get": {
        "tags": [
          "Password Policy REST API"
        ],
        "summary": "Get the current Password Policy Ruleset, from site config + product config",
        "description": "",
        "operationId": "getPasswordPolicyRuleset",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      },
      "post": {
        "tags": [
          "Password Policy REST API"
        ],
        "summary": "Post a new Password Policy Ruleset, modifying site config",
        "description": "",
        "operationId": "patchSiteConfiguration",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      },
      "delete": {
        "tags": [
          "Password Policy REST API"
        ],
        "summary": "Restore the current Password Policy Ruleset back to product config defaults",
        "description": "",
        "operationId": "resetToDefaults",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/permissions": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get permissions",
        "description": "",
        "operationId": "getPermissions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PermissionSpecs"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a permisson",
        "description": "",
        "operationId": "addPermission",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the permission object to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PermissionSpec"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC_permission:create_delete"
        ]
      }
    },
    "/permissions/{id}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get a permission by its id",
        "description": "",
        "operationId": "getPermission",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the permission to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PermissionSpec"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "delete": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Delete a permisson by its id",
        "description": "",
        "operationId": "deletePermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the permission to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC_permission:create_delete"
        ]
      }
    },
    "/publicroles": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get public (non hidden) roles",
        "description": "",
        "operationId": "getPublicRoles",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "showHidden",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Roles"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/publicroles/{id}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get a public (non hidden) role by its id",
        "description": "",
        "operationId": "getPublicRole",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "role id",
            "required": true,
            "type": "string"
          },
          {
            "name": "showHidden",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/publicroles/{id}/groups": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get groups from a role with an id",
        "description": "",
        "operationId": "getGroupsFromPublicRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "showHidden",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Groups"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/publicroles/{id}/groups/{gid}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get a group from a role with an id by that group's id",
        "description": "",
        "operationId": "getGroupFromPublicRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "gid",
            "in": "path",
            "description": "the id of the group",
            "required": true,
            "type": "string"
          },
          {
            "name": "showHidden",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/publicroles/{id}/users": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get users from a role with an id",
        "description": "",
        "operationId": "getUsersFromPublicRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "showHidden",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/publicroles/{id}/users/{uid}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get a user from a role with an id by that user's id",
        "description": "",
        "operationId": "getUserFromPublicRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "uid",
            "in": "path",
            "description": "the id of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "showHidden",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/quorummessage/restart": {
      "put": {
        "tags": [
          "PML Quorum framework"
        ],
        "summary": "Restart Quorum",
        "description": "This request has no request body and can go to any node in the cluster, active or passive, and causes the Quorum operation to be started if it was stopped, or restarted if it was running. Note: it doesn't change the current PML server mode, so it makes no practical use to send this request to the currently active PML node. The main objective for this request is to speed up quorum re-election on a chosen passive node after the active PML node was powered down as a result of failover.",
        "operationId": "restartQuorum",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_quorum:write"
        ]
      }
    },
    "/quorummessage/setweight": {
      "put": {
        "tags": [
          "PML Quorum framework"
        ],
        "summary": "Set Initial Quorum weight for the current node",
        "description": "This request has a Form body with a single weight parameter. The request content type should be application/x-www-form-urlencoded",
        "operationId": "setInitialQuorum",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "weight",
            "in": "formData",
            "description": "This form parameter supplies the Initial Quorum weight for the current node",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_quorum:write"
        ]
      }
    },
    "/realmconfigs": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get realm configs",
        "description": "",
        "operationId": "getRealmConfigs",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RealmConfigs"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a realm config",
        "description": "",
        "operationId": "addRealmConfig",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the realm config to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RealmConfig"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/realmconfigs/{id}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get a realm config by its id",
        "description": "",
        "operationId": "getRealmConfig",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the realm config",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RealmConfig"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "put": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Replace a realm config",
        "description": "",
        "operationId": "replaceRealmConfig",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the replacement realm config",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RealmConfig"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      },
      "delete": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Delete a realm config by its id",
        "description": "",
        "operationId": "deleteRealmConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the realm config to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/roles": {
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Create a role",
        "description": "",
        "operationId": "addRole",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the role to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC_role:create_delete"
        ]
      }
    },
    "/roles/{id}": {
      "delete": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Delete a role by its id",
        "description": "",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the role to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC_role:create_delete"
        ]
      }
    },
    "/roles/{id}/groups/{gid}": {
      "delete": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Delete a group from a role with an id by the group's id",
        "description": "",
        "operationId": "removeGroupFromRole",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "gid",
            "in": "path",
            "description": "the id of the group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/roles/{id}/permissions": {
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a permission to a role with an id by that permission's id",
        "description": "",
        "operationId": "addPermissionToRoleById",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "permissionId",
            "in": "formData",
            "description": "the id of the permission",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC_role:permission_modify"
        ]
      }
    },
    "/roles/{id}/permissions/{permissionId}": {
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a permission to a role with an id by that permission's id",
        "description": "",
        "operationId": "addPermissionToRoleByIdNoForm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "the id of the permission",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC_role:permission_modify"
        ]
      }
    },
    "/roles/{id}/permissions/{pid}": {
      "delete": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Delete a permission from a role with an id by that permission's id",
        "description": "",
        "operationId": "removePermissionFromRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "pid",
            "in": "path",
            "description": "the id of the permission",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC_role:permission_modify"
        ]
      }
    },
    "/roles/{id}/users/{uid}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get a user from a role with an id by that user's id",
        "description": "",
        "operationId": "getUserFromRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "delete": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Delete a user from a role with an id by the user's id",
        "description": "",
        "operationId": "removeUserFromRole",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "uid",
            "in": "path",
            "description": "the id of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/roles/{roleId}/groups": {
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a group to a role with an id by that group's id",
        "description": "",
        "operationId": "addGroupToRoleById",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "formData",
            "description": "The id of the group to add",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/roles/{roleId}/groups/{groupId}": {
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a group to a role with an id by that group's id",
        "description": "",
        "operationId": "addGroupToRoleByIdNoForm",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the group to add",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/roles/{roleId}/managedgroups": {
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a managed group to a role with an id",
        "description": "",
        "operationId": "addManagedGroupToRole",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The group to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ManagedGroup"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/roles/{roleId}/managedusers": {
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a managed user to a role",
        "description": "",
        "operationId": "addManagedUserToRole",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the user to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ManagedUser"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/roles/{roleId}/users": {
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a user to a role with an id by that user's id",
        "description": "",
        "operationId": "addUserToRoleById",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "formData",
            "description": "the id of the user",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/roles/{roleId}/users/{userId}": {
      "post": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Add a user to a role with an id by that user's id",
        "description": "",
        "operationId": "addUserToRoleByIdNoForm",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "the id of the role",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "the id of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/servermanagement": {
      "get": {
        "tags": [
          "PML Server framework"
        ],
        "summary": "Get PML server state on the current node in text format",
        "description": "",
        "operationId": "get",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      },
      "put": {
        "tags": [
          "PML Server framework"
        ],
        "summary": "Change PML Server parameters: mode, upgrade flags and log level of the specified logger",
        "description": "This request has Form request body and must specify application/x-www-form-urlencoded content type",
        "operationId": "putFromForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "runstate",
            "in": "formData",
            "description": "for interanl use",
            "required": false,
            "type": "string"
          },
          {
            "name": "doBackup",
            "in": "formData",
            "description": "for interanl use",
            "required": false,
            "type": "string"
          },
          {
            "name": "loggerName",
            "in": "formData",
            "description": "Display the log level for the specified logger",
            "required": false,
            "type": "string"
          },
          {
            "name": "logLevel",
            "in": "formData",
            "description": "Change the log level for the logger specified in loggerName parameter. The valid values are trace, debug, info, warn, error",
            "required": false,
            "type": "string"
          },
          {
            "name": "persistCluster",
            "in": "formData",
            "description": "Persist the change of the log level specified in logLevel parameter for the logger specified in loggerName parameter. The valid value is cluster.",
            "required": false,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "Set PML Server mode on current node and transit PML Server on this node to that mode. The valid values are: nopmfailover to set 'no PML Failover' mode, passive to set passive mode (it will remove nopmfailover mode if the PML server was in that mode), active to set 'PML in upgrade' flag when modifier parameter is specified and set to active_upgrading, active to clear 'PML in upgrade' and 'No Config Change Allowed' flags when modifier parameter is not specified.",
            "required": false,
            "type": "string"
          },
          {
            "name": "modeall",
            "in": "formData",
            "description": "use this parameter with any value to propagate applicable PML Server mode specified in the mode parameter, to all cluster nodes.",
            "required": false,
            "type": "string"
          },
          {
            "name": "modifier",
            "in": "formData",
            "description": "Set 'PML in upgrade' or 'No Config Change Allowed' flags. The valid values are: active_upgrading to set 'PML in upgrade' flag, disallow_config to set 'No Config Change Allowed' flag.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      }
    },
    "/servermanagement/upgradestates": {
      "get": {
        "tags": [
          "PML Server framework"
        ],
        "summary": "Get PML server state on all cluster nodes",
        "description": "",
        "operationId": "getUPgradeStates",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpgradeStates"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      }
    },
    "/sessions": {
      "get": {
        "tags": [
          "Session Service"
        ],
        "summary": "Obtain a list of sessions",
        "description": "",
        "operationId": "getSessions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "all=true returns even invalid sessions that have only internal meaning",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Sessions"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/sessions/timeout": {
      "get": {
        "tags": [
          "Session Service"
        ],
        "summary": "Get the GUI session timeout value",
        "description": "",
        "operationId": "getTimeout",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "post": {
        "tags": [
          "Session Service"
        ],
        "summary": "Set the GUI session timeout value",
        "description": "",
        "operationId": "setTimeout",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "key-value pair for session timeout",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      },
      "delete": {
        "tags": [
          "Session Service"
        ],
        "summary": "Reset the GUI session timeout value back to default",
        "description": "",
        "operationId": "resetTimeout",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/sessions/{id}": {
      "get": {
        "tags": [
          "Session Service"
        ],
        "summary": "Obtain a specific session by id",
        "description": "",
        "operationId": "getSession",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the session to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BaseSessionToken"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      },
      "delete": {
        "tags": [
          "Session Service"
        ],
        "summary": "Delete a sesson by id",
        "description": "",
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the session to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:write"
        ]
      }
    },
    "/trust/mytrusterconnection": {
      "get": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Create a truster connection representing this cluster to another based on an accepted trust request user",
        "description": "",
        "operationId": "getMyTrusterConnectionQp",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "host",
            "in": "query",
            "description": "the host or address for this cluster suitable for the client to connect with",
            "required": true,
            "type": "string"
          },
          {
            "name": "managedUser",
            "in": "query",
            "description": "the managedUser for the client certificate that will represent this cluster",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TrusterConnection"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:read",
          "pml_remote_trust:write"
        ]
      }
    },
    "/trust/mytrustrequest": {
      "get": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Create a trust request representing a user of this cluster to another",
        "description": "",
        "operationId": "getMyTrustRequestQp",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "description": "the alias of the client certificate that will represent this cluster",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TrustRequest"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:read",
          "pml_remote_trust:write"
        ]
      }
    },
    "/trust/trusterconnection": {
      "get": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Get truster connections",
        "description": "",
        "operationId": "getTrusterConnections",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TrusterConnections"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:read",
          "pml_remote_trust:write"
        ]
      },
      "post": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Add a truster connection",
        "description": "",
        "operationId": "addTrusterConnectionQp",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the remote connection object to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrusterConnection"
            }
          },
          {
            "name": "clientNameForConnection",
            "in": "query",
            "description": "the client name for this connection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:write"
        ]
      }
    },
    "/trust/trusterconnection/{id}": {
      "get": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Get a truster connection by id",
        "description": "",
        "operationId": "getTrusterConnection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TrusterConnection"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:read",
          "pml_remote_trust:write"
        ]
      },
      "delete": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Delete remote connection by id",
        "description": "",
        "operationId": "deleteTrusterConnection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:write"
        ]
      }
    },
    "/trust/trusterconnectiontest": {
      "get": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "test a truster connection by name",
        "description": "",
        "operationId": "testTrusterConnectionQp",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "clientNameForConnection",
            "in": "query",
            "description": "the clientNameForConnection to test",
            "required": true,
            "type": "string"
          },
          {
            "name": "uriToGet",
            "in": "query",
            "description": "the uri to test",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:read",
          "pml_remote_trust:write"
        ]
      }
    },
    "/trust/trustinfo": {
      "get": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Get remote trust info",
        "description": "",
        "operationId": "getRemoteTrustInfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RemoteTrustInfo"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:read",
          "pml_remote_trust:write"
        ]
      }
    },
    "/trust/trustrequest": {
      "get": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Get accepted trust requests",
        "description": "",
        "operationId": "getTrustRequests",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TrustRequests"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:read",
          "pml_remote_trust:write"
        ]
      },
      "post": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Process an incoming trust request",
        "description": "",
        "operationId": "trustOtherClusterQp",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the remote connection object to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrustRequest"
            }
          },
          {
            "name": "managedUserName",
            "in": "query",
            "description": "the managedUser to create",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleName",
            "in": "query",
            "description": "the roleName of the Role for the managedUser",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:write"
        ]
      }
    },
    "/trust/trustrequest/{id}": {
      "get": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Get an accepted trust request by id",
        "description": "",
        "operationId": "getAcceptedTrustRequest",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TrustRequest"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:read",
          "pml_remote_trust:write"
        ]
      },
      "delete": {
        "tags": [
          "PML Remote Trust Service"
        ],
        "summary": "Delete trust request by id",
        "description": "",
        "operationId": "deleteTrustRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_remote_trust:write"
        ]
      }
    },
    "/upload": {
      "post": {
        "tags": [
          "PML Core UploadDownload Service"
        ],
        "summary": "Upload a file under the /support directory",
        "description": "Because of the multi-part form media type required it will be impossible to use the swagger Try it Out. Instead you can test with curl as follows: curl --request POST --header 'Content-Type: multipart/form-data' -F target=/support/myfile -F file=@/path/to/myfile  -u $pml_username:$pml_password -k \"https://localhost:<securePort>/pml/upload\"",
        "operationId": "upload",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The InputStream for the file to upload. Typically this is provided by an HTML form",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "The FormDataContentDisposition for the file to upload. Typically this is provided by an HTML form",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FormDataContentDisposition"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "The target destination for the file being uploaded. Typically this is provided by an HTML form",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-pmlPermissions": [
          "pml_cluster:write"
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get users",
        "description": "",
        "operationId": "getUsers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "RBAC related REST API"
        ],
        "summary": "Get a user by its id",
        "description": "",
        "operationId": "getUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "x-pmlPermissions": [
          "pml_RBAC:read",
          "pml_RBAC:write"
        ]
      }
    }
  },
  "definitions": {
    "ActionStatus": {
      "type": "object",
      "properties": {
        "node": {
          "type": "string"
        },
        "error": {
          "type": "integer",
          "format": "int32"
        },
        "suggestedAction": {
          "type": "string",
          "enum": [
            "NOACTION",
            "REPEAT_AFTER_DELAY",
            "REPEAT_NO_DELAY",
            "FAIL"
          ]
        },
        "message": {
          "$ref": "#/definitions/MessageInfoEx"
        },
        "messageInfo": {
          "$ref": "#/definitions/MessageInfo"
        }
      },
      "xml": {
        "name": "actionStatus"
      }
    },
    "AuthCheckResponse": {
      "type": "object",
      "properties": {
        "authenticated": {
          "type": "boolean",
          "xml": {
            "name": "val"
          },
          "description": "value of the check",
          "default": false
        }
      }
    },
    "AuthenticationTransfer": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "grant_type": {
          "type": "string"
        },
        "refresh_token": {
          "type": "string"
        }
      },
      "xml": {
        "name": "AuthTransfer"
      }
    },
    "BaseSessionToken": {
      "type": "object",
      "discriminator": "jsonTypeInfo",
      "properties": {
        "username": {
          "type": "string"
        },
        "clientHost": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        },
        "uniqueKey": {
          "type": "string"
        },
        "loginDomain": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        },
        "lastAccessed": {
          "type": "string"
        },
        "lastHeartBeat": {
          "type": "integer",
          "format": "int64"
        },
        "valid": {
          "type": "boolean",
          "default": false
        },
        "sharedToken": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Session"
      }
    },
    "Catalog": {
      "type": "object",
      "properties": {
        "catalog": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CatalogKeys": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "xml": {
            "name": "key"
          },
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "keys"
      }
    },
    "CatalogMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "xml": {
        "name": "message"
      }
    },
    "Catalogs": {
      "type": "object",
      "properties": {
        "catalogs": {
          "type": "array",
          "xml": {
            "name": "catalog"
          },
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "catalogs"
      }
    },
    "CertificateDto": {
      "type": "object",
      "properties": {
        "base64Data": {
          "type": "string"
        }
      }
    },
    "CertificateList": {
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "xml": {
            "name": "certificate"
          },
          "items": {
            "$ref": "#/definitions/SSLCertificate"
          }
        }
      },
      "xml": {
        "name": "certificates"
      }
    },
    "ClusterFormationInfo": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ComponentHealthState": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "xml": {
            "name": "ComponentName"
          }
        },
        "state": {
          "xml": {
            "name": "ComponentHealth"
          },
          "$ref": "#/definitions/HealthState"
        }
      },
      "xml": {
        "name": "HealthState"
      }
    },
    "ContextResolverJAXBContext": {
      "type": "object"
    },
    "CookieSessionToken": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSessionToken"
        },
        {
          "type": "object",
          "xml": {
            "name": "CookieSessionToken"
          }
        }
      ]
    },
    "DNameFields": {
      "type": "object",
      "properties": {
        "cn": {
          "type": "string"
        },
        "ou": {
          "type": "string"
        },
        "o": {
          "type": "string"
        },
        "l": {
          "type": "string"
        },
        "st": {
          "type": "string"
        },
        "c": {
          "type": "string"
        }
      }
    },
    "DirectoryRealmStatus": {
      "type": "object",
      "properties": {
        "connected": {
          "type": "boolean",
          "default": false
        },
        "realmName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "baseDNs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userNamingAttribute": {
          "type": "string"
        },
        "supportedControls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supportedLDAPVersion": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "maxConnectionCount": {
          "type": "integer",
          "format": "int32"
        },
        "curConnectionCount": {
          "type": "integer",
          "format": "int32"
        },
        "failedConnectionAttempts": {
          "type": "integer",
          "format": "int64"
        },
        "successfulConnectionAttempts": {
          "type": "integer",
          "format": "int64"
        },
        "maxConnectionAge": {
          "type": "integer",
          "format": "int64"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DistinguishedName": {
      "type": "object",
      "properties": {
        "distinguished_name": {
          "type": "string",
          "xml": {
            "name": "value"
          }
        }
      },
      "xml": {
        "name": "distinguished_name"
      }
    },
    "ExtendedError": {
      "type": "object",
      "properties": {
        "severity": {
          "type": "string",
          "enum": [
            "OK",
            "Warning",
            "Critical"
          ]
        },
        "message": {
          "$ref": "#/definitions/MessageInfo"
        },
        "messageForCurrentLocale": {
          "type": "string"
        },
        "resolution": {
          "$ref": "#/definitions/MessageInfo"
        },
        "resolutionForCurrentLocale": {
          "type": "string"
        }
      }
    },
    "ExtendedInfo": {
      "type": "object",
      "properties": {
        "percentComplete": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "$ref": "#/definitions/MessageInfoExImpl"
        },
        "messageInfo": {
          "$ref": "#/definitions/MessageInfo"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "FormDataContentDisposition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fileName": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "readDate": {
          "type": "string",
          "format": "date-time"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Group": {
      "type": "object",
      "discriminator": "jsonTypeInfo",
      "properties": {
        "realmName": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Groups": {
      "type": "object",
      "properties": {
        "Groups": {
          "type": "array",
          "xml": {
            "name": "Group"
          },
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Group"
          }
        }
      }
    },
    "HealthExtension": {
      "type": "object",
      "xml": {
        "name": "HealthExtension"
      }
    },
    "HealthState": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "OK",
            "DEGRADED",
            "FAILED",
            "UNKNOWN"
          ]
        },
        "associatedMessageInfo": {
          "xml": {
            "name": "associatedMessage"
          },
          "$ref": "#/definitions/MessageInfo"
        },
        "correctiveActionInfo": {
          "xml": {
            "name": "correctiveAction"
          },
          "$ref": "#/definitions/MessageInfo"
        },
        "healthExtension": {
          "xml": {
            "name": "HealthExtension"
          },
          "$ref": "#/definitions/HealthExtension"
        }
      }
    },
    "HealthStates": {
      "type": "object",
      "properties": {
        "states": {
          "type": "array",
          "xml": {
            "name": "ComponentHealthState"
          },
          "items": {
            "$ref": "#/definitions/ComponentHealthState"
          }
        }
      },
      "xml": {
        "name": "ComponentHealthStates"
      }
    },
    "Initialized": {
      "type": "object",
      "properties": {
        "initialized": {
          "type": "boolean",
          "xml": {
            "name": "val"
          },
          "default": false
        }
      }
    },
    "InputStream": {
      "type": "object"
    },
    "KeyPair": {
      "type": "object",
      "properties": {
        "publicKey": {
          "$ref": "#/definitions/CertificateDto"
        },
        "privateKey": {
          "$ref": "#/definitions/CertificateDto"
        },
        "privateKeyPass": {
          "type": "string"
        }
      }
    },
    "ManagedGroup": {
      "type": "object",
      "properties": {
        "realmName": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "managedUsers": {
          "$ref": "#/definitions/ManagedUsers"
        }
      },
      "xml": {
        "name": "managedGroup"
      }
    },
    "ManagedGroups": {
      "type": "object",
      "properties": {
        "managedGroupSet": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ManagedGroup"
          }
        },
        "managedGroups": {
          "type": "array",
          "xml": {
            "name": "managedGroup"
          },
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ManagedGroup"
          }
        }
      }
    },
    "ManagedUser": {
      "type": "object",
      "properties": {
        "realmName": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "managed": {
          "type": "boolean",
          "default": false
        },
        "fullName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "officePhone": {
          "type": "string"
        },
        "mobilePhone": {
          "type": "string"
        },
        "locked": {
          "type": "boolean",
          "default": false
        },
        "pastPasswords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastPasswordDate": {
          "type": "string",
          "format": "date-time"
        },
        "sha256fingerprint": {
          "type": "string"
        }
      },
      "xml": {
        "name": "managedUser"
      }
    },
    "ManagedUsers": {
      "type": "object",
      "properties": {
        "managedUserSet": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ManagedUser"
          }
        },
        "managedUsers": {
          "type": "array",
          "xml": {
            "name": "managedUser"
          },
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ManagedUser"
          }
        }
      },
      "xml": {
        "name": "ManagedUsers"
      }
    },
    "MessageInfo": {
      "type": "object",
      "properties": {
        "catalogName": {
          "type": "string"
        },
        "messageKey": {
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "messageForCurrentLocale": {
          "type": "string"
        }
      },
      "xml": {
        "name": "messageInfo"
      }
    },
    "MessageInfoEx": {
      "type": "object",
      "properties": {
        "arguments": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "messageForCurrentLocale": {
          "type": "string"
        },
        "catalogName": {
          "type": "string"
        },
        "messageKey": {
          "type": "string"
        }
      }
    },
    "MessageInfoExImpl": {
      "type": "object",
      "properties": {
        "catalogName": {
          "type": "string"
        },
        "messageKey": {
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "messageForCurrentLocale": {
          "type": "string"
        }
      },
      "xml": {
        "name": "messageInfoEx"
      }
    },
    "MessageInfoImpl": {
      "type": "object",
      "properties": {
        "catalogName": {
          "type": "string"
        },
        "messageKey": {
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "xml": {
        "name": "messageInfo"
      }
    },
    "Node": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "Nodes": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "xml": {
            "name": "node"
          },
          "items": {
            "$ref": "#/definitions/Node"
          }
        },
        "activeNode": {
          "$ref": "#/definitions/Node"
        }
      },
      "xml": {
        "name": "ClusterNodes"
      }
    },
    "OAuth2SessionToken": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSessionToken"
        },
        {
          "type": "object",
          "properties": {
            "transferToken": {
              "$ref": "#/definitions/OAuth2TransferToken"
            }
          },
          "xml": {
            "name": "oAuth2SessionToken"
          }
        }
      ]
    },
    "OAuth2TransferToken": {
      "type": "object",
      "properties": {
        "expires_in": {
          "type": "string"
        },
        "refresh_token": {
          "type": "string"
        },
        "access_token": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "sessionID": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "Permission": {
      "type": "object"
    },
    "PermissionSpec": {
      "type": "object",
      "properties": {
        "assignablePermission": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "wildcardPermission": {
          "$ref": "#/definitions/WildcardPermission"
        }
      },
      "xml": {
        "name": "permission"
      }
    },
    "PermissionSpecs": {
      "type": "object",
      "properties": {
        "Permissions": {
          "type": "array",
          "xml": {
            "name": "Permission"
          },
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PermissionSpec"
          }
        }
      }
    },
    "PmVif": {
      "type": "object",
      "properties": {
        "ipaddress": {
          "type": "string"
        },
        "ifdevice": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "xml": {
        "name": "vif"
      }
    },
    "PmVifs": {
      "type": "object",
      "properties": {
        "vifs": {
          "type": "array",
          "xml": {
            "name": "vif"
          },
          "items": {
            "$ref": "#/definitions/PmVif"
          }
        }
      },
      "xml": {
        "name": "vifs"
      }
    },
    "RealmConfig": {
      "type": "object",
      "discriminator": "jsonTypeInfo",
      "properties": {
        "id": {
          "type": "string"
        },
        "realmName": {
          "type": "string"
        },
        "realmClassName": {
          "type": "string",
          "xml": {
            "name": "realmClass"
          }
        }
      }
    },
    "RealmConfigs": {
      "type": "object",
      "properties": {
        "realmConfigs": {
          "type": "array",
          "xml": {
            "name": "realmConfig"
          },
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RealmConfig"
          }
        }
      }
    },
    "RemoteTrustInfo": {
      "type": "object",
      "properties": {
        "trustRequests": {
          "$ref": "#/definitions/TrustRequests"
        },
        "trusterConnections": {
          "$ref": "#/definitions/TrusterConnections"
        },
        "trusterConnectionSet": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TrusterConnection"
          }
        },
        "trustRequestSet": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TrustRequest"
          }
        }
      }
    },
    "Role": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "hiddenRole": {
          "type": "boolean",
          "default": false
        },
        "permissions": {
          "$ref": "#/definitions/PermissionSpecs"
        },
        "groups": {
          "$ref": "#/definitions/Groups"
        },
        "users": {
          "$ref": "#/definitions/Users"
        },
        "shiroPermissionSet": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Permission"
          }
        }
      }
    },
    "Roles": {
      "type": "object",
      "properties": {
        "Roles": {
          "type": "array",
          "xml": {
            "name": "Role"
          },
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Role"
          }
        }
      }
    },
    "SSLCertificate": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "alternativeName": {
          "type": "string"
        },
        "base64Data": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "challengePassword": {
          "type": "string"
        },
        "commonName": {
          "type": "string"
        },
        "contactPerson": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        },
        "dnQualifier": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "eTag": {
          "type": "string"
        },
        "expiresInDays": {
          "type": "string"
        },
        "givenName": {
          "type": "string"
        },
        "initials": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "modified": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "organizationalUnit": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "md5Fingerprint": {
          "type": "string"
        },
        "sha1Fingerprint": {
          "type": "string"
        },
        "sha256Fingerprint": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "subjectAlternativeNameType": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "unstructuredName": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Sessions": {
      "type": "object",
      "properties": {
        "sessions": {
          "type": "array",
          "xml": {
            "name": "session"
          },
          "items": {
            "$ref": "#/definitions/BaseSessionToken"
          }
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "Current state of the task",
          "enum": [
            "NEW",
            "STARTING",
            "RUNNING",
            "SUSPENDED",
            "COMPLETED",
            "KILLED",
            "EXCEPTION",
            "TIMEOUT",
            "STOPPED",
            "INFAILOVER",
            "STALE"
          ]
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time the task was started"
        },
        "scheduledStartTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time the task completed, if applicable"
        },
        "status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionStatus"
          }
        },
        "data": {
          "type": "string"
        },
        "dataObject": {
          "type": "object"
        },
        "extendedError": {
          "$ref": "#/definitions/ExtendedError"
        },
        "location": {
          "type": "string",
          "description": "URI of the associated resource"
        },
        "resourceCategory": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "ID of the task"
        },
        "purpose": {
          "type": "string",
          "description": "Reason this task was created"
        },
        "purposeMessage": {
          "description": "Localised reason this task was created",
          "$ref": "#/definitions/MessageInfo"
        },
        "routingSelector": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "extendedInfo": {
          "$ref": "#/definitions/ExtendedInfo"
        },
        "i18nResponse": {
          "description": "Localised task response information",
          "$ref": "#/definitions/MessageInfo"
        },
        "response": {
          "type": "string"
        },
        "extendedErr": {
          "$ref": "#/definitions/extendedError"
        },
        "contextResolver": {
          "$ref": "#/definitions/ContextResolverJAXBContext"
        }
      }
    },
    "TaskInfo": {
      "type": "object",
      "properties": {
        "percentComplete": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "$ref": "#/definitions/MessageInfoImpl"
        },
        "messageInfo": {
          "xml": {
            "name": "message"
          },
          "$ref": "#/definitions/MessageInfo"
        },
        "taskid": {
          "type": "string"
        }
      }
    },
    "TaskResourceUsageReport": {
      "type": "object",
      "properties": {
        "estimatedSizesByPurpose": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "estimatedSizesByCatalog": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "numberOfTasksPerCatalog": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "numberOfTasksPerValue": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "estimatedUsagePerCatalog": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "estimatedUsagePerValue": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "totalUsage": {
          "type": "integer",
          "format": "int32"
        },
        "totalTasks": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Tasks": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "xml": {
            "name": "task"
          },
          "items": {
            "$ref": "#/definitions/Task"
          }
        }
      },
      "xml": {
        "name": "tasks"
      }
    },
    "TrustRequest": {
      "type": "object",
      "required": [
        "clientCACertificate",
        "clientCertificateFingerprint",
        "clientsAlias",
        "serversNameForClient"
      ],
      "properties": {
        "clientsAlias": {
          "type": "string",
          "description": "The client keystore alias for the certificate for which trust is being requested"
        },
        "clientCertificateFingerprint": {
          "type": "string",
          "description": "The fingerprint for the certificate for which trust is being requested"
        },
        "clientCACertificate": {
          "description": "The signing authority certificate of the signing authority that signed the certificate",
          "$ref": "#/definitions/CertificateDto"
        },
        "serversNameForClient": {
          "type": "string",
          "description": "The importing server's name for this client certificate, the external id for this trust request"
        },
        "id": {
          "type": "string",
          "description": "The internal id of this trust request"
        }
      }
    },
    "TrustRequests": {
      "type": "object",
      "properties": {
        "trustRequests": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TrustRequest"
          }
        }
      }
    },
    "TrusterConnection": {
      "type": "object",
      "required": [
        "clientNameForConnection",
        "clientsAlias",
        "connectionAddress",
        "serverCACertificate"
      ],
      "properties": {
        "connectionAddress": {
          "type": "string",
          "description": "This is the address the trusting server provides which the client can use to connect"
        },
        "clientsAlias": {
          "type": "string",
          "description": "This is the alias of the client certificate that this connection will honor"
        },
        "serverCACertificate": {
          "description": "The signing authority certificate of the signing authority that signed the server's certificate",
          "$ref": "#/definitions/CertificateDto"
        },
        "clientNameForConnection": {
          "type": "string",
          "description": "This is the external id for this request"
        },
        "clusterUuid": {
          "type": "string",
          "description": "The clusterUuid of the truster automatically added"
        },
        "id": {
          "type": "string",
          "description": "The internal id of this trust request"
        }
      }
    },
    "TrusterConnections": {
      "type": "object",
      "properties": {
        "trusterConnections": {
          "type": "array",
          "xml": {
            "name": "remoteConnection"
          },
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TrusterConnection"
          }
        }
      }
    },
    "UnboundidDSRealmConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/RealmConfig"
        },
        {
          "type": "object",
          "properties": {
            "userNamingAttribute": {
              "type": "string"
            },
            "baseDN": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "offline": {
              "type": "boolean",
              "default": false
            },
            "checkCertificates": {
              "type": "boolean",
              "default": false
            },
            "autoConfigureSecurity": {
              "type": "boolean",
              "default": false
            },
            "timeout": {
              "type": "integer",
              "format": "int32"
            },
            "servers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnboundidDSServer"
              }
            },
            "bindUser": {
              "type": "string"
            },
            "bindPassword": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          },
          "xml": {
            "name": "UnboundidDSRealmConfig"
          }
        }
      ]
    },
    "UnboundidDSServer": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "certs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SSLCertificate"
          }
        },
        "isSecure": {
          "type": "boolean",
          "default": false
        },
        "useStartTLS": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "UpgradeState": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "the name of the current node only supplied if PML has been configured"
        },
        "mode": {
          "type": "string",
          "description": "ACTIVE, PASSIVE, or NOPMFAILOVER"
        },
        "modifier": {
          "type": "string",
          "description": "UPGRADING or CONFIG_SUPPRESSED or nothing"
        },
        "restReady": {
          "type": "boolean",
          "description": "true if mode is ACTIVE and name is not empty, implication is that PML is setup and ACTIVE",
          "default": false
        }
      }
    },
    "UpgradeStates": {
      "type": "object",
      "properties": {
        "upgradeStates": {
          "type": "array",
          "xml": {
            "name": "upgradeState"
          },
          "items": {
            "$ref": "#/definitions/UpgradeState"
          }
        }
      },
      "xml": {
        "name": "UpgradeStates"
      }
    },
    "User": {
      "type": "object",
      "discriminator": "jsonTypeInfo",
      "properties": {
        "realmName": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "managed": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "Users": {
          "type": "array",
          "xml": {
            "name": "User"
          },
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "WildcardPermission": {
      "type": "object"
    },
    "extendedError": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "severity": {
          "type": "string",
          "description": "Severity of the error",
          "enum": [
            "OK",
            "Warning",
            "Critical"
          ]
        },
        "messageForCurrentLocale": {
          "type": "string",
          "xml": {
            "name": "message"
          },
          "description": "The error message localised for the requested locale"
        },
        "resolutionForCurrentLocale": {
          "type": "string",
          "xml": {
            "name": "resolution"
          },
          "description": "The resolution details localised for the requested locale"
        },
        "message": {
          "description": "Details of the error",
          "$ref": "#/definitions/MessageInfo"
        },
        "resolution": {
          "description": "Details of how to resolve the error, if applicable",
          "$ref": "#/definitions/MessageInfo"
        }
      },
      "xml": {
        "name": "extendedError"
      }
    }
  },
  "securityDefinitions": {
    "BasicAuth": {
      "type": "basic"
    },
    "oauth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "/pml/login/authenticatewithobject"
    }
  },
  "security": [
    {
      "BasicAuth": [],
      "oauth": []
    }
  ]
}